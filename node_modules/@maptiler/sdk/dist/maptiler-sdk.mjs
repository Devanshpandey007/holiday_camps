var Sa = Object.defineProperty;
var Lr = (r) => {
  throw TypeError(r);
};
var ka = (r, e, t) => e in r ? Sa(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var M = (r, e, t) => ka(r, typeof e != "symbol" ? e + "" : e, t), _t = (r, e, t) => e.has(r) || Lr("Cannot " + t);
var T = (r, e, t) => (_t(r, e, "read from private field"), t ? t.call(r) : e.get(r)), fe = (r, e, t) => e.has(r) ? Lr("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(r) : e.set(r, t), ve = (r, e, t, n) => (_t(r, e, "write to private field"), n ? n.call(r, t) : e.set(r, t), t), V = (r, e, t) => (_t(r, e, "access private method"), t);
import x, { AJAXError as Ca } from "maplibre-gl";
import { Language as La, getLanguageInfoFromCode as Ar, config as zt, MapStyle as je, mapStylePresetList as $t, expandMapStyle as Aa, MapStyleVariant as Ta, ReferenceMapStyle as Ea, getLanguageInfoFromFlag as Ia, toLanguageInfo as Ma, geolocation as Tr } from "@maptiler/client";
import { MapStyle as _u, MapStyleVariant as zu, ReferenceMapStyle as $u, ServiceError as Pu, areSameLanguages as Ru, bufferToPixelDataBrowser as Fu, circumferenceAtLatitude as Nu, coordinates as Ou, data as Du, elevation as ju, expandMapStyle as qu, geocoding as Uu, geolocation as Bu, getAutoLanguage as Vu, getBufferToPixelDataParser as Gu, getLanguageInfoFromCode as Hu, getLanguageInfoFromFlag as Ku, getLanguageInfoFromKey as Zu, getTileCache as Wu, isLanguageInfo as Ju, mapStylePresetList as Yu, math as Xu, misc as Qu, staticMaps as ec, styleToStyle as tc, toLanguageInfo as rc } from "@maptiler/client";
import _a from "events";
import { v4 as za } from "uuid";
import { Base64 as $a } from "js-base64";
const Pa = "@maptiler/sdk", Ra = "2.4.0", Fa = "The Javascript & TypeScript map SDK tailored for MapTiler Cloud", Na = "dist/maptiler-sdk.mjs", Oa = "dist/maptiler-sdk.d.ts", Da = "dist/maptiler-sdk.css", ja = "module", qa = {
  ".": {
    import: "./dist/maptiler-sdk.mjs",
    types: "./dist/maptiler-sdk.d.ts"
  },
  "./dist/maptiler-sdk.css": {
    import: "./dist/maptiler-sdk.css"
  },
  "./style.css": {
    import: "./dist/maptiler-sdk.css"
  }
}, Ua = [
  "maptiler",
  "map",
  "sdk",
  "webmap",
  "cloud",
  "webGL",
  "maplibre"
], Ba = "https://docs.maptiler.com/sdk-js/", Va = "BSD-3-Clause", Ga = {
  type: "git",
  url: "https://github.com/maptiler/maptiler-sdk-js.git"
}, Ha = {
  biome: "biome check --max-diagnostics=1000",
  "biome:fix": "npx @biomejs/biome check --max-diagnostics=1000 --write",
  doc: "rm -rf docs/* && typedoc --out docs && cp -r images docs/",
  test: "vitest run",
  "build-css": "node scripts/replace-path-with-content.js src/style/style_template.css dist/tmp_maptiler-sdk.css && cat node_modules/maplibre-gl/dist/maplibre-gl.css dist/tmp_maptiler-sdk.css > dist/maptiler-sdk.css && rm dist/tmp_maptiler-sdk.css && cp dist/maptiler-sdk.css build/maptiler-sdk.css",
  "build-umd": "tsc && NODE_ENV=production vite build -c vite.config-umd.ts",
  "build-es": "tsc && NODE_ENV=production vite build -c vite.config-es.ts",
  build: "npm run build-es; npm run build-umd; npm run build-css",
  make: "npm run biome:fix && npm run build",
  "dev-umd": "npm run build-css && tsc && NODE_ENV=dev vite build -w -c vite.config-umd.ts",
  help: "vite build --help"
}, Ka = "MapTiler", Za = {
  "@biomejs/biome": "1.8.3",
  "@types/uuid": "^9.0.2",
  "@types/xmldom": "^0.1.31",
  "@xmldom/xmldom": "^0.8.10",
  serve: "^14.2.0",
  terser: "^5.17.1",
  typedoc: "^0.24.8",
  typescript: "^5.1.6",
  vite: "^5.3.4",
  "vite-plugin-dts": "^4.0.0-beta.0",
  vitest: "^0.34.2"
}, Wa = {
  "@maplibre/maplibre-gl-style-spec": "^20.3.1",
  "@maptiler/client": "^2.0.0",
  events: "^3.3.0",
  "js-base64": "^3.7.4",
  "maplibre-gl": "4.7.1",
  uuid: "^9.0.0"
}, Ja = {
  name: Pa,
  version: Ra,
  description: Fa,
  module: Na,
  types: Oa,
  style: Da,
  type: ja,
  exports: qa,
  keywords: Ua,
  homepage: Ba,
  license: Va,
  repository: Ga,
  scripts: Ha,
  author: Ka,
  devDependencies: Za,
  dependencies: Wa
}, I = {
  /**
   * Language mode to display labels in both the local language and the language of the visitor's device, concatenated.
   * Note that if those two languages are the same, labels won't be duplicated.
   */
  VISITOR: {
    code: null,
    flag: "visitor",
    name: "Visitor",
    latin: !0,
    isMode: !0,
    geocoding: !1
  },
  /**
   * Language mode to display labels in both the local language and English, concatenated.
   * Note that if those two languages are the same, labels won't be duplicated.
   */
  VISITOR_ENGLISH: {
    code: null,
    flag: "visitor_en",
    name: "Visitor English",
    latin: !0,
    isMode: !0,
    geocoding: !1
  },
  /**
   * Language mode to display labels in a language enforced in the style.
   */
  STYLE: { code: null, flag: "style", name: "Style", latin: !1, isMode: !0, geocoding: !1 },
  /**
   * Language mode to display labels in a language enforced in the style. The language cannot be further modified.
   */
  STYLE_LOCK: {
    code: null,
    flag: "style_lock",
    name: "Style Lock",
    latin: !1,
    isMode: !0,
    geocoding: !1
  },
  ...La
};
function Er() {
  if (typeof navigator > "u") {
    const e = Intl.DateTimeFormat().resolvedOptions().locale.split("-")[0], t = Ar(e);
    return t || I.ENGLISH;
  }
  return Array.from(new Set(navigator.languages.map((e) => e.split("-")[0]))).map((e) => Ar(e)).filter((e) => e)[0] ?? I.LOCAL;
}
const H = {
  maptilerLogoURL: "https://api.maptiler.com/resources/logo.svg",
  maptilerURL: "https://www.maptiler.com/",
  maptilerApiHost: "api.maptiler.com",
  rtlPluginURL: "https://cdn.maptiler.com/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.min.js",
  primaryLanguage: I.STYLE,
  secondaryLanguage: I.LOCAL,
  terrainSourceURL: "https://api.maptiler.com/tiles/terrain-rgb-v2/tiles.json",
  terrainSourceId: "maptiler-terrain"
};
Object.freeze(H);
const dn = za();
class Ya extends _a {
  constructor() {
    super(...arguments);
    /**
     * The primary language. By default, the language of the web browser is used.
     */
    M(this, "primaryLanguage", H.primaryLanguage);
    /**
     * The secondary language, to overwrite the default language defined in the map style.
     * This settings is highly dependant on the style compatibility and may not work in most cases.
     */
    M(this, "secondaryLanguage");
    /**
     * Setting on whether of not the SDK runs with a session logic.
     * A "session" is started at the initialization of the SDK and finished when the browser
     * page is being refreshed.
     * When `session` is enabled (default: true), the extra URL param `mtsid` is added to queries
     * on the MapTiler Cloud API. This allows MapTiler to enable "session based billing".
     */
    M(this, "session", !0);
    /**
     * Enables client-side caching of requests for tiles and fonts.
     * The cached requests persist multiple browser sessions and will be reused when possible.
     * Works only for requests to the MapTiler Cloud API when sessions are enabled.
     */
    M(this, "caching", !0);
    /**
     * Unit to be used
     */
    M(this, "_unit", "metric");
    /**
     * MapTiler Cloud API key
     */
    M(this, "_apiKey", "");
  }
  /**
   * Set the unit system
   */
  set unit(t) {
    this._unit = t, this.emit("unit", t);
  }
  /**
   * Get the unit system
   */
  get unit() {
    return this._unit;
  }
  /**
   * Set the MapTiler Cloud API key
   */
  set apiKey(t) {
    this._apiKey = t, zt.apiKey = t, this.emit("apiKey", t);
  }
  /**
   * Get the MapTiler Cloud API key
   */
  get apiKey() {
    return this._apiKey;
  }
  /**
   * Set a the custom fetch function to replace the default one
   */
  set fetch(t) {
    zt.fetch = t;
  }
  /**
   * Get the fetch fucntion
   */
  get fetch() {
    return zt.fetch;
  }
}
const B = new Ya(), { addProtocol: Ir } = x, Vt = "localcache_source", Gt = "localcache", Xa = "maptiler_sdk", Qa = 1e3, eo = 100, Ht = typeof caches < "u";
function to(r, e) {
  if (Ht && B.caching && B.session && r.host === H.maptilerApiHost) {
    if (e === "Source" && r.href.includes("tiles.json"))
      return r.href.replace("https://", `${Vt}://`);
    if (e === "Tile" || e === "Glyphs")
      return r.href.replace("https://", `${Gt}://`);
  }
  return r.href;
}
let Pt;
async function yn() {
  return Pt || (Pt = await caches.open(Xa)), Pt;
}
let Mr = 0;
async function ro() {
  const r = await yn(), e = await r.keys(), t = e.slice(0, Math.max(e.length - Qa, 0));
  for (const n of t)
    r.delete(n);
}
function no() {
  Ir(
    Vt,
    async (r, e) => {
      if (!r.url) throw new Error("");
      r.url = r.url.replace(`${Vt}://`, "https://");
      const t = r;
      t.signal = e.signal;
      const n = await fetch(r.url, t), a = await n.json();
      return a.tiles && a.tiles.length > 0 && (a.tiles[0] += `&last-modified=${n.headers.get("Last-Modified")}`), {
        data: a,
        cacheControl: n.headers.get("Cache-Control"),
        expires: n.headers.get("Expires")
      };
    }
  ), Ir(
    Gt,
    async (r, e) => {
      if (!r.url) throw new Error("");
      r.url = r.url.replace(`${Gt}://`, "https://");
      const t = new URL(r.url), n = new URL(t);
      n.searchParams.delete("mtsid"), n.searchParams.delete("key");
      const a = n.toString(), o = new URL(t);
      o.searchParams.delete("last-modified");
      const i = o.toString(), s = async (m) => ({
        data: await m.arrayBuffer(),
        cacheControl: m.headers.get("Cache-Control"),
        expires: m.headers.get("Expires")
      }), l = await yn(), u = await l.match(a);
      if (u)
        return s(u);
      const c = r;
      c.signal = e.signal;
      const p = await fetch(i, c);
      return p.status >= 200 && p.status < 300 && (l.put(a, p.clone()).catch(() => {
      }), ++Mr > eo && (ro(), Mr = 0)), s(p);
    }
  );
}
function ao() {
  if (typeof window > "u") return;
  const r = x.getRTLTextPluginStatus();
  if (r === "unavailable" || r === "requested")
    try {
      x.setRTLTextPlugin(H.rtlPluginURL, !0);
    } catch {
    }
}
function oo(r, e) {
  for (const t of r)
    typeof e[t] == "function" && (e[t] = e[t].bind(e));
}
function _e(r, e, t) {
  const n = window.document.createElement(r);
  return e !== void 0 && (n.className = e), t && t.appendChild(n), n;
}
function mn(r) {
  r.parentNode && r.parentNode.removeChild(r);
}
function _r(r, e) {
  let t = null;
  try {
    t = new URL(r);
  } catch {
    return {
      url: r
    };
  }
  return t.host === H.maptilerApiHost && (t.searchParams.has("key") || t.searchParams.append("key", B.apiKey), B.session && t.searchParams.append("mtsid", dn)), {
    url: to(t, e)
  };
}
function zr(r) {
  return (e, t) => {
    if (r != null) {
      const n = r(e, t), a = _r((n == null ? void 0 : n.url) ?? "", t);
      return {
        ...n,
        ...a
      };
    }
    return _r(e, t);
  };
}
function hn() {
  return Math.random().toString(36).substring(2);
}
function mt(r) {
  return /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/gi.test(r);
}
function io(r) {
  try {
    return JSON.parse(r);
  } catch {
  }
  return null;
}
function so() {
  return document.createElement("canvas").getContext("webgl2") ? null : typeof WebGL2RenderingContext < "u" ? "Graphic rendering with WebGL2 has been disabled or is not supported by your graphic card. The map cannot be displayed." : "Your browser does not support graphic rendering with WebGL2. The map cannot be displayed.";
}
function lo(r) {
  const e = so();
  if (!e) return;
  let t = null;
  if (typeof r == "string" ? t = document.getElementById(r) : r instanceof HTMLElement && (t = r), !t)
    throw new Error("The Map container must be provided.");
  const n = document.createElement("div");
  throw n.innerHTML = e, n.classList.add("webgl-warning-div"), t.appendChild(n), new Error(e);
}
function uo(r) {
  const e = "The WebGL context was lost.";
  let t = null;
  if (typeof r == "string" ? t = document.getElementById(r) : r instanceof HTMLElement && (t = r), !t)
    throw new Error("The Map container must be provided.");
  const n = document.createElement("div");
  n.innerHTML = e, n.classList.add("webgl-warning-div"), t.appendChild(n);
}
let al = class extends x.Marker {
  addTo(e) {
    return super.addTo(e);
  }
};
class il extends x.Popup {
  addTo(e) {
    return super.addTo(e);
  }
}
class sl extends x.Style {
  constructor(e, t = {}) {
    super(e, t);
  }
}
class ll extends x.CanvasSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class ul extends x.GeoJSONSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class cl extends x.ImageSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class pl extends x.RasterTileSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class fl extends x.RasterDEMTileSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class dl extends x.VectorTileSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class yl extends x.VideoSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class co extends x.NavigationControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class po extends x.GeolocateControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class ml extends x.AttributionControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class fo extends x.LogoControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class yo extends x.ScaleControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class mo extends x.FullscreenControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class hl extends x.TerrainControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class gl extends x.BoxZoomHandler {
  constructor(e, t) {
    super(e, t);
  }
}
class vl extends x.ScrollZoomHandler {
  constructor(e, t) {
    super(e, t);
  }
}
class bl extends x.CooperativeGesturesHandler {
  constructor(e, t) {
    super(e, t);
  }
}
class wl extends x.KeyboardHandler {
  constructor(e) {
    super(e);
  }
}
class xl extends x.TwoFingersTouchPitchHandler {
  constructor(e) {
    super(e);
  }
}
class Sl extends x.MapWheelEvent {
  constructor(e, t, n) {
    super(e, t, n);
  }
}
class kl extends x.MapTouchEvent {
  constructor(e, t, n) {
    super(e, t, n);
  }
}
class Cl extends x.MapMouseEvent {
  constructor(e, t, n, a = {}) {
    super(e, t, n, a);
  }
}
class $r extends fo {
  constructor(t = {}) {
    super(t);
    M(this, "logoURL", "");
    M(this, "linkURL", "");
    this.logoURL = t.logoURL ?? H.maptilerLogoURL, this.linkURL = t.linkURL ?? H.maptilerURL;
  }
  onAdd(t) {
    this._map = t, this._compact = this.options.compact ?? !1, this._container = window.document.createElement("div"), this._container.className = "maplibregl-ctrl";
    const n = window.document.createElement("a");
    return n.style.backgroundRepeat = "no-repeat", n.style.cursor = "pointer", n.style.display = "block", n.style.height = "23px", n.style.margin = "0 0 -4px -4px", n.style.overflow = "hidden", n.style.width = "88px", n.style.backgroundImage = `url(${this.logoURL})`, n.style.backgroundSize = "100px 30px", n.style.width = "100px", n.style.height = "30px", n.target = "_blank", n.rel = "noopener", n.href = this.linkURL, n.setAttribute("aria-label", "MapTiler logo"), n.setAttribute("rel", "noopener"), this._container.appendChild(n), this._container.style.display = "block", this._map.on("resize", this._updateCompact), this._updateCompact(), this._container;
  }
}
var ho = 8, go = {
  version: {
    required: !0,
    type: "enum",
    values: [
      8
    ]
  },
  name: {
    type: "string"
  },
  metadata: {
    type: "*"
  },
  center: {
    type: "array",
    value: "number"
  },
  zoom: {
    type: "number"
  },
  bearing: {
    type: "number",
    default: 0,
    period: 360,
    units: "degrees"
  },
  pitch: {
    type: "number",
    default: 0,
    units: "degrees"
  },
  light: {
    type: "light"
  },
  sky: {
    type: "sky"
  },
  projection: {
    type: "projection"
  },
  terrain: {
    type: "terrain"
  },
  sources: {
    required: !0,
    type: "sources"
  },
  sprite: {
    type: "sprite"
  },
  glyphs: {
    type: "string"
  },
  transition: {
    type: "transition"
  },
  layers: {
    required: !0,
    type: "array",
    value: "layer"
  }
}, vo = {
  "*": {
    type: "source"
  }
}, bo = [
  "source_vector",
  "source_raster",
  "source_raster_dem",
  "source_geojson",
  "source_video",
  "source_image"
], wo = {
  type: {
    required: !0,
    type: "enum",
    values: {
      vector: {}
    }
  },
  url: {
    type: "string"
  },
  tiles: {
    type: "array",
    value: "string"
  },
  bounds: {
    type: "array",
    value: "number",
    length: 4,
    default: [
      -180,
      -85.051129,
      180,
      85.051129
    ]
  },
  scheme: {
    type: "enum",
    values: {
      xyz: {},
      tms: {}
    },
    default: "xyz"
  },
  minzoom: {
    type: "number",
    default: 0
  },
  maxzoom: {
    type: "number",
    default: 22
  },
  attribution: {
    type: "string"
  },
  promoteId: {
    type: "promoteId"
  },
  volatile: {
    type: "boolean",
    default: !1
  },
  "*": {
    type: "*"
  }
}, xo = {
  type: {
    required: !0,
    type: "enum",
    values: {
      raster: {}
    }
  },
  url: {
    type: "string"
  },
  tiles: {
    type: "array",
    value: "string"
  },
  bounds: {
    type: "array",
    value: "number",
    length: 4,
    default: [
      -180,
      -85.051129,
      180,
      85.051129
    ]
  },
  minzoom: {
    type: "number",
    default: 0
  },
  maxzoom: {
    type: "number",
    default: 22
  },
  tileSize: {
    type: "number",
    default: 512,
    units: "pixels"
  },
  scheme: {
    type: "enum",
    values: {
      xyz: {},
      tms: {}
    },
    default: "xyz"
  },
  attribution: {
    type: "string"
  },
  volatile: {
    type: "boolean",
    default: !1
  },
  "*": {
    type: "*"
  }
}, So = {
  type: {
    required: !0,
    type: "enum",
    values: {
      "raster-dem": {}
    }
  },
  url: {
    type: "string"
  },
  tiles: {
    type: "array",
    value: "string"
  },
  bounds: {
    type: "array",
    value: "number",
    length: 4,
    default: [
      -180,
      -85.051129,
      180,
      85.051129
    ]
  },
  minzoom: {
    type: "number",
    default: 0
  },
  maxzoom: {
    type: "number",
    default: 22
  },
  tileSize: {
    type: "number",
    default: 512,
    units: "pixels"
  },
  attribution: {
    type: "string"
  },
  encoding: {
    type: "enum",
    values: {
      terrarium: {},
      mapbox: {},
      custom: {}
    },
    default: "mapbox"
  },
  redFactor: {
    type: "number",
    default: 1
  },
  blueFactor: {
    type: "number",
    default: 1
  },
  greenFactor: {
    type: "number",
    default: 1
  },
  baseShift: {
    type: "number",
    default: 0
  },
  volatile: {
    type: "boolean",
    default: !1
  },
  "*": {
    type: "*"
  }
}, ko = {
  type: {
    required: !0,
    type: "enum",
    values: {
      geojson: {}
    }
  },
  data: {
    required: !0,
    type: "*"
  },
  maxzoom: {
    type: "number",
    default: 18
  },
  attribution: {
    type: "string"
  },
  buffer: {
    type: "number",
    default: 128,
    maximum: 512,
    minimum: 0
  },
  filter: {
    type: "*"
  },
  tolerance: {
    type: "number",
    default: 0.375
  },
  cluster: {
    type: "boolean",
    default: !1
  },
  clusterRadius: {
    type: "number",
    default: 50,
    minimum: 0
  },
  clusterMaxZoom: {
    type: "number"
  },
  clusterMinPoints: {
    type: "number"
  },
  clusterProperties: {
    type: "*"
  },
  lineMetrics: {
    type: "boolean",
    default: !1
  },
  generateId: {
    type: "boolean",
    default: !1
  },
  promoteId: {
    type: "promoteId"
  }
}, Co = {
  type: {
    required: !0,
    type: "enum",
    values: {
      video: {}
    }
  },
  urls: {
    required: !0,
    type: "array",
    value: "string"
  },
  coordinates: {
    required: !0,
    type: "array",
    length: 4,
    value: {
      type: "array",
      length: 2,
      value: "number"
    }
  }
}, Lo = {
  type: {
    required: !0,
    type: "enum",
    values: {
      image: {}
    }
  },
  url: {
    required: !0,
    type: "string"
  },
  coordinates: {
    required: !0,
    type: "array",
    length: 4,
    value: {
      type: "array",
      length: 2,
      value: "number"
    }
  }
}, Ao = {
  id: {
    type: "string",
    required: !0
  },
  type: {
    type: "enum",
    values: {
      fill: {},
      line: {},
      symbol: {},
      circle: {},
      heatmap: {},
      "fill-extrusion": {},
      raster: {},
      hillshade: {},
      background: {}
    },
    required: !0
  },
  metadata: {
    type: "*"
  },
  source: {
    type: "string"
  },
  "source-layer": {
    type: "string"
  },
  minzoom: {
    type: "number",
    minimum: 0,
    maximum: 24
  },
  maxzoom: {
    type: "number",
    minimum: 0,
    maximum: 24
  },
  filter: {
    type: "filter"
  },
  layout: {
    type: "layout"
  },
  paint: {
    type: "paint"
  }
}, To = [
  "layout_fill",
  "layout_line",
  "layout_circle",
  "layout_heatmap",
  "layout_fill-extrusion",
  "layout_symbol",
  "layout_raster",
  "layout_hillshade",
  "layout_background"
], Eo = {
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, Io = {
  "fill-sort-key": {
    type: "number",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, Mo = {
  "circle-sort-key": {
    type: "number",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, _o = {
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, zo = {
  "line-cap": {
    type: "enum",
    values: {
      butt: {},
      round: {},
      square: {}
    },
    default: "butt",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-join": {
    type: "enum",
    values: {
      bevel: {},
      round: {},
      miter: {}
    },
    default: "miter",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "line-miter-limit": {
    type: "number",
    default: 2,
    requires: [
      {
        "line-join": "miter"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-round-limit": {
    type: "number",
    default: 1.05,
    requires: [
      {
        "line-join": "round"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-sort-key": {
    type: "number",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, $o = {
  "symbol-placement": {
    type: "enum",
    values: {
      point: {},
      line: {},
      "line-center": {}
    },
    default: "point",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "symbol-spacing": {
    type: "number",
    default: 250,
    minimum: 1,
    units: "pixels",
    requires: [
      {
        "symbol-placement": "line"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "symbol-avoid-edges": {
    type: "boolean",
    default: !1,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "symbol-sort-key": {
    type: "number",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "symbol-z-order": {
    type: "enum",
    values: {
      auto: {},
      "viewport-y": {},
      source: {}
    },
    default: "auto",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-allow-overlap": {
    type: "boolean",
    default: !1,
    requires: [
      "icon-image",
      {
        "!": "icon-overlap"
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-overlap": {
    type: "enum",
    values: {
      never: {},
      always: {},
      cooperative: {}
    },
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-ignore-placement": {
    type: "boolean",
    default: !1,
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-optional": {
    type: "boolean",
    default: !1,
    requires: [
      "icon-image",
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-rotation-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {},
      auto: {}
    },
    default: "auto",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-size": {
    type: "number",
    default: 1,
    minimum: 0,
    units: "factor of the original icon size",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-text-fit": {
    type: "enum",
    values: {
      none: {},
      width: {},
      height: {},
      both: {}
    },
    default: "none",
    requires: [
      "icon-image",
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-text-fit-padding": {
    type: "array",
    value: "number",
    length: 4,
    default: [
      0,
      0,
      0,
      0
    ],
    units: "pixels",
    requires: [
      "icon-image",
      "text-field",
      {
        "icon-text-fit": [
          "both",
          "width",
          "height"
        ]
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-image": {
    type: "resolvedImage",
    tokens: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-rotate": {
    type: "number",
    default: 0,
    period: 360,
    units: "degrees",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-padding": {
    type: "padding",
    default: [
      2
    ],
    units: "pixels",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-keep-upright": {
    type: "boolean",
    default: !1,
    requires: [
      "icon-image",
      {
        "icon-rotation-alignment": "map"
      },
      {
        "symbol-placement": [
          "line",
          "line-center"
        ]
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-offset": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-anchor": {
    type: "enum",
    values: {
      center: {},
      left: {},
      right: {},
      top: {},
      bottom: {},
      "top-left": {},
      "top-right": {},
      "bottom-left": {},
      "bottom-right": {}
    },
    default: "center",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-pitch-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {},
      auto: {}
    },
    default: "auto",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-pitch-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {},
      auto: {}
    },
    default: "auto",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-rotation-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {},
      "viewport-glyph": {},
      auto: {}
    },
    default: "auto",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-field": {
    type: "formatted",
    default: "",
    tokens: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-font": {
    type: "array",
    value: "string",
    default: [
      "Open Sans Regular",
      "Arial Unicode MS Regular"
    ],
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-size": {
    type: "number",
    default: 16,
    minimum: 0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-max-width": {
    type: "number",
    default: 10,
    minimum: 0,
    units: "ems",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-line-height": {
    type: "number",
    default: 1.2,
    units: "ems",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-letter-spacing": {
    type: "number",
    default: 0,
    units: "ems",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-justify": {
    type: "enum",
    values: {
      auto: {},
      left: {},
      center: {},
      right: {}
    },
    default: "center",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-radial-offset": {
    type: "number",
    units: "ems",
    default: 0,
    requires: [
      "text-field"
    ],
    "property-type": "data-driven",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    }
  },
  "text-variable-anchor": {
    type: "array",
    value: "enum",
    values: {
      center: {},
      left: {},
      right: {},
      top: {},
      bottom: {},
      "top-left": {},
      "top-right": {},
      "bottom-left": {},
      "bottom-right": {}
    },
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "point"
        ]
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-variable-anchor-offset": {
    type: "variableAnchorOffsetCollection",
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "point"
        ]
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-anchor": {
    type: "enum",
    values: {
      center: {},
      left: {},
      right: {},
      top: {},
      bottom: {},
      "top-left": {},
      "top-right": {},
      "bottom-left": {},
      "bottom-right": {}
    },
    default: "center",
    requires: [
      "text-field",
      {
        "!": "text-variable-anchor"
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-max-angle": {
    type: "number",
    default: 45,
    units: "degrees",
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "line",
          "line-center"
        ]
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-writing-mode": {
    type: "array",
    value: "enum",
    values: {
      horizontal: {},
      vertical: {}
    },
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "point"
        ]
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-rotate": {
    type: "number",
    default: 0,
    period: 360,
    units: "degrees",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-padding": {
    type: "number",
    default: 2,
    minimum: 0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-keep-upright": {
    type: "boolean",
    default: !0,
    requires: [
      "text-field",
      {
        "text-rotation-alignment": "map"
      },
      {
        "symbol-placement": [
          "line",
          "line-center"
        ]
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-transform": {
    type: "enum",
    values: {
      none: {},
      uppercase: {},
      lowercase: {}
    },
    default: "none",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-offset": {
    type: "array",
    value: "number",
    units: "ems",
    length: 2,
    default: [
      0,
      0
    ],
    requires: [
      "text-field",
      {
        "!": "text-radial-offset"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-allow-overlap": {
    type: "boolean",
    default: !1,
    requires: [
      "text-field",
      {
        "!": "text-overlap"
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-overlap": {
    type: "enum",
    values: {
      never: {},
      always: {},
      cooperative: {}
    },
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-ignore-placement": {
    type: "boolean",
    default: !1,
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-optional": {
    type: "boolean",
    default: !1,
    requires: [
      "text-field",
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, Po = {
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, Ro = {
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, Fo = {
  type: "array",
  value: "*"
}, No = {
  type: "enum",
  values: {
    "==": {},
    "!=": {},
    ">": {},
    ">=": {},
    "<": {},
    "<=": {},
    in: {},
    "!in": {},
    all: {},
    any: {},
    none: {},
    has: {},
    "!has": {}
  }
}, Oo = {
  type: "enum",
  values: {
    Point: {},
    LineString: {},
    Polygon: {}
  }
}, Do = {
  type: "array",
  minimum: 0,
  maximum: 24,
  value: [
    "number",
    "color"
  ],
  length: 2
}, jo = {
  type: "array",
  value: "*",
  minimum: 1
}, qo = {
  anchor: {
    type: "enum",
    default: "viewport",
    values: {
      map: {},
      viewport: {}
    },
    "property-type": "data-constant",
    transition: !1,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    }
  },
  position: {
    type: "array",
    default: [
      1.15,
      210,
      30
    ],
    length: 3,
    value: "number",
    "property-type": "data-constant",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    }
  },
  color: {
    type: "color",
    "property-type": "data-constant",
    default: "#ffffff",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  intensity: {
    type: "number",
    "property-type": "data-constant",
    default: 0.5,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  }
}, Uo = {
  "sky-color": {
    type: "color",
    "property-type": "data-constant",
    default: "#88C6FC",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "horizon-color": {
    type: "color",
    "property-type": "data-constant",
    default: "#ffffff",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "fog-color": {
    type: "color",
    "property-type": "data-constant",
    default: "#ffffff",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "fog-ground-blend": {
    type: "number",
    "property-type": "data-constant",
    default: 0.5,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "horizon-fog-blend": {
    type: "number",
    "property-type": "data-constant",
    default: 0.8,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "sky-horizon-blend": {
    type: "number",
    "property-type": "data-constant",
    default: 0.8,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "atmosphere-blend": {
    type: "number",
    "property-type": "data-constant",
    default: 0.8,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  }
}, Bo = {
  source: {
    type: "string",
    required: !0
  },
  exaggeration: {
    type: "number",
    minimum: 0,
    default: 1
  }
}, Vo = {
  type: {
    type: "enum",
    default: "mercator",
    values: {
      mercator: {},
      globe: {}
    }
  }
}, Go = [
  "paint_fill",
  "paint_line",
  "paint_circle",
  "paint_heatmap",
  "paint_fill-extrusion",
  "paint_symbol",
  "paint_raster",
  "paint_hillshade",
  "paint_background"
], Ho = {
  "fill-antialias": {
    type: "boolean",
    default: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "fill-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "fill-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    requires: [
      {
        "!": "fill-pattern"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "fill-outline-color": {
    type: "color",
    transition: !0,
    requires: [
      {
        "!": "fill-pattern"
      },
      {
        "fill-antialias": !0
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "fill-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "fill-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "fill-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "fill-pattern": {
    type: "resolvedImage",
    transition: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "cross-faded-data-driven"
  }
}, Ko = {
  "line-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    requires: [
      {
        "!": "line-pattern"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "line-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-width": {
    type: "number",
    default: 1,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-gap-width": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-offset": {
    type: "number",
    default: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-blur": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-dasharray": {
    type: "array",
    value: "number",
    minimum: 0,
    transition: !0,
    units: "line widths",
    requires: [
      {
        "!": "line-pattern"
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "cross-faded"
  },
  "line-pattern": {
    type: "resolvedImage",
    transition: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "cross-faded-data-driven"
  },
  "line-gradient": {
    type: "color",
    transition: !1,
    requires: [
      {
        "!": "line-dasharray"
      },
      {
        "!": "line-pattern"
      },
      {
        source: "geojson",
        has: {
          lineMetrics: !0
        }
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "line-progress"
      ]
    },
    "property-type": "color-ramp"
  }
}, Zo = {
  "circle-radius": {
    type: "number",
    default: 5,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-blur": {
    type: "number",
    default: 0,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "circle-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-pitch-scale": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-pitch-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "viewport",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-stroke-width": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-stroke-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-stroke-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  }
}, Wo = {
  "heatmap-radius": {
    type: "number",
    default: 30,
    minimum: 1,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "heatmap-weight": {
    type: "number",
    default: 1,
    minimum: 0,
    transition: !1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "heatmap-intensity": {
    type: "number",
    default: 1,
    minimum: 0,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "heatmap-color": {
    type: "color",
    default: [
      "interpolate",
      [
        "linear"
      ],
      [
        "heatmap-density"
      ],
      0,
      "rgba(0, 0, 255, 0)",
      0.1,
      "royalblue",
      0.3,
      "cyan",
      0.5,
      "lime",
      0.7,
      "yellow",
      1,
      "red"
    ],
    transition: !1,
    expression: {
      interpolated: !0,
      parameters: [
        "heatmap-density"
      ]
    },
    "property-type": "color-ramp"
  },
  "heatmap-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, Jo = {
  "icon-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-halo-color": {
    type: "color",
    default: "rgba(0, 0, 0, 0)",
    transition: !0,
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-halo-width": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-halo-blur": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "icon-image",
      "icon-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    overridable: !0,
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-halo-color": {
    type: "color",
    default: "rgba(0, 0, 0, 0)",
    transition: !0,
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-halo-width": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-halo-blur": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "text-field",
      "text-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, Yo = {
  "raster-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-hue-rotate": {
    type: "number",
    default: 0,
    period: 360,
    transition: !0,
    units: "degrees",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-brightness-min": {
    type: "number",
    default: 0,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-brightness-max": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-saturation": {
    type: "number",
    default: 0,
    minimum: -1,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-contrast": {
    type: "number",
    default: 0,
    minimum: -1,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-resampling": {
    type: "enum",
    values: {
      linear: {},
      nearest: {}
    },
    default: "linear",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-fade-duration": {
    type: "number",
    default: 300,
    minimum: 0,
    transition: !1,
    units: "milliseconds",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, Xo = {
  "hillshade-illumination-direction": {
    type: "number",
    default: 335,
    minimum: 0,
    maximum: 359,
    transition: !1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-illumination-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "viewport",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-exaggeration": {
    type: "number",
    default: 0.5,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-shadow-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-highlight-color": {
    type: "color",
    default: "#FFFFFF",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-accent-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, Qo = {
  "background-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    requires: [
      {
        "!": "background-pattern"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "background-pattern": {
    type: "resolvedImage",
    transition: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "cross-faded"
  },
  "background-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, ei = {
  duration: {
    type: "number",
    default: 300,
    minimum: 0,
    units: "milliseconds"
  },
  delay: {
    type: "number",
    default: 0,
    minimum: 0,
    units: "milliseconds"
  }
}, ti = {
  "*": {
    type: "string"
  }
}, ri = {
  $version: ho,
  $root: go,
  sources: vo,
  source: bo,
  source_vector: wo,
  source_raster: xo,
  source_raster_dem: So,
  source_geojson: ko,
  source_video: Co,
  source_image: Lo,
  layer: Ao,
  layout: To,
  layout_background: Eo,
  layout_fill: Io,
  layout_circle: Mo,
  layout_heatmap: _o,
  "layout_fill-extrusion": {
    visibility: {
      type: "enum",
      values: {
        visible: {},
        none: {}
      },
      default: "visible",
      "property-type": "constant"
    }
  },
  layout_line: zo,
  layout_symbol: $o,
  layout_raster: Po,
  layout_hillshade: Ro,
  filter: Fo,
  filter_operator: No,
  geometry_type: Oo,
  function: {
    expression: {
      type: "expression"
    },
    stops: {
      type: "array",
      value: "function_stop"
    },
    base: {
      type: "number",
      default: 1,
      minimum: 0
    },
    property: {
      type: "string",
      default: "$zoom"
    },
    type: {
      type: "enum",
      values: {
        identity: {},
        exponential: {},
        interval: {},
        categorical: {}
      },
      default: "exponential"
    },
    colorSpace: {
      type: "enum",
      values: {
        rgb: {},
        lab: {},
        hcl: {}
      },
      default: "rgb"
    },
    default: {
      type: "*",
      required: !1
    }
  },
  function_stop: Do,
  expression: jo,
  light: qo,
  sky: Uo,
  terrain: Bo,
  projection: Vo,
  paint: Go,
  paint_fill: Ho,
  "paint_fill-extrusion": {
    "fill-extrusion-opacity": {
      type: "number",
      default: 1,
      minimum: 0,
      maximum: 1,
      transition: !0,
      expression: {
        interpolated: !0,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-color": {
      type: "color",
      default: "#000000",
      transition: !0,
      requires: [
        {
          "!": "fill-extrusion-pattern"
        }
      ],
      expression: {
        interpolated: !0,
        parameters: [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-translate": {
      type: "array",
      value: "number",
      length: 2,
      default: [
        0,
        0
      ],
      transition: !0,
      units: "pixels",
      expression: {
        interpolated: !0,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-translate-anchor": {
      type: "enum",
      values: {
        map: {},
        viewport: {}
      },
      default: "map",
      requires: [
        "fill-extrusion-translate"
      ],
      expression: {
        interpolated: !1,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-pattern": {
      type: "resolvedImage",
      transition: !0,
      expression: {
        interpolated: !1,
        parameters: [
          "zoom",
          "feature"
        ]
      },
      "property-type": "cross-faded-data-driven"
    },
    "fill-extrusion-height": {
      type: "number",
      default: 0,
      minimum: 0,
      units: "meters",
      transition: !0,
      expression: {
        interpolated: !0,
        parameters: [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-base": {
      type: "number",
      default: 0,
      minimum: 0,
      units: "meters",
      transition: !0,
      requires: [
        "fill-extrusion-height"
      ],
      expression: {
        interpolated: !0,
        parameters: [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-vertical-gradient": {
      type: "boolean",
      default: !0,
      transition: !1,
      expression: {
        interpolated: !1,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    }
  },
  paint_line: Ko,
  paint_circle: Zo,
  paint_heatmap: Wo,
  paint_symbol: Jo,
  paint_raster: Yo,
  paint_hillshade: Xo,
  paint_background: Qo,
  transition: ei,
  "property-type": {
    "data-driven": {
      type: "property-type"
    },
    "cross-faded": {
      type: "property-type"
    },
    "cross-faded-data-driven": {
      type: "property-type"
    },
    "color-ramp": {
      type: "property-type"
    },
    "data-constant": {
      type: "property-type"
    },
    constant: {
      type: "property-type"
    }
  },
  promoteId: ti
};
class h {
  constructor(e, t, n, a) {
    this.message = (e ? `${e}: ` : "") + n, a && (this.identifier = a), t != null && t.__line__ && (this.line = t.__line__);
  }
}
function it(r, ...e) {
  for (const t of e)
    for (const n in t)
      r[n] = t[n];
  return r;
}
class re extends Error {
  constructor(e, t) {
    super(t), this.message = t, this.key = e;
  }
}
class tr {
  constructor(e, t = []) {
    this.parent = e, this.bindings = {};
    for (const [n, a] of t)
      this.bindings[n] = a;
  }
  concat(e) {
    return new tr(this, e);
  }
  get(e) {
    if (this.bindings[e])
      return this.bindings[e];
    if (this.parent)
      return this.parent.get(e);
    throw new Error(`${e} not found in scope.`);
  }
  has(e) {
    return this.bindings[e] ? !0 : this.parent ? this.parent.has(e) : !1;
  }
}
const ht = { kind: "null" }, g = { kind: "number" }, A = { kind: "string" }, C = { kind: "boolean" }, ne = { kind: "color" }, ze = { kind: "object" }, L = { kind: "value" }, ni = { kind: "error" }, gt = { kind: "collator" }, vt = { kind: "formatted" }, bt = { kind: "padding" }, Je = { kind: "resolvedImage" }, wt = { kind: "variableAnchorOffsetCollection" };
function Z(r, e) {
  return {
    kind: "array",
    itemType: r,
    N: e
  };
}
function F(r) {
  if (r.kind === "array") {
    const e = F(r.itemType);
    return typeof r.N == "number" ? `array<${e}, ${r.N}>` : r.itemType.kind === "value" ? "array" : `array<${e}>`;
  } else
    return r.kind;
}
const ai = [
  ht,
  g,
  A,
  C,
  ne,
  vt,
  ze,
  Z(L),
  bt,
  Je,
  wt
];
function Be(r, e) {
  if (e.kind === "error")
    return null;
  if (r.kind === "array") {
    if (e.kind === "array" && (e.N === 0 && e.itemType.kind === "value" || !Be(r.itemType, e.itemType)) && (typeof r.N != "number" || r.N === e.N))
      return null;
  } else {
    if (r.kind === e.kind)
      return null;
    if (r.kind === "value") {
      for (const t of ai)
        if (!Be(t, e))
          return null;
    }
  }
  return `Expected ${F(r)} but found ${F(e)} instead.`;
}
function rr(r, e) {
  return e.some((t) => t.kind === r.kind);
}
function xe(r, e) {
  return e.some((t) => t === "null" ? r === null : t === "array" ? Array.isArray(r) : t === "object" ? r && !Array.isArray(r) && typeof r == "object" : t === typeof r);
}
function De(r, e) {
  return r.kind === "array" && e.kind === "array" ? r.itemType.kind === e.itemType.kind && typeof r.N == "number" : r.kind === e.kind;
}
const gn = 0.96422, vn = 1, bn = 0.82521, wn = 4 / 29, $e = 6 / 29, xn = 3 * $e * $e, oi = $e * $e * $e, ii = Math.PI / 180, si = 180 / Math.PI;
function Sn(r) {
  return r = r % 360, r < 0 && (r += 360), r;
}
function kn([r, e, t, n]) {
  r = Rt(r), e = Rt(e), t = Rt(t);
  let a, o;
  const i = Ft((0.2225045 * r + 0.7168786 * e + 0.0606169 * t) / vn);
  r === e && e === t ? a = o = i : (a = Ft((0.4360747 * r + 0.3850649 * e + 0.1430804 * t) / gn), o = Ft((0.0139322 * r + 0.0971045 * e + 0.7141733 * t) / bn));
  const s = 116 * i - 16;
  return [s < 0 ? 0 : s, 500 * (a - i), 200 * (i - o), n];
}
function Rt(r) {
  return r <= 0.04045 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);
}
function Ft(r) {
  return r > oi ? Math.pow(r, 1 / 3) : r / xn + wn;
}
function Cn([r, e, t, n]) {
  let a = (r + 16) / 116, o = isNaN(e) ? a : a + e / 500, i = isNaN(t) ? a : a - t / 200;
  return a = vn * Ot(a), o = gn * Ot(o), i = bn * Ot(i), [
    Nt(3.1338561 * o - 1.6168667 * a - 0.4906146 * i),
    // D50 -> sRGB
    Nt(-0.9787684 * o + 1.9161415 * a + 0.033454 * i),
    Nt(0.0719453 * o - 0.2289914 * a + 1.4052427 * i),
    n
  ];
}
function Nt(r) {
  return r = r <= 304e-5 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055, r < 0 ? 0 : r > 1 ? 1 : r;
}
function Ot(r) {
  return r > $e ? r * r * r : xn * (r - wn);
}
function li(r) {
  const [e, t, n, a] = kn(r), o = Math.sqrt(t * t + n * n);
  return [Math.round(o * 1e4) ? Sn(Math.atan2(n, t) * si) : NaN, o, e, a];
}
function ui([r, e, t, n]) {
  return r = isNaN(r) ? 0 : r * ii, Cn([t, Math.cos(r) * e, Math.sin(r) * e, n]);
}
function ci([r, e, t, n]) {
  r = Sn(r), e /= 100, t /= 100;
  function a(o) {
    const i = (o + r / 30) % 12, s = e * Math.min(t, 1 - t);
    return t - s * Math.max(-1, Math.min(i - 3, 9 - i, 1));
  }
  return [a(0), a(8), a(4), n];
}
function pi(r) {
  if (r = r.toLowerCase().trim(), r === "transparent")
    return [0, 0, 0, 0];
  const e = fi[r];
  if (e) {
    const [a, o, i] = e;
    return [a / 255, o / 255, i / 255, 1];
  }
  if (r.startsWith("#") && /^#(?:[0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/.test(r)) {
    const o = r.length < 6 ? 1 : 2;
    let i = 1;
    return [
      et(r.slice(i, i += o)),
      et(r.slice(i, i += o)),
      et(r.slice(i, i += o)),
      et(r.slice(i, i + o) || "ff")
    ];
  }
  if (r.startsWith("rgb")) {
    const a = /^rgba?\(\s*([\de.+-]+)(%)?(?:\s+|\s*(,)\s*)([\de.+-]+)(%)?(?:\s+|\s*(,)\s*)([\de.+-]+)(%)?(?:\s*([,\/])\s*([\de.+-]+)(%)?)?\s*\)$/, o = r.match(a);
    if (o) {
      const [
        i,
        // eslint-disable-line @typescript-eslint/no-unused-vars
        s,
        // <numeric>
        l,
        // %         (optional)
        u,
        // ,         (optional)
        c,
        // <numeric>
        p,
        // %         (optional)
        m,
        // ,         (optional)
        f,
        // <numeric>
        d,
        // %         (optional)
        y,
        // ,|/       (optional)
        b,
        // <numeric> (optional)
        w
        // %         (optional)
      ] = o, v = [u || " ", m || " ", y].join("");
      if (v === "  " || v === "  /" || v === ",," || v === ",,,") {
        const E = [l, p, d].join(""), R = E === "%%%" ? 100 : E === "" ? 255 : 0;
        if (R) {
          const P = [
            Ie(+s / R, 0, 1),
            Ie(+c / R, 0, 1),
            Ie(+f / R, 0, 1),
            b ? Pr(+b, w) : 1
          ];
          if (Rr(P))
            return P;
        }
      }
      return;
    }
  }
  const t = /^hsla?\(\s*([\de.+-]+)(?:deg)?(?:\s+|\s*(,)\s*)([\de.+-]+)%(?:\s+|\s*(,)\s*)([\de.+-]+)%(?:\s*([,\/])\s*([\de.+-]+)(%)?)?\s*\)$/, n = r.match(t);
  if (n) {
    const [
      a,
      // eslint-disable-line @typescript-eslint/no-unused-vars
      o,
      // <numeric>
      i,
      // ,         (optional)
      s,
      // <numeric>
      l,
      // ,         (optional)
      u,
      // <numeric>
      c,
      // ,|/       (optional)
      p,
      // <numeric> (optional)
      m
      // %         (optional)
    ] = n, f = [i || " ", l || " ", c].join("");
    if (f === "  " || f === "  /" || f === ",," || f === ",,,") {
      const d = [
        +o,
        Ie(+s, 0, 100),
        Ie(+u, 0, 100),
        p ? Pr(+p, m) : 1
      ];
      if (Rr(d))
        return ci(d);
    }
  }
}
function et(r) {
  return parseInt(r.padEnd(2, r), 16) / 255;
}
function Pr(r, e) {
  return Ie(e ? r / 100 : r, 0, 1);
}
function Ie(r, e, t) {
  return Math.min(Math.max(e, r), t);
}
function Rr(r) {
  return !r.some(Number.isNaN);
}
const fi = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  grey: [128, 128, 128],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  rebeccapurple: [102, 51, 153],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
class N {
  /**
   * @param r Red component premultiplied by `alpha` 0..1
   * @param g Green component premultiplied by `alpha` 0..1
   * @param b Blue component premultiplied by `alpha` 0..1
   * @param [alpha=1] Alpha component 0..1
   * @param [premultiplied=true] Whether the `r`, `g` and `b` values have already
   * been multiplied by alpha. If `true` nothing happens if `false` then they will
   * be multiplied automatically.
   */
  constructor(e, t, n, a = 1, o = !0) {
    this.r = e, this.g = t, this.b = n, this.a = a, o || (this.r *= a, this.g *= a, this.b *= a, a || this.overwriteGetter("rgb", [e, t, n, a]));
  }
  /**
   * Parses CSS color strings and converts colors to sRGB color space if needed.
   * Officially supported color formats:
   * - keyword, e.g. 'aquamarine' or 'steelblue'
   * - hex (with 3, 4, 6 or 8 digits), e.g. '#f0f' or '#e9bebea9'
   * - rgb and rgba, e.g. 'rgb(0,240,120)' or 'rgba(0%,94%,47%,0.1)' or 'rgb(0 240 120 / .3)'
   * - hsl and hsla, e.g. 'hsl(0,0%,83%)' or 'hsla(0,0%,83%,.5)' or 'hsl(0 0% 83% / 20%)'
   *
   * @param input CSS color string to parse.
   * @returns A `Color` instance, or `undefined` if the input is not a valid color string.
   */
  static parse(e) {
    if (e instanceof N)
      return e;
    if (typeof e != "string")
      return;
    const t = pi(e);
    if (t)
      return new N(...t, !1);
  }
  /**
   * Used in color interpolation and by 'to-rgba' expression.
   *
   * @returns Gien color, with reversed alpha blending, in sRGB color space.
   */
  get rgb() {
    const { r: e, g: t, b: n, a } = this, o = a || 1 / 0;
    return this.overwriteGetter("rgb", [e / o, t / o, n / o, a]);
  }
  /**
   * Used in color interpolation.
   *
   * @returns Gien color, with reversed alpha blending, in HCL color space.
   */
  get hcl() {
    return this.overwriteGetter("hcl", li(this.rgb));
  }
  /**
   * Used in color interpolation.
   *
   * @returns Gien color, with reversed alpha blending, in LAB color space.
   */
  get lab() {
    return this.overwriteGetter("lab", kn(this.rgb));
  }
  /**
   * Lazy getter pattern. When getter is called for the first time lazy value
   * is calculated and then overwrites getter function in given object instance.
   *
   * @example:
   * const redColor = Color.parse('red');
   * let x = redColor.hcl; // this will invoke `get hcl()`, which will calculate
   * // the value of red in HCL space and invoke this `overwriteGetter` function
   * // which in turn will set a field with a key 'hcl' in the `redColor` object.
   * // In other words it will override `get hcl()` from its `Color` prototype
   * // with its own property: hcl = [calculated red value in hcl].
   * let y = redColor.hcl; // next call will no longer invoke getter but simply
   * // return the previously calculated value
   * x === y; // true - `x` is exactly the same object as `y`
   *
   * @param getterKey Getter key
   * @param lazyValue Lazily calculated value to be memoized by current instance
   * @private
   */
  overwriteGetter(e, t) {
    return Object.defineProperty(this, e, { value: t }), t;
  }
  /**
   * Used by 'to-string' expression.
   *
   * @returns Serialized color in format `rgba(r,g,b,a)`
   * where r,g,b are numbers within 0..255 and alpha is number within 1..0
   *
   * @example
   * var purple = new Color.parse('purple');
   * purple.toString; // = "rgba(128,0,128,1)"
   * var translucentGreen = new Color.parse('rgba(26, 207, 26, .73)');
   * translucentGreen.toString(); // = "rgba(26,207,26,0.73)"
   */
  toString() {
    const [e, t, n, a] = this.rgb;
    return `rgba(${[e, t, n].map((o) => Math.round(o * 255)).join(",")},${a})`;
  }
}
N.black = new N(0, 0, 0, 1);
N.white = new N(1, 1, 1, 1);
N.transparent = new N(0, 0, 0, 0);
N.red = new N(1, 0, 0, 1);
class nr {
  constructor(e, t, n) {
    e ? this.sensitivity = t ? "variant" : "case" : this.sensitivity = t ? "accent" : "base", this.locale = n, this.collator = new Intl.Collator(this.locale ? this.locale : [], { sensitivity: this.sensitivity, usage: "search" });
  }
  compare(e, t) {
    return this.collator.compare(e, t);
  }
  resolvedLocale() {
    return new Intl.Collator(this.locale ? this.locale : []).resolvedOptions().locale;
  }
}
class Kt {
  constructor(e, t, n, a, o) {
    this.text = e, this.image = t, this.scale = n, this.fontStack = a, this.textColor = o;
  }
}
class ue {
  constructor(e) {
    this.sections = e;
  }
  static fromString(e) {
    return new ue([new Kt(e, null, null, null, null)]);
  }
  isEmpty() {
    return this.sections.length === 0 ? !0 : !this.sections.some((e) => e.text.length !== 0 || e.image && e.image.name.length !== 0);
  }
  static factory(e) {
    return e instanceof ue ? e : ue.fromString(e);
  }
  toString() {
    return this.sections.length === 0 ? "" : this.sections.map((e) => e.text).join("");
  }
}
class ae {
  constructor(e) {
    this.values = e.slice();
  }
  /**
   * Numeric padding values
   * @param input A padding value
   * @returns A `Padding` instance, or `undefined` if the input is not a valid padding value.
   */
  static parse(e) {
    if (e instanceof ae)
      return e;
    if (typeof e == "number")
      return new ae([e, e, e, e]);
    if (Array.isArray(e) && !(e.length < 1 || e.length > 4)) {
      for (const t of e)
        if (typeof t != "number")
          return;
      switch (e.length) {
        case 1:
          e = [e[0], e[0], e[0], e[0]];
          break;
        case 2:
          e = [e[0], e[1], e[0], e[1]];
          break;
        case 3:
          e = [e[0], e[1], e[2], e[1]];
          break;
      }
      return new ae(e);
    }
  }
  toString() {
    return JSON.stringify(this.values);
  }
}
const di = /* @__PURE__ */ new Set(["center", "left", "right", "top", "bottom", "top-left", "top-right", "bottom-left", "bottom-right"]);
class ce {
  constructor(e) {
    this.values = e.slice();
  }
  static parse(e) {
    if (e instanceof ce)
      return e;
    if (!(!Array.isArray(e) || e.length < 1 || e.length % 2 !== 0)) {
      for (let t = 0; t < e.length; t += 2) {
        const n = e[t], a = e[t + 1];
        if (typeof n != "string" || !di.has(n) || !Array.isArray(a) || a.length !== 2 || typeof a[0] != "number" || typeof a[1] != "number")
          return;
      }
      return new ce(e);
    }
  }
  toString() {
    return JSON.stringify(this.values);
  }
}
class he {
  constructor(e) {
    this.name = e.name, this.available = e.available;
  }
  toString() {
    return this.name;
  }
  static fromString(e) {
    return e ? new he({ name: e, available: !1 }) : null;
  }
}
function Ln(r, e, t, n) {
  return typeof r == "number" && r >= 0 && r <= 255 && typeof e == "number" && e >= 0 && e <= 255 && typeof t == "number" && t >= 0 && t <= 255 ? typeof n > "u" || typeof n == "number" && n >= 0 && n <= 1 ? null : `Invalid rgba value [${[r, e, t, n].join(", ")}]: 'a' must be between 0 and 1.` : `Invalid rgba value [${(typeof n == "number" ? [r, e, t, n] : [r, e, t]).join(", ")}]: 'r', 'g', and 'b' must be between 0 and 255.`;
}
function Ve(r) {
  if (r === null || typeof r == "string" || typeof r == "boolean" || typeof r == "number" || r instanceof N || r instanceof nr || r instanceof ue || r instanceof ae || r instanceof ce || r instanceof he)
    return !0;
  if (Array.isArray(r)) {
    for (const e of r)
      if (!Ve(e))
        return !1;
    return !0;
  } else if (typeof r == "object") {
    for (const e in r)
      if (!Ve(r[e]))
        return !1;
    return !0;
  } else
    return !1;
}
function j(r) {
  if (r === null)
    return ht;
  if (typeof r == "string")
    return A;
  if (typeof r == "boolean")
    return C;
  if (typeof r == "number")
    return g;
  if (r instanceof N)
    return ne;
  if (r instanceof nr)
    return gt;
  if (r instanceof ue)
    return vt;
  if (r instanceof ae)
    return bt;
  if (r instanceof ce)
    return wt;
  if (r instanceof he)
    return Je;
  if (Array.isArray(r)) {
    const e = r.length;
    let t;
    for (const n of r) {
      const a = j(n);
      if (!t)
        t = a;
      else {
        if (t === a)
          continue;
        t = L;
        break;
      }
    }
    return Z(t || L, e);
  } else
    return ze;
}
function qe(r) {
  const e = typeof r;
  return r === null ? "" : e === "string" || e === "number" || e === "boolean" ? String(r) : r instanceof N || r instanceof ue || r instanceof ae || r instanceof ce || r instanceof he ? r.toString() : JSON.stringify(r);
}
class Pe {
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error(`'literal' expression requires exactly one argument, but found ${e.length - 1} instead.`);
    if (!Ve(e[1]))
      return t.error("invalid value");
    const n = e[1];
    let a = j(n);
    const o = t.expectedType;
    return a.kind === "array" && a.N === 0 && o && o.kind === "array" && (typeof o.N != "number" || o.N === 0) && (a = o), new Pe(a, n);
  }
  evaluate() {
    return this.value;
  }
  eachChild() {
  }
  outputDefined() {
    return !0;
  }
}
class D {
  constructor(e) {
    this.name = "ExpressionEvaluationError", this.message = e;
  }
  toJSON() {
    return this.message;
  }
}
const tt = {
  string: A,
  number: g,
  boolean: C,
  object: ze
};
class Q {
  constructor(e, t) {
    this.type = e, this.args = t;
  }
  static parse(e, t) {
    if (e.length < 2)
      return t.error("Expected at least one argument.");
    let n = 1, a;
    const o = e[0];
    if (o === "array") {
      let s;
      if (e.length > 2) {
        const u = e[1];
        if (typeof u != "string" || !(u in tt) || u === "object")
          return t.error('The item type argument of "array" must be one of string, number, boolean', 1);
        s = tt[u], n++;
      } else
        s = L;
      let l;
      if (e.length > 3) {
        if (e[2] !== null && (typeof e[2] != "number" || e[2] < 0 || e[2] !== Math.floor(e[2])))
          return t.error('The length argument to "array" must be a positive integer literal', 2);
        l = e[2], n++;
      }
      a = Z(s, l);
    } else {
      if (!tt[o])
        throw new Error(`Types doesn't contain name = ${o}`);
      a = tt[o];
    }
    const i = [];
    for (; n < e.length; n++) {
      const s = t.parse(e[n], n, L);
      if (!s)
        return null;
      i.push(s);
    }
    return new Q(a, i);
  }
  evaluate(e) {
    for (let t = 0; t < this.args.length; t++) {
      const n = this.args[t].evaluate(e);
      if (Be(this.type, j(n))) {
        if (t === this.args.length - 1)
          throw new D(`Expected value to be of type ${F(this.type)}, but found ${F(j(n))} instead.`);
      } else return n;
    }
    throw new Error();
  }
  eachChild(e) {
    this.args.forEach(e);
  }
  outputDefined() {
    return this.args.every((e) => e.outputDefined());
  }
}
const Fr = {
  "to-boolean": C,
  "to-color": ne,
  "to-number": g,
  "to-string": A
};
class me {
  constructor(e, t) {
    this.type = e, this.args = t;
  }
  static parse(e, t) {
    if (e.length < 2)
      return t.error("Expected at least one argument.");
    const n = e[0];
    if (!Fr[n])
      throw new Error(`Can't parse ${n} as it is not part of the known types`);
    if ((n === "to-boolean" || n === "to-string") && e.length !== 2)
      return t.error("Expected one argument.");
    const a = Fr[n], o = [];
    for (let i = 1; i < e.length; i++) {
      const s = t.parse(e[i], i, L);
      if (!s)
        return null;
      o.push(s);
    }
    return new me(a, o);
  }
  evaluate(e) {
    switch (this.type.kind) {
      case "boolean":
        return !!this.args[0].evaluate(e);
      case "color": {
        let t, n;
        for (const a of this.args) {
          if (t = a.evaluate(e), n = null, t instanceof N)
            return t;
          if (typeof t == "string") {
            const o = e.parseColor(t);
            if (o)
              return o;
          } else if (Array.isArray(t) && (t.length < 3 || t.length > 4 ? n = `Invalid rbga value ${JSON.stringify(t)}: expected an array containing either three or four numeric values.` : n = Ln(t[0], t[1], t[2], t[3]), !n))
            return new N(t[0] / 255, t[1] / 255, t[2] / 255, t[3]);
        }
        throw new D(n || `Could not parse color from value '${typeof t == "string" ? t : JSON.stringify(t)}'`);
      }
      case "padding": {
        let t;
        for (const n of this.args) {
          t = n.evaluate(e);
          const a = ae.parse(t);
          if (a)
            return a;
        }
        throw new D(`Could not parse padding from value '${typeof t == "string" ? t : JSON.stringify(t)}'`);
      }
      case "variableAnchorOffsetCollection": {
        let t;
        for (const n of this.args) {
          t = n.evaluate(e);
          const a = ce.parse(t);
          if (a)
            return a;
        }
        throw new D(`Could not parse variableAnchorOffsetCollection from value '${typeof t == "string" ? t : JSON.stringify(t)}'`);
      }
      case "number": {
        let t = null;
        for (const n of this.args) {
          if (t = n.evaluate(e), t === null)
            return 0;
          const a = Number(t);
          if (!isNaN(a))
            return a;
        }
        throw new D(`Could not convert ${JSON.stringify(t)} to number.`);
      }
      case "formatted":
        return ue.fromString(qe(this.args[0].evaluate(e)));
      case "resolvedImage":
        return he.fromString(qe(this.args[0].evaluate(e)));
      default:
        return qe(this.args[0].evaluate(e));
    }
  }
  eachChild(e) {
    this.args.forEach(e);
  }
  outputDefined() {
    return this.args.every((e) => e.outputDefined());
  }
}
const yi = ["Unknown", "Point", "LineString", "Polygon"];
class An {
  constructor() {
    this.globals = null, this.feature = null, this.featureState = null, this.formattedSection = null, this._parseColorCache = {}, this.availableImages = null, this.canonical = null;
  }
  id() {
    return this.feature && "id" in this.feature ? this.feature.id : null;
  }
  geometryType() {
    return this.feature ? typeof this.feature.type == "number" ? yi[this.feature.type] : this.feature.type : null;
  }
  geometry() {
    return this.feature && "geometry" in this.feature ? this.feature.geometry : null;
  }
  canonicalID() {
    return this.canonical;
  }
  properties() {
    return this.feature && this.feature.properties || {};
  }
  parseColor(e) {
    let t = this._parseColorCache[e];
    return t || (t = this._parseColorCache[e] = N.parse(e)), t;
  }
}
class xt {
  constructor(e, t, n = [], a, o = new tr(), i = []) {
    this.registry = e, this.path = n, this.key = n.map((s) => `[${s}]`).join(""), this.scope = o, this.errors = i, this.expectedType = a, this._isConstant = t;
  }
  /**
   * @param expr the JSON expression to parse
   * @param index the optional argument index if this expression is an argument of a parent expression that's being parsed
   * @param options
   * @param options.omitTypeAnnotations set true to omit inferred type annotations.  Caller beware: with this option set, the parsed expression's type will NOT satisfy `expectedType` if it would normally be wrapped in an inferred annotation.
   * @private
   */
  parse(e, t, n, a, o = {}) {
    return t ? this.concat(t, n, a)._parse(e, o) : this._parse(e, o);
  }
  _parse(e, t) {
    (e === null || typeof e == "string" || typeof e == "boolean" || typeof e == "number") && (e = ["literal", e]);
    function n(a, o, i) {
      return i === "assert" ? new Q(o, [a]) : i === "coerce" ? new me(o, [a]) : a;
    }
    if (Array.isArray(e)) {
      if (e.length === 0)
        return this.error('Expected an array with at least one element. If you wanted a literal array, use ["literal", []].');
      const a = e[0];
      if (typeof a != "string")
        return this.error(`Expression name must be a string, but found ${typeof a} instead. If you wanted a literal array, use ["literal", [...]].`, 0), null;
      const o = this.registry[a];
      if (o) {
        let i = o.parse(e, this);
        if (!i)
          return null;
        if (this.expectedType) {
          const s = this.expectedType, l = i.type;
          if ((s.kind === "string" || s.kind === "number" || s.kind === "boolean" || s.kind === "object" || s.kind === "array") && l.kind === "value")
            i = n(i, s, t.typeAnnotation || "assert");
          else if ((s.kind === "color" || s.kind === "formatted" || s.kind === "resolvedImage") && (l.kind === "value" || l.kind === "string"))
            i = n(i, s, t.typeAnnotation || "coerce");
          else if (s.kind === "padding" && (l.kind === "value" || l.kind === "number" || l.kind === "array"))
            i = n(i, s, t.typeAnnotation || "coerce");
          else if (s.kind === "variableAnchorOffsetCollection" && (l.kind === "value" || l.kind === "array"))
            i = n(i, s, t.typeAnnotation || "coerce");
          else if (this.checkSubtype(s, l))
            return null;
        }
        if (!(i instanceof Pe) && i.type.kind !== "resolvedImage" && this._isConstant(i)) {
          const s = new An();
          try {
            i = new Pe(i.type, i.evaluate(s));
          } catch (l) {
            return this.error(l.message), null;
          }
        }
        return i;
      }
      return this.error(`Unknown expression "${a}". If you wanted a literal array, use ["literal", [...]].`, 0);
    } else return typeof e > "u" ? this.error("'undefined' value invalid. Use null instead.") : typeof e == "object" ? this.error('Bare objects invalid. Use ["literal", {...}] instead.') : this.error(`Expected an array, but found ${typeof e} instead.`);
  }
  /**
   * Returns a copy of this context suitable for parsing the subexpression at
   * index `index`, optionally appending to 'let' binding map.
   *
   * Note that `errors` property, intended for collecting errors while
   * parsing, is copied by reference rather than cloned.
   * @private
   */
  concat(e, t, n) {
    const a = typeof e == "number" ? this.path.concat(e) : this.path, o = n ? this.scope.concat(n) : this.scope;
    return new xt(this.registry, this._isConstant, a, t || null, o, this.errors);
  }
  /**
   * Push a parsing (or type checking) error into the `this.errors`
   * @param error The message
   * @param keys Optionally specify the source of the error at a child
   * of the current expression at `this.key`.
   * @private
   */
  error(e, ...t) {
    const n = `${this.key}${t.map((a) => `[${a}]`).join("")}`;
    this.errors.push(new re(n, e));
  }
  /**
   * Returns null if `t` is a subtype of `expected`; otherwise returns an
   * error message and also pushes it to `this.errors`.
   * @param expected The expected type
   * @param t The actual type
   * @returns null if `t` is a subtype of `expected`; otherwise returns an error message
   */
  checkSubtype(e, t) {
    const n = Be(e, t);
    return n && this.error(n), n;
  }
}
class St {
  constructor(e, t) {
    this.type = t.type, this.bindings = [].concat(e), this.result = t;
  }
  evaluate(e) {
    return this.result.evaluate(e);
  }
  eachChild(e) {
    for (const t of this.bindings)
      e(t[1]);
    e(this.result);
  }
  static parse(e, t) {
    if (e.length < 4)
      return t.error(`Expected at least 3 arguments, but found ${e.length - 1} instead.`);
    const n = [];
    for (let o = 1; o < e.length - 1; o += 2) {
      const i = e[o];
      if (typeof i != "string")
        return t.error(`Expected string, but found ${typeof i} instead.`, o);
      if (/[^a-zA-Z0-9_]/.test(i))
        return t.error("Variable names must contain only alphanumeric characters or '_'.", o);
      const s = t.parse(e[o + 1], o + 1);
      if (!s)
        return null;
      n.push([i, s]);
    }
    const a = t.parse(e[e.length - 1], e.length - 1, t.expectedType, n);
    return a ? new St(n, a) : null;
  }
  outputDefined() {
    return this.result.outputDefined();
  }
}
class kt {
  constructor(e, t) {
    this.type = t.type, this.name = e, this.boundExpression = t;
  }
  static parse(e, t) {
    if (e.length !== 2 || typeof e[1] != "string")
      return t.error("'var' expression requires exactly one string literal argument.");
    const n = e[1];
    return t.scope.has(n) ? new kt(n, t.scope.get(n)) : t.error(`Unknown variable "${n}". Make sure "${n}" has been bound in an enclosing "let" expression before using it.`, 1);
  }
  evaluate(e) {
    return this.boundExpression.evaluate(e);
  }
  eachChild() {
  }
  outputDefined() {
    return !1;
  }
}
class ar {
  constructor(e, t, n) {
    this.type = e, this.index = t, this.input = n;
  }
  static parse(e, t) {
    if (e.length !== 3)
      return t.error(`Expected 2 arguments, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1, g), a = t.parse(e[2], 2, Z(t.expectedType || L));
    if (!n || !a)
      return null;
    const o = a.type;
    return new ar(o.itemType, n, a);
  }
  evaluate(e) {
    const t = this.index.evaluate(e), n = this.input.evaluate(e);
    if (t < 0)
      throw new D(`Array index out of bounds: ${t} < 0.`);
    if (t >= n.length)
      throw new D(`Array index out of bounds: ${t} > ${n.length - 1}.`);
    if (t !== Math.floor(t))
      throw new D(`Array index must be an integer, but found ${t} instead.`);
    return n[t];
  }
  eachChild(e) {
    e(this.index), e(this.input);
  }
  outputDefined() {
    return !1;
  }
}
class or {
  constructor(e, t) {
    this.type = C, this.needle = e, this.haystack = t;
  }
  static parse(e, t) {
    if (e.length !== 3)
      return t.error(`Expected 2 arguments, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1, L), a = t.parse(e[2], 2, L);
    return !n || !a ? null : rr(n.type, [C, A, g, ht, L]) ? new or(n, a) : t.error(`Expected first argument to be of type boolean, string, number or null, but found ${F(n.type)} instead`);
  }
  evaluate(e) {
    const t = this.needle.evaluate(e), n = this.haystack.evaluate(e);
    if (!n)
      return !1;
    if (!xe(t, ["boolean", "string", "number", "null"]))
      throw new D(`Expected first argument to be of type boolean, string, number or null, but found ${F(j(t))} instead.`);
    if (!xe(n, ["string", "array"]))
      throw new D(`Expected second argument to be of type array or string, but found ${F(j(n))} instead.`);
    return n.indexOf(t) >= 0;
  }
  eachChild(e) {
    e(this.needle), e(this.haystack);
  }
  outputDefined() {
    return !0;
  }
}
class st {
  constructor(e, t, n) {
    this.type = g, this.needle = e, this.haystack = t, this.fromIndex = n;
  }
  static parse(e, t) {
    if (e.length <= 2 || e.length >= 5)
      return t.error(`Expected 3 or 4 arguments, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1, L), a = t.parse(e[2], 2, L);
    if (!n || !a)
      return null;
    if (!rr(n.type, [C, A, g, ht, L]))
      return t.error(`Expected first argument to be of type boolean, string, number or null, but found ${F(n.type)} instead`);
    if (e.length === 4) {
      const o = t.parse(e[3], 3, g);
      return o ? new st(n, a, o) : null;
    } else
      return new st(n, a);
  }
  evaluate(e) {
    const t = this.needle.evaluate(e), n = this.haystack.evaluate(e);
    if (!xe(t, ["boolean", "string", "number", "null"]))
      throw new D(`Expected first argument to be of type boolean, string, number or null, but found ${F(j(t))} instead.`);
    let a;
    if (this.fromIndex && (a = this.fromIndex.evaluate(e)), xe(n, ["string"])) {
      const o = n.indexOf(t, a);
      return o === -1 ? -1 : [...n.slice(0, o)].length;
    } else {
      if (xe(n, ["array"]))
        return n.indexOf(t, a);
      throw new D(`Expected second argument to be of type array or string, but found ${F(j(n))} instead.`);
    }
  }
  eachChild(e) {
    e(this.needle), e(this.haystack), this.fromIndex && e(this.fromIndex);
  }
  outputDefined() {
    return !1;
  }
}
class ir {
  constructor(e, t, n, a, o, i) {
    this.inputType = e, this.type = t, this.input = n, this.cases = a, this.outputs = o, this.otherwise = i;
  }
  static parse(e, t) {
    if (e.length < 5)
      return t.error(`Expected at least 4 arguments, but found only ${e.length - 1}.`);
    if (e.length % 2 !== 1)
      return t.error("Expected an even number of arguments.");
    let n, a;
    t.expectedType && t.expectedType.kind !== "value" && (a = t.expectedType);
    const o = {}, i = [];
    for (let u = 2; u < e.length - 1; u += 2) {
      let c = e[u];
      const p = e[u + 1];
      Array.isArray(c) || (c = [c]);
      const m = t.concat(u);
      if (c.length === 0)
        return m.error("Expected at least one branch label.");
      for (const d of c) {
        if (typeof d != "number" && typeof d != "string")
          return m.error("Branch labels must be numbers or strings.");
        if (typeof d == "number" && Math.abs(d) > Number.MAX_SAFE_INTEGER)
          return m.error(`Branch labels must be integers no larger than ${Number.MAX_SAFE_INTEGER}.`);
        if (typeof d == "number" && Math.floor(d) !== d)
          return m.error("Numeric branch labels must be integer values.");
        if (!n)
          n = j(d);
        else if (m.checkSubtype(n, j(d)))
          return null;
        if (typeof o[String(d)] < "u")
          return m.error("Branch labels must be unique.");
        o[String(d)] = i.length;
      }
      const f = t.parse(p, u, a);
      if (!f)
        return null;
      a = a || f.type, i.push(f);
    }
    const s = t.parse(e[1], 1, L);
    if (!s)
      return null;
    const l = t.parse(e[e.length - 1], e.length - 1, a);
    return !l || s.type.kind !== "value" && t.concat(1).checkSubtype(n, s.type) ? null : new ir(n, a, s, o, i, l);
  }
  evaluate(e) {
    const t = this.input.evaluate(e);
    return (j(t) === this.inputType && this.outputs[this.cases[t]] || this.otherwise).evaluate(e);
  }
  eachChild(e) {
    e(this.input), this.outputs.forEach(e), e(this.otherwise);
  }
  outputDefined() {
    return this.outputs.every((e) => e.outputDefined()) && this.otherwise.outputDefined();
  }
}
class sr {
  constructor(e, t, n) {
    this.type = e, this.branches = t, this.otherwise = n;
  }
  static parse(e, t) {
    if (e.length < 4)
      return t.error(`Expected at least 3 arguments, but found only ${e.length - 1}.`);
    if (e.length % 2 !== 0)
      return t.error("Expected an odd number of arguments.");
    let n;
    t.expectedType && t.expectedType.kind !== "value" && (n = t.expectedType);
    const a = [];
    for (let i = 1; i < e.length - 1; i += 2) {
      const s = t.parse(e[i], i, C);
      if (!s)
        return null;
      const l = t.parse(e[i + 1], i + 1, n);
      if (!l)
        return null;
      a.push([s, l]), n = n || l.type;
    }
    const o = t.parse(e[e.length - 1], e.length - 1, n);
    if (!o)
      return null;
    if (!n)
      throw new Error("Can't infer output type");
    return new sr(n, a, o);
  }
  evaluate(e) {
    for (const [t, n] of this.branches)
      if (t.evaluate(e))
        return n.evaluate(e);
    return this.otherwise.evaluate(e);
  }
  eachChild(e) {
    for (const [t, n] of this.branches)
      e(t), e(n);
    e(this.otherwise);
  }
  outputDefined() {
    return this.branches.every(([e, t]) => t.outputDefined()) && this.otherwise.outputDefined();
  }
}
class lt {
  constructor(e, t, n, a) {
    this.type = e, this.input = t, this.beginIndex = n, this.endIndex = a;
  }
  static parse(e, t) {
    if (e.length <= 2 || e.length >= 5)
      return t.error(`Expected 3 or 4 arguments, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1, L), a = t.parse(e[2], 2, g);
    if (!n || !a)
      return null;
    if (!rr(n.type, [Z(L), A, L]))
      return t.error(`Expected first argument to be of type array or string, but found ${F(n.type)} instead`);
    if (e.length === 4) {
      const o = t.parse(e[3], 3, g);
      return o ? new lt(n.type, n, a, o) : null;
    } else
      return new lt(n.type, n, a);
  }
  evaluate(e) {
    const t = this.input.evaluate(e), n = this.beginIndex.evaluate(e);
    let a;
    if (this.endIndex && (a = this.endIndex.evaluate(e)), xe(t, ["string"]))
      return [...t].slice(n, a).join("");
    if (xe(t, ["array"]))
      return t.slice(n, a);
    throw new D(`Expected first argument to be of type array or string, but found ${F(j(t))} instead.`);
  }
  eachChild(e) {
    e(this.input), e(this.beginIndex), this.endIndex && e(this.endIndex);
  }
  outputDefined() {
    return !1;
  }
}
function Tn(r, e) {
  const t = r.length - 1;
  let n = 0, a = t, o = 0, i, s;
  for (; n <= a; )
    if (o = Math.floor((n + a) / 2), i = r[o], s = r[o + 1], i <= e) {
      if (o === t || e < s)
        return o;
      n = o + 1;
    } else if (i > e)
      a = o - 1;
    else
      throw new D("Input is not a number.");
  return 0;
}
class Ct {
  constructor(e, t, n) {
    this.type = e, this.input = t, this.labels = [], this.outputs = [];
    for (const [a, o] of n)
      this.labels.push(a), this.outputs.push(o);
  }
  static parse(e, t) {
    if (e.length - 1 < 4)
      return t.error(`Expected at least 4 arguments, but found only ${e.length - 1}.`);
    if ((e.length - 1) % 2 !== 0)
      return t.error("Expected an even number of arguments.");
    const n = t.parse(e[1], 1, g);
    if (!n)
      return null;
    const a = [];
    let o = null;
    t.expectedType && t.expectedType.kind !== "value" && (o = t.expectedType);
    for (let i = 1; i < e.length; i += 2) {
      const s = i === 1 ? -1 / 0 : e[i], l = e[i + 1], u = i, c = i + 1;
      if (typeof s != "number")
        return t.error('Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.', u);
      if (a.length && a[a.length - 1][0] >= s)
        return t.error('Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.', u);
      const p = t.parse(l, c, o);
      if (!p)
        return null;
      o = o || p.type, a.push([s, p]);
    }
    return new Ct(o, n, a);
  }
  evaluate(e) {
    const t = this.labels, n = this.outputs;
    if (t.length === 1)
      return n[0].evaluate(e);
    const a = this.input.evaluate(e);
    if (a <= t[0])
      return n[0].evaluate(e);
    const o = t.length;
    if (a >= t[o - 1])
      return n[o - 1].evaluate(e);
    const i = Tn(t, a);
    return n[i].evaluate(e);
  }
  eachChild(e) {
    e(this.input);
    for (const t of this.outputs)
      e(t);
  }
  outputDefined() {
    return this.outputs.every((e) => e.outputDefined());
  }
}
function mi(r) {
  return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r;
}
var hi = En;
function En(r, e, t, n) {
  this.cx = 3 * r, this.bx = 3 * (t - r) - this.cx, this.ax = 1 - this.cx - this.bx, this.cy = 3 * e, this.by = 3 * (n - e) - this.cy, this.ay = 1 - this.cy - this.by, this.p1x = r, this.p1y = e, this.p2x = t, this.p2y = n;
}
En.prototype = {
  sampleCurveX: function(r) {
    return ((this.ax * r + this.bx) * r + this.cx) * r;
  },
  sampleCurveY: function(r) {
    return ((this.ay * r + this.by) * r + this.cy) * r;
  },
  sampleCurveDerivativeX: function(r) {
    return (3 * this.ax * r + 2 * this.bx) * r + this.cx;
  },
  solveCurveX: function(r, e) {
    if (e === void 0 && (e = 1e-6), r < 0) return 0;
    if (r > 1) return 1;
    for (var t = r, n = 0; n < 8; n++) {
      var a = this.sampleCurveX(t) - r;
      if (Math.abs(a) < e) return t;
      var o = this.sampleCurveDerivativeX(t);
      if (Math.abs(o) < 1e-6) break;
      t = t - a / o;
    }
    var i = 0, s = 1;
    for (t = r, n = 0; n < 20 && (a = this.sampleCurveX(t), !(Math.abs(a - r) < e)); n++)
      r > a ? i = t : s = t, t = (s - i) * 0.5 + i;
    return t;
  },
  solve: function(r, e) {
    return this.sampleCurveY(this.solveCurveX(r, e));
  }
};
var gi = /* @__PURE__ */ mi(hi);
function Se(r, e, t) {
  return r + t * (e - r);
}
function vi(r, e, t, n = "rgb") {
  switch (n) {
    case "rgb": {
      const [a, o, i, s] = ut(r.rgb, e.rgb, t);
      return new N(a, o, i, s, !1);
    }
    case "hcl": {
      const [a, o, i, s] = r.hcl, [l, u, c, p] = e.hcl;
      let m, f;
      if (!isNaN(a) && !isNaN(l)) {
        let v = l - a;
        l > a && v > 180 ? v -= 360 : l < a && a - l > 180 && (v += 360), m = a + t * v;
      } else isNaN(a) ? isNaN(l) ? m = NaN : (m = l, (i === 1 || i === 0) && (f = u)) : (m = a, (c === 1 || c === 0) && (f = o));
      const [d, y, b, w] = ui([
        m,
        f ?? Se(o, u, t),
        Se(i, c, t),
        Se(s, p, t)
      ]);
      return new N(d, y, b, w, !1);
    }
    case "lab": {
      const [a, o, i, s] = Cn(ut(r.lab, e.lab, t));
      return new N(a, o, i, s, !1);
    }
  }
}
function ut(r, e, t) {
  return r.map((n, a) => Se(n, e[a], t));
}
function bi(r, e, t) {
  return new ae(ut(r.values, e.values, t));
}
function wi(r, e, t) {
  const n = r.values, a = e.values;
  if (n.length !== a.length)
    throw new D(`Cannot interpolate values of different length. from: ${r.toString()}, to: ${e.toString()}`);
  const o = [];
  for (let i = 0; i < n.length; i += 2) {
    if (n[i] !== a[i])
      throw new D(`Cannot interpolate values containing mismatched anchors. from[${i}]: ${n[i]}, to[${i}]: ${a[i]}`);
    o.push(n[i]);
    const [s, l] = n[i + 1], [u, c] = a[i + 1];
    o.push([Se(s, u, t), Se(l, c, t)]);
  }
  return new ce(o);
}
const Dt = {
  number: Se,
  color: vi,
  array: ut,
  padding: bi,
  variableAnchorOffsetCollection: wi
};
class oe {
  constructor(e, t, n, a, o) {
    this.type = e, this.operator = t, this.interpolation = n, this.input = a, this.labels = [], this.outputs = [];
    for (const [i, s] of o)
      this.labels.push(i), this.outputs.push(s);
  }
  static interpolationFactor(e, t, n, a) {
    let o = 0;
    if (e.name === "exponential")
      o = jt(t, e.base, n, a);
    else if (e.name === "linear")
      o = jt(t, 1, n, a);
    else if (e.name === "cubic-bezier") {
      const i = e.controlPoints;
      o = new gi(i[0], i[1], i[2], i[3]).solve(jt(t, 1, n, a));
    }
    return o;
  }
  static parse(e, t) {
    let [n, a, o, ...i] = e;
    if (!Array.isArray(a) || a.length === 0)
      return t.error("Expected an interpolation type expression.", 1);
    if (a[0] === "linear")
      a = { name: "linear" };
    else if (a[0] === "exponential") {
      const u = a[1];
      if (typeof u != "number")
        return t.error("Exponential interpolation requires a numeric base.", 1, 1);
      a = {
        name: "exponential",
        base: u
      };
    } else if (a[0] === "cubic-bezier") {
      const u = a.slice(1);
      if (u.length !== 4 || u.some((c) => typeof c != "number" || c < 0 || c > 1))
        return t.error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.", 1);
      a = {
        name: "cubic-bezier",
        controlPoints: u
      };
    } else
      return t.error(`Unknown interpolation type ${String(a[0])}`, 1, 0);
    if (e.length - 1 < 4)
      return t.error(`Expected at least 4 arguments, but found only ${e.length - 1}.`);
    if ((e.length - 1) % 2 !== 0)
      return t.error("Expected an even number of arguments.");
    if (o = t.parse(o, 2, g), !o)
      return null;
    const s = [];
    let l = null;
    n === "interpolate-hcl" || n === "interpolate-lab" ? l = ne : t.expectedType && t.expectedType.kind !== "value" && (l = t.expectedType);
    for (let u = 0; u < i.length; u += 2) {
      const c = i[u], p = i[u + 1], m = u + 3, f = u + 4;
      if (typeof c != "number")
        return t.error('Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.', m);
      if (s.length && s[s.length - 1][0] >= c)
        return t.error('Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.', m);
      const d = t.parse(p, f, l);
      if (!d)
        return null;
      l = l || d.type, s.push([c, d]);
    }
    return !De(l, g) && !De(l, ne) && !De(l, bt) && !De(l, wt) && !De(l, Z(g)) ? t.error(`Type ${F(l)} is not interpolatable.`) : new oe(l, n, a, o, s);
  }
  evaluate(e) {
    const t = this.labels, n = this.outputs;
    if (t.length === 1)
      return n[0].evaluate(e);
    const a = this.input.evaluate(e);
    if (a <= t[0])
      return n[0].evaluate(e);
    const o = t.length;
    if (a >= t[o - 1])
      return n[o - 1].evaluate(e);
    const i = Tn(t, a), s = t[i], l = t[i + 1], u = oe.interpolationFactor(this.interpolation, a, s, l), c = n[i].evaluate(e), p = n[i + 1].evaluate(e);
    switch (this.operator) {
      case "interpolate":
        return Dt[this.type.kind](c, p, u);
      case "interpolate-hcl":
        return Dt.color(c, p, u, "hcl");
      case "interpolate-lab":
        return Dt.color(c, p, u, "lab");
    }
  }
  eachChild(e) {
    e(this.input);
    for (const t of this.outputs)
      e(t);
  }
  outputDefined() {
    return this.outputs.every((e) => e.outputDefined());
  }
}
function jt(r, e, t, n) {
  const a = n - t, o = r - t;
  return a === 0 ? 0 : e === 1 ? o / a : (Math.pow(e, o) - 1) / (Math.pow(e, a) - 1);
}
class Ge {
  constructor(e, t) {
    this.type = e, this.args = t;
  }
  static parse(e, t) {
    if (e.length < 2)
      return t.error("Expectected at least one argument.");
    let n = null;
    const a = t.expectedType;
    a && a.kind !== "value" && (n = a);
    const o = [];
    for (const s of e.slice(1)) {
      const l = t.parse(s, 1 + o.length, n, void 0, { typeAnnotation: "omit" });
      if (!l)
        return null;
      n = n || l.type, o.push(l);
    }
    if (!n)
      throw new Error("No output type");
    return a && o.some((s) => Be(a, s.type)) ? new Ge(L, o) : new Ge(n, o);
  }
  evaluate(e) {
    let t = null, n = 0, a;
    for (const o of this.args)
      if (n++, t = o.evaluate(e), t && t instanceof he && !t.available && (a || (a = t.name), t = null, n === this.args.length && (t = a)), t !== null)
        break;
    return t;
  }
  eachChild(e) {
    this.args.forEach(e);
  }
  outputDefined() {
    return this.args.every((e) => e.outputDefined());
  }
}
function Nr(r, e) {
  return r === "==" || r === "!=" ? e.kind === "boolean" || e.kind === "string" || e.kind === "number" || e.kind === "null" || e.kind === "value" : e.kind === "string" || e.kind === "number" || e.kind === "value";
}
function xi(r, e, t) {
  return e === t;
}
function Si(r, e, t) {
  return e !== t;
}
function ki(r, e, t) {
  return e < t;
}
function Ci(r, e, t) {
  return e > t;
}
function Li(r, e, t) {
  return e <= t;
}
function Ai(r, e, t) {
  return e >= t;
}
function In(r, e, t, n) {
  return n.compare(e, t) === 0;
}
function Ti(r, e, t, n) {
  return !In(r, e, t, n);
}
function Ei(r, e, t, n) {
  return n.compare(e, t) < 0;
}
function Ii(r, e, t, n) {
  return n.compare(e, t) > 0;
}
function Mi(r, e, t, n) {
  return n.compare(e, t) <= 0;
}
function _i(r, e, t, n) {
  return n.compare(e, t) >= 0;
}
function Fe(r, e, t) {
  const n = r !== "==" && r !== "!=";
  return class Mn {
    constructor(o, i, s) {
      this.type = C, this.lhs = o, this.rhs = i, this.collator = s, this.hasUntypedArgument = o.type.kind === "value" || i.type.kind === "value";
    }
    static parse(o, i) {
      if (o.length !== 3 && o.length !== 4)
        return i.error("Expected two or three arguments.");
      const s = o[0];
      let l = i.parse(o[1], 1, L);
      if (!l)
        return null;
      if (!Nr(s, l.type))
        return i.concat(1).error(`"${s}" comparisons are not supported for type '${F(l.type)}'.`);
      let u = i.parse(o[2], 2, L);
      if (!u)
        return null;
      if (!Nr(s, u.type))
        return i.concat(2).error(`"${s}" comparisons are not supported for type '${F(u.type)}'.`);
      if (l.type.kind !== u.type.kind && l.type.kind !== "value" && u.type.kind !== "value")
        return i.error(`Cannot compare types '${F(l.type)}' and '${F(u.type)}'.`);
      n && (l.type.kind === "value" && u.type.kind !== "value" ? l = new Q(u.type, [l]) : l.type.kind !== "value" && u.type.kind === "value" && (u = new Q(l.type, [u])));
      let c = null;
      if (o.length === 4) {
        if (l.type.kind !== "string" && u.type.kind !== "string" && l.type.kind !== "value" && u.type.kind !== "value")
          return i.error("Cannot use collator to compare non-string types.");
        if (c = i.parse(o[3], 3, gt), !c)
          return null;
      }
      return new Mn(l, u, c);
    }
    evaluate(o) {
      const i = this.lhs.evaluate(o), s = this.rhs.evaluate(o);
      if (n && this.hasUntypedArgument) {
        const l = j(i), u = j(s);
        if (l.kind !== u.kind || !(l.kind === "string" || l.kind === "number"))
          throw new D(`Expected arguments for "${r}" to be (string, string) or (number, number), but found (${l.kind}, ${u.kind}) instead.`);
      }
      if (this.collator && !n && this.hasUntypedArgument) {
        const l = j(i), u = j(s);
        if (l.kind !== "string" || u.kind !== "string")
          return e(o, i, s);
      }
      return this.collator ? t(o, i, s, this.collator.evaluate(o)) : e(o, i, s);
    }
    eachChild(o) {
      o(this.lhs), o(this.rhs), this.collator && o(this.collator);
    }
    outputDefined() {
      return !0;
    }
  };
}
const zi = Fe("==", xi, In), $i = Fe("!=", Si, Ti), Pi = Fe("<", ki, Ei), Ri = Fe(">", Ci, Ii), Fi = Fe("<=", Li, Mi), Ni = Fe(">=", Ai, _i);
class Lt {
  constructor(e, t, n) {
    this.type = gt, this.locale = n, this.caseSensitive = e, this.diacriticSensitive = t;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error("Expected one argument.");
    const n = e[1];
    if (typeof n != "object" || Array.isArray(n))
      return t.error("Collator options argument must be an object.");
    const a = t.parse(n["case-sensitive"] === void 0 ? !1 : n["case-sensitive"], 1, C);
    if (!a)
      return null;
    const o = t.parse(n["diacritic-sensitive"] === void 0 ? !1 : n["diacritic-sensitive"], 1, C);
    if (!o)
      return null;
    let i = null;
    return n.locale && (i = t.parse(n.locale, 1, A), !i) ? null : new Lt(a, o, i);
  }
  evaluate(e) {
    return new nr(this.caseSensitive.evaluate(e), this.diacriticSensitive.evaluate(e), this.locale ? this.locale.evaluate(e) : null);
  }
  eachChild(e) {
    e(this.caseSensitive), e(this.diacriticSensitive), this.locale && e(this.locale);
  }
  outputDefined() {
    return !1;
  }
}
class lr {
  constructor(e, t, n, a, o) {
    this.type = A, this.number = e, this.locale = t, this.currency = n, this.minFractionDigits = a, this.maxFractionDigits = o;
  }
  static parse(e, t) {
    if (e.length !== 3)
      return t.error("Expected two arguments.");
    const n = t.parse(e[1], 1, g);
    if (!n)
      return null;
    const a = e[2];
    if (typeof a != "object" || Array.isArray(a))
      return t.error("NumberFormat options argument must be an object.");
    let o = null;
    if (a.locale && (o = t.parse(a.locale, 1, A), !o))
      return null;
    let i = null;
    if (a.currency && (i = t.parse(a.currency, 1, A), !i))
      return null;
    let s = null;
    if (a["min-fraction-digits"] && (s = t.parse(a["min-fraction-digits"], 1, g), !s))
      return null;
    let l = null;
    return a["max-fraction-digits"] && (l = t.parse(a["max-fraction-digits"], 1, g), !l) ? null : new lr(n, o, i, s, l);
  }
  evaluate(e) {
    return new Intl.NumberFormat(this.locale ? this.locale.evaluate(e) : [], {
      style: this.currency ? "currency" : "decimal",
      currency: this.currency ? this.currency.evaluate(e) : void 0,
      minimumFractionDigits: this.minFractionDigits ? this.minFractionDigits.evaluate(e) : void 0,
      maximumFractionDigits: this.maxFractionDigits ? this.maxFractionDigits.evaluate(e) : void 0
    }).format(this.number.evaluate(e));
  }
  eachChild(e) {
    e(this.number), this.locale && e(this.locale), this.currency && e(this.currency), this.minFractionDigits && e(this.minFractionDigits), this.maxFractionDigits && e(this.maxFractionDigits);
  }
  outputDefined() {
    return !1;
  }
}
class ur {
  constructor(e) {
    this.type = vt, this.sections = e;
  }
  static parse(e, t) {
    if (e.length < 2)
      return t.error("Expected at least one argument.");
    const n = e[1];
    if (!Array.isArray(n) && typeof n == "object")
      return t.error("First argument must be an image or text section.");
    const a = [];
    let o = !1;
    for (let i = 1; i <= e.length - 1; ++i) {
      const s = e[i];
      if (o && typeof s == "object" && !Array.isArray(s)) {
        o = !1;
        let l = null;
        if (s["font-scale"] && (l = t.parse(s["font-scale"], 1, g), !l))
          return null;
        let u = null;
        if (s["text-font"] && (u = t.parse(s["text-font"], 1, Z(A)), !u))
          return null;
        let c = null;
        if (s["text-color"] && (c = t.parse(s["text-color"], 1, ne), !c))
          return null;
        const p = a[a.length - 1];
        p.scale = l, p.font = u, p.textColor = c;
      } else {
        const l = t.parse(e[i], 1, L);
        if (!l)
          return null;
        const u = l.type.kind;
        if (u !== "string" && u !== "value" && u !== "null" && u !== "resolvedImage")
          return t.error("Formatted text type must be 'string', 'value', 'image' or 'null'.");
        o = !0, a.push({ content: l, scale: null, font: null, textColor: null });
      }
    }
    return new ur(a);
  }
  evaluate(e) {
    const t = (n) => {
      const a = n.content.evaluate(e);
      return j(a) === Je ? new Kt("", a, null, null, null) : new Kt(qe(a), null, n.scale ? n.scale.evaluate(e) : null, n.font ? n.font.evaluate(e).join(",") : null, n.textColor ? n.textColor.evaluate(e) : null);
    };
    return new ue(this.sections.map(t));
  }
  eachChild(e) {
    for (const t of this.sections)
      e(t.content), t.scale && e(t.scale), t.font && e(t.font), t.textColor && e(t.textColor);
  }
  outputDefined() {
    return !1;
  }
}
class cr {
  constructor(e) {
    this.type = Je, this.input = e;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error("Expected two arguments.");
    const n = t.parse(e[1], 1, A);
    return n ? new cr(n) : t.error("No image name provided.");
  }
  evaluate(e) {
    const t = this.input.evaluate(e), n = he.fromString(t);
    return n && e.availableImages && (n.available = e.availableImages.indexOf(t) > -1), n;
  }
  eachChild(e) {
    e(this.input);
  }
  outputDefined() {
    return !1;
  }
}
class pr {
  constructor(e) {
    this.type = g, this.input = e;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error(`Expected 1 argument, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1);
    return n ? n.type.kind !== "array" && n.type.kind !== "string" && n.type.kind !== "value" ? t.error(`Expected argument of type string or array, but found ${F(n.type)} instead.`) : new pr(n) : null;
  }
  evaluate(e) {
    const t = this.input.evaluate(e);
    if (typeof t == "string")
      return [...t].length;
    if (Array.isArray(t))
      return t.length;
    throw new D(`Expected value to be of type string or array, but found ${F(j(t))} instead.`);
  }
  eachChild(e) {
    e(this.input);
  }
  outputDefined() {
    return !1;
  }
}
const ie = 8192;
function Oi(r, e) {
  const t = Di(r[0]), n = qi(r[1]), a = Math.pow(2, e.z);
  return [Math.round(t * a * ie), Math.round(n * a * ie)];
}
function fr(r, e) {
  const t = Math.pow(2, e.z), n = (r[0] / ie + e.x) / t, a = (r[1] / ie + e.y) / t;
  return [ji(n), Ui(a)];
}
function Di(r) {
  return (180 + r) / 360;
}
function ji(r) {
  return r * 360 - 180;
}
function qi(r) {
  return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + r * Math.PI / 360))) / 360;
}
function Ui(r) {
  return 360 / Math.PI * Math.atan(Math.exp((180 - r * 360) * Math.PI / 180)) - 90;
}
function Ye(r, e) {
  r[0] = Math.min(r[0], e[0]), r[1] = Math.min(r[1], e[1]), r[2] = Math.max(r[2], e[0]), r[3] = Math.max(r[3], e[1]);
}
function He(r, e) {
  return !(r[0] <= e[0] || r[2] >= e[2] || r[1] <= e[1] || r[3] >= e[3]);
}
function Bi(r, e, t) {
  return e[1] > r[1] != t[1] > r[1] && r[0] < (t[0] - e[0]) * (r[1] - e[1]) / (t[1] - e[1]) + e[0];
}
function Vi(r, e, t) {
  const n = r[0] - e[0], a = r[1] - e[1], o = r[0] - t[0], i = r[1] - t[1];
  return n * i - o * a === 0 && n * o <= 0 && a * i <= 0;
}
function At(r, e, t, n) {
  const a = [e[0] - r[0], e[1] - r[1]], o = [n[0] - t[0], n[1] - t[1]];
  return Zi(o, a) === 0 ? !1 : !!(Or(r, e, t, n) && Or(t, n, r, e));
}
function Gi(r, e, t) {
  for (const n of t)
    for (let a = 0; a < n.length - 1; ++a)
      if (At(r, e, n[a], n[a + 1]))
        return !0;
  return !1;
}
function Ne(r, e, t = !1) {
  let n = !1;
  for (const a of e)
    for (let o = 0; o < a.length - 1; o++) {
      if (Vi(r, a[o], a[o + 1]))
        return t;
      Bi(r, a[o], a[o + 1]) && (n = !n);
    }
  return n;
}
function Hi(r, e) {
  for (const t of e)
    if (Ne(r, t))
      return !0;
  return !1;
}
function _n(r, e) {
  for (const t of r)
    if (!Ne(t, e))
      return !1;
  for (let t = 0; t < r.length - 1; ++t)
    if (Gi(r[t], r[t + 1], e))
      return !1;
  return !0;
}
function Ki(r, e) {
  for (const t of e)
    if (_n(r, t))
      return !0;
  return !1;
}
function Zi(r, e) {
  return r[0] * e[1] - r[1] * e[0];
}
function Or(r, e, t, n) {
  const a = r[0] - t[0], o = r[1] - t[1], i = e[0] - t[0], s = e[1] - t[1], l = n[0] - t[0], u = n[1] - t[1], c = a * u - l * o, p = i * u - l * s;
  return c > 0 && p < 0 || c < 0 && p > 0;
}
function dr(r, e, t) {
  const n = [];
  for (let a = 0; a < r.length; a++) {
    const o = [];
    for (let i = 0; i < r[a].length; i++) {
      const s = Oi(r[a][i], t);
      Ye(e, s), o.push(s);
    }
    n.push(o);
  }
  return n;
}
function zn(r, e, t) {
  const n = [];
  for (let a = 0; a < r.length; a++) {
    const o = dr(r[a], e, t);
    n.push(o);
  }
  return n;
}
function $n(r, e, t, n) {
  if (r[0] < t[0] || r[0] > t[2]) {
    const a = n * 0.5;
    let o = r[0] - t[0] > a ? -n : t[0] - r[0] > a ? n : 0;
    o === 0 && (o = r[0] - t[2] > a ? -n : t[2] - r[0] > a ? n : 0), r[0] += o;
  }
  Ye(e, r);
}
function Wi(r) {
  r[0] = r[1] = 1 / 0, r[2] = r[3] = -1 / 0;
}
function Dr(r, e, t, n) {
  const a = Math.pow(2, n.z) * ie, o = [n.x * ie, n.y * ie], i = [];
  for (const s of r)
    for (const l of s) {
      const u = [l.x + o[0], l.y + o[1]];
      $n(u, e, t, a), i.push(u);
    }
  return i;
}
function jr(r, e, t, n) {
  const a = Math.pow(2, n.z) * ie, o = [n.x * ie, n.y * ie], i = [];
  for (const s of r) {
    const l = [];
    for (const u of s) {
      const c = [u.x + o[0], u.y + o[1]];
      Ye(e, c), l.push(c);
    }
    i.push(l);
  }
  if (e[2] - e[0] <= a / 2) {
    Wi(e);
    for (const s of i)
      for (const l of s)
        $n(l, e, t, a);
  }
  return i;
}
function Ji(r, e) {
  const t = [1 / 0, 1 / 0, -1 / 0, -1 / 0], n = [1 / 0, 1 / 0, -1 / 0, -1 / 0], a = r.canonicalID();
  if (e.type === "Polygon") {
    const o = dr(e.coordinates, n, a), i = Dr(r.geometry(), t, n, a);
    if (!He(t, n))
      return !1;
    for (const s of i)
      if (!Ne(s, o))
        return !1;
  }
  if (e.type === "MultiPolygon") {
    const o = zn(e.coordinates, n, a), i = Dr(r.geometry(), t, n, a);
    if (!He(t, n))
      return !1;
    for (const s of i)
      if (!Hi(s, o))
        return !1;
  }
  return !0;
}
function Yi(r, e) {
  const t = [1 / 0, 1 / 0, -1 / 0, -1 / 0], n = [1 / 0, 1 / 0, -1 / 0, -1 / 0], a = r.canonicalID();
  if (e.type === "Polygon") {
    const o = dr(e.coordinates, n, a), i = jr(r.geometry(), t, n, a);
    if (!He(t, n))
      return !1;
    for (const s of i)
      if (!_n(s, o))
        return !1;
  }
  if (e.type === "MultiPolygon") {
    const o = zn(e.coordinates, n, a), i = jr(r.geometry(), t, n, a);
    if (!He(t, n))
      return !1;
    for (const s of i)
      if (!Ki(s, o))
        return !1;
  }
  return !0;
}
class ke {
  constructor(e, t) {
    this.type = C, this.geojson = e, this.geometries = t;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error(`'within' expression requires exactly one argument, but found ${e.length - 1} instead.`);
    if (Ve(e[1])) {
      const n = e[1];
      if (n.type === "FeatureCollection") {
        const a = [];
        for (const o of n.features) {
          const { type: i, coordinates: s } = o.geometry;
          i === "Polygon" && a.push(s), i === "MultiPolygon" && a.push(...s);
        }
        if (a.length) {
          const o = {
            type: "MultiPolygon",
            coordinates: a
          };
          return new ke(n, o);
        }
      } else if (n.type === "Feature") {
        const a = n.geometry.type;
        if (a === "Polygon" || a === "MultiPolygon")
          return new ke(n, n.geometry);
      } else if (n.type === "Polygon" || n.type === "MultiPolygon")
        return new ke(n, n);
    }
    return t.error("'within' expression requires valid geojson object that contains polygon geometry type.");
  }
  evaluate(e) {
    if (e.geometry() != null && e.canonicalID() != null) {
      if (e.geometryType() === "Point")
        return Ji(e, this.geometries);
      if (e.geometryType() === "LineString")
        return Yi(e, this.geometries);
    }
    return !1;
  }
  eachChild() {
  }
  outputDefined() {
    return !0;
  }
}
class Pn {
  constructor(e = [], t = (n, a) => n < a ? -1 : n > a ? 1 : 0) {
    if (this.data = e, this.length = this.data.length, this.compare = t, this.length > 0)
      for (let n = (this.length >> 1) - 1; n >= 0; n--) this._down(n);
  }
  push(e) {
    this.data.push(e), this._up(this.length++);
  }
  pop() {
    if (this.length === 0) return;
    const e = this.data[0], t = this.data.pop();
    return --this.length > 0 && (this.data[0] = t, this._down(0)), e;
  }
  peek() {
    return this.data[0];
  }
  _up(e) {
    const { data: t, compare: n } = this, a = t[e];
    for (; e > 0; ) {
      const o = e - 1 >> 1, i = t[o];
      if (n(a, i) >= 0) break;
      t[e] = i, e = o;
    }
    t[e] = a;
  }
  _down(e) {
    const { data: t, compare: n } = this, a = this.length >> 1, o = t[e];
    for (; e < a; ) {
      let i = (e << 1) + 1;
      const s = i + 1;
      if (s < this.length && n(t[s], t[i]) < 0 && (i = s), n(t[i], o) >= 0) break;
      t[e] = t[i], e = i;
    }
    t[e] = o;
  }
}
function Xi(r, e) {
  if (r.length <= 1)
    return [r];
  const n = [];
  let a, o;
  for (const i of r) {
    const s = Qi(i);
    s !== 0 && (i.area = Math.abs(s), o === void 0 && (o = s < 0), o === s < 0 ? (a && n.push(a), a = [i]) : a.push(i));
  }
  return a && n.push(a), n;
}
function Qi(r) {
  let e = 0;
  for (let t = 0, n = r.length, a = n - 1, o, i; t < n; a = t++)
    o = r[t], i = r[a], e += (i.x - o.x) * (o.y + i.y);
  return e;
}
const es = 6378.137, qr = 1 / 298.257223563, Ur = qr * (2 - qr), Br = Math.PI / 180;
class yr {
  constructor(e) {
    const t = Br * es * 1e3, n = Math.cos(e * Br), a = 1 / (1 - Ur * (1 - n * n)), o = Math.sqrt(a);
    this.kx = t * o * n, this.ky = t * o * a * (1 - Ur);
  }
  /**
   * Given two points of the form [longitude, latitude], returns the distance.
   *
   * @param a - point [longitude, latitude]
   * @param b - point [longitude, latitude]
   * @returns distance
   * @example
   * const distance = ruler.distance([30.5, 50.5], [30.51, 50.49]);
   * //=distance
   */
  distance(e, t) {
    const n = this.wrap(e[0] - t[0]) * this.kx, a = (e[1] - t[1]) * this.ky;
    return Math.sqrt(n * n + a * a);
  }
  /**
   * Returns an object of the form {point, index, t}, where point is closest point on the line
   * from the given point, index is the start index of the segment with the closest point,
   * and t is a parameter from 0 to 1 that indicates where the closest point is on that segment.
   *
   * @param line - an array of points that form the line
   * @param p - point [longitude, latitude]
   * @returns the nearest point, its index in the array and the proportion along the line
   * @example
   * const point = ruler.pointOnLine(line, [-67.04, 50.5]).point;
   * //=point
   */
  pointOnLine(e, t) {
    let n = 1 / 0, a, o, i, s;
    for (let l = 0; l < e.length - 1; l++) {
      let u = e[l][0], c = e[l][1], p = this.wrap(e[l + 1][0] - u) * this.kx, m = (e[l + 1][1] - c) * this.ky, f = 0;
      (p !== 0 || m !== 0) && (f = (this.wrap(t[0] - u) * this.kx * p + (t[1] - c) * this.ky * m) / (p * p + m * m), f > 1 ? (u = e[l + 1][0], c = e[l + 1][1]) : f > 0 && (u += p / this.kx * f, c += m / this.ky * f)), p = this.wrap(t[0] - u) * this.kx, m = (t[1] - c) * this.ky;
      const d = p * p + m * m;
      d < n && (n = d, a = u, o = c, i = l, s = f);
    }
    return {
      point: [a, o],
      index: i,
      t: Math.max(0, Math.min(1, s))
    };
  }
  wrap(e) {
    for (; e < -180; )
      e += 360;
    for (; e > 180; )
      e -= 360;
    return e;
  }
}
const Zt = 100, Wt = 50;
function Rn(r, e) {
  return e[0] - r[0];
}
function ct(r) {
  return r[1] - r[0] + 1;
}
function pe(r, e) {
  return r[1] >= r[0] && r[1] < e;
}
function Jt(r, e) {
  if (r[0] > r[1])
    return [null, null];
  const t = ct(r);
  if (e) {
    if (t === 2)
      return [r, null];
    const a = Math.floor(t / 2);
    return [
      [r[0], r[0] + a],
      [r[0] + a, r[1]]
    ];
  }
  if (t === 1)
    return [r, null];
  const n = Math.floor(t / 2) - 1;
  return [
    [r[0], r[0] + n],
    [r[0] + n + 1, r[1]]
  ];
}
function Yt(r, e) {
  if (!pe(e, r.length))
    return [1 / 0, 1 / 0, -1 / 0, -1 / 0];
  const t = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
  for (let n = e[0]; n <= e[1]; ++n)
    Ye(t, r[n]);
  return t;
}
function Xt(r) {
  const e = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
  for (const t of r)
    for (const n of t)
      Ye(e, n);
  return e;
}
function Vr(r) {
  return r[0] !== -1 / 0 && r[1] !== -1 / 0 && r[2] !== 1 / 0 && r[3] !== 1 / 0;
}
function mr(r, e, t) {
  if (!Vr(r) || !Vr(e))
    return NaN;
  let n = 0, a = 0;
  return r[2] < e[0] && (n = e[0] - r[2]), r[0] > e[2] && (n = r[0] - e[2]), r[1] > e[3] && (a = r[1] - e[3]), r[3] < e[1] && (a = e[1] - r[3]), t.distance([0, 0], [n, a]);
}
function we(r, e, t) {
  const n = t.pointOnLine(e, r);
  return t.distance(r, n.point);
}
function hr(r, e, t, n, a) {
  const o = Math.min(we(r, [t, n], a), we(e, [t, n], a)), i = Math.min(we(t, [r, e], a), we(n, [r, e], a));
  return Math.min(o, i);
}
function ts(r, e, t, n, a) {
  if (!(pe(e, r.length) && pe(n, t.length)))
    return 1 / 0;
  let i = 1 / 0;
  for (let s = e[0]; s < e[1]; ++s) {
    const l = r[s], u = r[s + 1];
    for (let c = n[0]; c < n[1]; ++c) {
      const p = t[c], m = t[c + 1];
      if (At(l, u, p, m))
        return 0;
      i = Math.min(i, hr(l, u, p, m, a));
    }
  }
  return i;
}
function rs(r, e, t, n, a) {
  if (!(pe(e, r.length) && pe(n, t.length)))
    return NaN;
  let i = 1 / 0;
  for (let s = e[0]; s <= e[1]; ++s)
    for (let l = n[0]; l <= n[1]; ++l)
      if (i = Math.min(i, a.distance(r[s], t[l])), i === 0)
        return i;
  return i;
}
function ns(r, e, t) {
  if (Ne(r, e, !0))
    return 0;
  let n = 1 / 0;
  for (const a of e) {
    const o = a[0], i = a[a.length - 1];
    if (o !== i && (n = Math.min(n, we(r, [i, o], t)), n === 0))
      return n;
    const s = t.pointOnLine(a, r);
    if (n = Math.min(n, t.distance(r, s.point)), n === 0)
      return n;
  }
  return n;
}
function as(r, e, t, n) {
  if (!pe(e, r.length))
    return NaN;
  for (let o = e[0]; o <= e[1]; ++o)
    if (Ne(r[o], t, !0))
      return 0;
  let a = 1 / 0;
  for (let o = e[0]; o < e[1]; ++o) {
    const i = r[o], s = r[o + 1];
    for (const l of t)
      for (let u = 0, c = l.length, p = c - 1; u < c; p = u++) {
        const m = l[p], f = l[u];
        if (At(i, s, m, f))
          return 0;
        a = Math.min(a, hr(i, s, m, f, n));
      }
  }
  return a;
}
function Gr(r, e) {
  for (const t of r)
    for (const n of t)
      if (Ne(n, e, !0))
        return !0;
  return !1;
}
function os(r, e, t, n = 1 / 0) {
  const a = Xt(r), o = Xt(e);
  if (n !== 1 / 0 && mr(a, o, t) >= n)
    return n;
  if (He(a, o)) {
    if (Gr(r, e))
      return 0;
  } else if (Gr(e, r))
    return 0;
  let i = 1 / 0;
  for (const s of r)
    for (let l = 0, u = s.length, c = u - 1; l < u; c = l++) {
      const p = s[c], m = s[l];
      for (const f of e)
        for (let d = 0, y = f.length, b = y - 1; d < y; b = d++) {
          const w = f[b], v = f[d];
          if (At(p, m, w, v))
            return 0;
          i = Math.min(i, hr(p, m, w, v, t));
        }
    }
  return i;
}
function Hr(r, e, t, n, a, o) {
  if (!o)
    return;
  const i = mr(Yt(n, o), a, t);
  i < e && r.push([i, o, [0, 0]]);
}
function rt(r, e, t, n, a, o, i) {
  if (!o || !i)
    return;
  const s = mr(Yt(n, o), Yt(a, i), t);
  s < e && r.push([s, o, i]);
}
function pt(r, e, t, n, a = 1 / 0) {
  let o = Math.min(n.distance(r[0], t[0][0]), a);
  if (o === 0)
    return o;
  const i = new Pn([[0, [0, r.length - 1], [0, 0]]], Rn), s = Xt(t);
  for (; i.length > 0; ) {
    const l = i.pop();
    if (l[0] >= o)
      continue;
    const u = l[1], c = e ? Wt : Zt;
    if (ct(u) <= c) {
      if (!pe(u, r.length))
        return NaN;
      if (e) {
        const p = as(r, u, t, n);
        if (isNaN(p) || p === 0)
          return p;
        o = Math.min(o, p);
      } else
        for (let p = u[0]; p <= u[1]; ++p) {
          const m = ns(r[p], t, n);
          if (o = Math.min(o, m), o === 0)
            return 0;
        }
    } else {
      const p = Jt(u, e);
      Hr(i, o, n, r, s, p[0]), Hr(i, o, n, r, s, p[1]);
    }
  }
  return o;
}
function ft(r, e, t, n, a, o = 1 / 0) {
  let i = Math.min(o, a.distance(r[0], t[0]));
  if (i === 0)
    return i;
  const s = new Pn([[0, [0, r.length - 1], [0, t.length - 1]]], Rn);
  for (; s.length > 0; ) {
    const l = s.pop();
    if (l[0] >= i)
      continue;
    const u = l[1], c = l[2], p = e ? Wt : Zt, m = n ? Wt : Zt;
    if (ct(u) <= p && ct(c) <= m) {
      if (!pe(u, r.length) && pe(c, t.length))
        return NaN;
      let f;
      if (e && n)
        f = ts(r, u, t, c, a), i = Math.min(i, f);
      else if (e && !n) {
        const d = r.slice(u[0], u[1] + 1);
        for (let y = c[0]; y <= c[1]; ++y)
          if (f = we(t[y], d, a), i = Math.min(i, f), i === 0)
            return i;
      } else if (!e && n) {
        const d = t.slice(c[0], c[1] + 1);
        for (let y = u[0]; y <= u[1]; ++y)
          if (f = we(r[y], d, a), i = Math.min(i, f), i === 0)
            return i;
      } else
        f = rs(r, u, t, c, a), i = Math.min(i, f);
    } else {
      const f = Jt(u, e), d = Jt(c, n);
      rt(s, i, a, r, t, f[0], d[0]), rt(s, i, a, r, t, f[0], d[1]), rt(s, i, a, r, t, f[1], d[0]), rt(s, i, a, r, t, f[1], d[1]);
    }
  }
  return i;
}
function is(r, e) {
  const t = r.geometry(), n = t.flat().map((i) => fr([i.x, i.y], r.canonical));
  if (t.length === 0)
    return NaN;
  const a = new yr(n[0][1]);
  let o = 1 / 0;
  for (const i of e) {
    switch (i.type) {
      case "Point":
        o = Math.min(o, ft(n, !1, [i.coordinates], !1, a, o));
        break;
      case "LineString":
        o = Math.min(o, ft(n, !1, i.coordinates, !0, a, o));
        break;
      case "Polygon":
        o = Math.min(o, pt(n, !1, i.coordinates, a, o));
        break;
    }
    if (o === 0)
      return o;
  }
  return o;
}
function ss(r, e) {
  const t = r.geometry(), n = t.flat().map((i) => fr([i.x, i.y], r.canonical));
  if (t.length === 0)
    return NaN;
  const a = new yr(n[0][1]);
  let o = 1 / 0;
  for (const i of e) {
    switch (i.type) {
      case "Point":
        o = Math.min(o, ft(n, !0, [i.coordinates], !1, a, o));
        break;
      case "LineString":
        o = Math.min(o, ft(n, !0, i.coordinates, !0, a, o));
        break;
      case "Polygon":
        o = Math.min(o, pt(n, !0, i.coordinates, a, o));
        break;
    }
    if (o === 0)
      return o;
  }
  return o;
}
function ls(r, e) {
  const t = r.geometry();
  if (t.length === 0 || t[0].length === 0)
    return NaN;
  const n = Xi(t).map((i) => i.map((s) => s.map((l) => fr([l.x, l.y], r.canonical)))), a = new yr(n[0][0][0][1]);
  let o = 1 / 0;
  for (const i of e)
    for (const s of n) {
      switch (i.type) {
        case "Point":
          o = Math.min(o, pt([i.coordinates], !1, s, a, o));
          break;
        case "LineString":
          o = Math.min(o, pt(i.coordinates, !0, s, a, o));
          break;
        case "Polygon":
          o = Math.min(o, os(s, i.coordinates, a, o));
          break;
      }
      if (o === 0)
        return o;
    }
  return o;
}
function qt(r) {
  return r.type === "MultiPolygon" ? r.coordinates.map((e) => ({
    type: "Polygon",
    coordinates: e
  })) : r.type === "MultiLineString" ? r.coordinates.map((e) => ({
    type: "LineString",
    coordinates: e
  })) : r.type === "MultiPoint" ? r.coordinates.map((e) => ({
    type: "Point",
    coordinates: e
  })) : [r];
}
class Ce {
  constructor(e, t) {
    this.type = g, this.geojson = e, this.geometries = t;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error(`'distance' expression requires exactly one argument, but found ${e.length - 1} instead.`);
    if (Ve(e[1])) {
      const n = e[1];
      if (n.type === "FeatureCollection")
        return new Ce(n, n.features.map((a) => qt(a.geometry)).flat());
      if (n.type === "Feature")
        return new Ce(n, qt(n.geometry));
      if ("type" in n && "coordinates" in n)
        return new Ce(n, qt(n));
    }
    return t.error("'distance' expression requires valid geojson object that contains polygon geometry type.");
  }
  evaluate(e) {
    if (e.geometry() != null && e.canonicalID() != null) {
      if (e.geometryType() === "Point")
        return is(e, this.geometries);
      if (e.geometryType() === "LineString")
        return ss(e, this.geometries);
      if (e.geometryType() === "Polygon")
        return ls(e, this.geometries);
    }
    return NaN;
  }
  eachChild() {
  }
  outputDefined() {
    return !0;
  }
}
const gr = {
  // special forms
  "==": zi,
  "!=": $i,
  ">": Ri,
  "<": Pi,
  ">=": Ni,
  "<=": Fi,
  array: Q,
  at: ar,
  boolean: Q,
  case: sr,
  coalesce: Ge,
  collator: Lt,
  format: ur,
  image: cr,
  in: or,
  "index-of": st,
  interpolate: oe,
  "interpolate-hcl": oe,
  "interpolate-lab": oe,
  length: pr,
  let: St,
  literal: Pe,
  match: ir,
  number: Q,
  "number-format": lr,
  object: Q,
  slice: lt,
  step: Ct,
  string: Q,
  "to-boolean": me,
  "to-color": me,
  "to-number": me,
  "to-string": me,
  var: kt,
  within: ke,
  distance: Ce
};
class ee {
  constructor(e, t, n, a) {
    this.name = e, this.type = t, this._evaluate = n, this.args = a;
  }
  evaluate(e) {
    return this._evaluate(e, this.args);
  }
  eachChild(e) {
    this.args.forEach(e);
  }
  outputDefined() {
    return !1;
  }
  static parse(e, t) {
    const n = e[0], a = ee.definitions[n];
    if (!a)
      return t.error(`Unknown expression "${n}". If you wanted a literal array, use ["literal", [...]].`, 0);
    const o = Array.isArray(a) ? a[0] : a.type, i = Array.isArray(a) ? [[a[1], a[2]]] : a.overloads, s = i.filter(([u]) => !Array.isArray(u) || // varags
    u.length === e.length - 1);
    let l = null;
    for (const [u, c] of s) {
      l = new xt(t.registry, dt, t.path, null, t.scope);
      const p = [];
      let m = !1;
      for (let f = 1; f < e.length; f++) {
        const d = e[f], y = Array.isArray(u) ? u[f - 1] : u.type, b = l.parse(d, 1 + p.length, y);
        if (!b) {
          m = !0;
          break;
        }
        p.push(b);
      }
      if (!m) {
        if (Array.isArray(u) && u.length !== p.length) {
          l.error(`Expected ${u.length} arguments, but found ${p.length} instead.`);
          continue;
        }
        for (let f = 0; f < p.length; f++) {
          const d = Array.isArray(u) ? u[f] : u.type, y = p[f];
          l.concat(f + 1).checkSubtype(d, y.type);
        }
        if (l.errors.length === 0)
          return new ee(n, o, c, p);
      }
    }
    if (s.length === 1)
      t.errors.push(...l.errors);
    else {
      const c = (s.length ? s : i).map(([m]) => cs(m)).join(" | "), p = [];
      for (let m = 1; m < e.length; m++) {
        const f = t.parse(e[m], 1 + p.length);
        if (!f)
          return null;
        p.push(F(f.type));
      }
      t.error(`Expected arguments of type ${c}, but found (${p.join(", ")}) instead.`);
    }
    return null;
  }
  static register(e, t) {
    ee.definitions = t;
    for (const n in t)
      e[n] = ee;
  }
}
function Kr(r, [e, t, n, a]) {
  e = e.evaluate(r), t = t.evaluate(r), n = n.evaluate(r);
  const o = a ? a.evaluate(r) : 1, i = Ln(e, t, n, o);
  if (i)
    throw new D(i);
  return new N(e / 255, t / 255, n / 255, o, !1);
}
function Zr(r, e) {
  return r in e;
}
function Ut(r, e) {
  const t = e[r];
  return typeof t > "u" ? null : t;
}
function us(r, e, t, n) {
  for (; t <= n; ) {
    const a = t + n >> 1;
    if (e[a] === r)
      return !0;
    e[a] > r ? n = a - 1 : t = a + 1;
  }
  return !1;
}
function be(r) {
  return { type: r };
}
ee.register(gr, {
  error: [
    ni,
    [A],
    (r, [e]) => {
      throw new D(e.evaluate(r));
    }
  ],
  typeof: [
    A,
    [L],
    (r, [e]) => F(j(e.evaluate(r)))
  ],
  "to-rgba": [
    Z(g, 4),
    [ne],
    (r, [e]) => {
      const [t, n, a, o] = e.evaluate(r).rgb;
      return [t * 255, n * 255, a * 255, o];
    }
  ],
  rgb: [
    ne,
    [g, g, g],
    Kr
  ],
  rgba: [
    ne,
    [g, g, g, g],
    Kr
  ],
  has: {
    type: C,
    overloads: [
      [
        [A],
        (r, [e]) => Zr(e.evaluate(r), r.properties())
      ],
      [
        [A, ze],
        (r, [e, t]) => Zr(e.evaluate(r), t.evaluate(r))
      ]
    ]
  },
  get: {
    type: L,
    overloads: [
      [
        [A],
        (r, [e]) => Ut(e.evaluate(r), r.properties())
      ],
      [
        [A, ze],
        (r, [e, t]) => Ut(e.evaluate(r), t.evaluate(r))
      ]
    ]
  },
  "feature-state": [
    L,
    [A],
    (r, [e]) => Ut(e.evaluate(r), r.featureState || {})
  ],
  properties: [
    ze,
    [],
    (r) => r.properties()
  ],
  "geometry-type": [
    A,
    [],
    (r) => r.geometryType()
  ],
  id: [
    L,
    [],
    (r) => r.id()
  ],
  zoom: [
    g,
    [],
    (r) => r.globals.zoom
  ],
  "heatmap-density": [
    g,
    [],
    (r) => r.globals.heatmapDensity || 0
  ],
  "line-progress": [
    g,
    [],
    (r) => r.globals.lineProgress || 0
  ],
  accumulated: [
    L,
    [],
    (r) => r.globals.accumulated === void 0 ? null : r.globals.accumulated
  ],
  "+": [
    g,
    be(g),
    (r, e) => {
      let t = 0;
      for (const n of e)
        t += n.evaluate(r);
      return t;
    }
  ],
  "*": [
    g,
    be(g),
    (r, e) => {
      let t = 1;
      for (const n of e)
        t *= n.evaluate(r);
      return t;
    }
  ],
  "-": {
    type: g,
    overloads: [
      [
        [g, g],
        (r, [e, t]) => e.evaluate(r) - t.evaluate(r)
      ],
      [
        [g],
        (r, [e]) => -e.evaluate(r)
      ]
    ]
  },
  "/": [
    g,
    [g, g],
    (r, [e, t]) => e.evaluate(r) / t.evaluate(r)
  ],
  "%": [
    g,
    [g, g],
    (r, [e, t]) => e.evaluate(r) % t.evaluate(r)
  ],
  ln2: [
    g,
    [],
    () => Math.LN2
  ],
  pi: [
    g,
    [],
    () => Math.PI
  ],
  e: [
    g,
    [],
    () => Math.E
  ],
  "^": [
    g,
    [g, g],
    (r, [e, t]) => Math.pow(e.evaluate(r), t.evaluate(r))
  ],
  sqrt: [
    g,
    [g],
    (r, [e]) => Math.sqrt(e.evaluate(r))
  ],
  log10: [
    g,
    [g],
    (r, [e]) => Math.log(e.evaluate(r)) / Math.LN10
  ],
  ln: [
    g,
    [g],
    (r, [e]) => Math.log(e.evaluate(r))
  ],
  log2: [
    g,
    [g],
    (r, [e]) => Math.log(e.evaluate(r)) / Math.LN2
  ],
  sin: [
    g,
    [g],
    (r, [e]) => Math.sin(e.evaluate(r))
  ],
  cos: [
    g,
    [g],
    (r, [e]) => Math.cos(e.evaluate(r))
  ],
  tan: [
    g,
    [g],
    (r, [e]) => Math.tan(e.evaluate(r))
  ],
  asin: [
    g,
    [g],
    (r, [e]) => Math.asin(e.evaluate(r))
  ],
  acos: [
    g,
    [g],
    (r, [e]) => Math.acos(e.evaluate(r))
  ],
  atan: [
    g,
    [g],
    (r, [e]) => Math.atan(e.evaluate(r))
  ],
  min: [
    g,
    be(g),
    (r, e) => Math.min(...e.map((t) => t.evaluate(r)))
  ],
  max: [
    g,
    be(g),
    (r, e) => Math.max(...e.map((t) => t.evaluate(r)))
  ],
  abs: [
    g,
    [g],
    (r, [e]) => Math.abs(e.evaluate(r))
  ],
  round: [
    g,
    [g],
    (r, [e]) => {
      const t = e.evaluate(r);
      return t < 0 ? -Math.round(-t) : Math.round(t);
    }
  ],
  floor: [
    g,
    [g],
    (r, [e]) => Math.floor(e.evaluate(r))
  ],
  ceil: [
    g,
    [g],
    (r, [e]) => Math.ceil(e.evaluate(r))
  ],
  "filter-==": [
    C,
    [A, L],
    (r, [e, t]) => r.properties()[e.value] === t.value
  ],
  "filter-id-==": [
    C,
    [L],
    (r, [e]) => r.id() === e.value
  ],
  "filter-type-==": [
    C,
    [A],
    (r, [e]) => r.geometryType() === e.value
  ],
  "filter-<": [
    C,
    [A, L],
    (r, [e, t]) => {
      const n = r.properties()[e.value], a = t.value;
      return typeof n == typeof a && n < a;
    }
  ],
  "filter-id-<": [
    C,
    [L],
    (r, [e]) => {
      const t = r.id(), n = e.value;
      return typeof t == typeof n && t < n;
    }
  ],
  "filter->": [
    C,
    [A, L],
    (r, [e, t]) => {
      const n = r.properties()[e.value], a = t.value;
      return typeof n == typeof a && n > a;
    }
  ],
  "filter-id->": [
    C,
    [L],
    (r, [e]) => {
      const t = r.id(), n = e.value;
      return typeof t == typeof n && t > n;
    }
  ],
  "filter-<=": [
    C,
    [A, L],
    (r, [e, t]) => {
      const n = r.properties()[e.value], a = t.value;
      return typeof n == typeof a && n <= a;
    }
  ],
  "filter-id-<=": [
    C,
    [L],
    (r, [e]) => {
      const t = r.id(), n = e.value;
      return typeof t == typeof n && t <= n;
    }
  ],
  "filter->=": [
    C,
    [A, L],
    (r, [e, t]) => {
      const n = r.properties()[e.value], a = t.value;
      return typeof n == typeof a && n >= a;
    }
  ],
  "filter-id->=": [
    C,
    [L],
    (r, [e]) => {
      const t = r.id(), n = e.value;
      return typeof t == typeof n && t >= n;
    }
  ],
  "filter-has": [
    C,
    [L],
    (r, [e]) => e.value in r.properties()
  ],
  "filter-has-id": [
    C,
    [],
    (r) => r.id() !== null && r.id() !== void 0
  ],
  "filter-type-in": [
    C,
    [Z(A)],
    (r, [e]) => e.value.indexOf(r.geometryType()) >= 0
  ],
  "filter-id-in": [
    C,
    [Z(L)],
    (r, [e]) => e.value.indexOf(r.id()) >= 0
  ],
  "filter-in-small": [
    C,
    [A, Z(L)],
    // assumes v is an array literal
    (r, [e, t]) => t.value.indexOf(r.properties()[e.value]) >= 0
  ],
  "filter-in-large": [
    C,
    [A, Z(L)],
    // assumes v is a array literal with values sorted in ascending order and of a single type
    (r, [e, t]) => us(r.properties()[e.value], t.value, 0, t.value.length - 1)
  ],
  all: {
    type: C,
    overloads: [
      [
        [C, C],
        (r, [e, t]) => e.evaluate(r) && t.evaluate(r)
      ],
      [
        be(C),
        (r, e) => {
          for (const t of e)
            if (!t.evaluate(r))
              return !1;
          return !0;
        }
      ]
    ]
  },
  any: {
    type: C,
    overloads: [
      [
        [C, C],
        (r, [e, t]) => e.evaluate(r) || t.evaluate(r)
      ],
      [
        be(C),
        (r, e) => {
          for (const t of e)
            if (t.evaluate(r))
              return !0;
          return !1;
        }
      ]
    ]
  },
  "!": [
    C,
    [C],
    (r, [e]) => !e.evaluate(r)
  ],
  "is-supported-script": [
    C,
    [A],
    // At parse time this will always return true, so we need to exclude this expression with isGlobalPropertyConstant
    (r, [e]) => {
      const t = r.globals && r.globals.isSupportedScript;
      return t ? t(e.evaluate(r)) : !0;
    }
  ],
  upcase: [
    A,
    [A],
    (r, [e]) => e.evaluate(r).toUpperCase()
  ],
  downcase: [
    A,
    [A],
    (r, [e]) => e.evaluate(r).toLowerCase()
  ],
  concat: [
    A,
    be(L),
    (r, e) => e.map((t) => qe(t.evaluate(r))).join("")
  ],
  "resolved-locale": [
    A,
    [gt],
    (r, [e]) => e.evaluate(r).resolvedLocale()
  ]
});
function cs(r) {
  return Array.isArray(r) ? `(${r.map(F).join(", ")})` : `(${F(r.type)}...)`;
}
function dt(r) {
  if (r instanceof kt)
    return dt(r.boundExpression);
  if (r instanceof ee && r.name === "error")
    return !1;
  if (r instanceof Lt)
    return !1;
  if (r instanceof ke)
    return !1;
  if (r instanceof Ce)
    return !1;
  const e = r instanceof me || r instanceof Q;
  let t = !0;
  return r.eachChild((n) => {
    e ? t = t && dt(n) : t = t && n instanceof Pe;
  }), t ? Tt(r) && Et(r, ["zoom", "heatmap-density", "line-progress", "accumulated", "is-supported-script"]) : !1;
}
function Tt(r) {
  if (r instanceof ee) {
    if (r.name === "get" && r.args.length === 1)
      return !1;
    if (r.name === "feature-state")
      return !1;
    if (r.name === "has" && r.args.length === 1)
      return !1;
    if (r.name === "properties" || r.name === "geometry-type" || r.name === "id")
      return !1;
    if (/^filter-/.test(r.name))
      return !1;
  }
  if (r instanceof ke || r instanceof Ce)
    return !1;
  let e = !0;
  return r.eachChild((t) => {
    e && !Tt(t) && (e = !1);
  }), e;
}
function Ke(r) {
  if (r instanceof ee && r.name === "feature-state")
    return !1;
  let e = !0;
  return r.eachChild((t) => {
    e && !Ke(t) && (e = !1);
  }), e;
}
function Et(r, e) {
  if (r instanceof ee && e.indexOf(r.name) >= 0)
    return !1;
  let t = !0;
  return r.eachChild((n) => {
    t && !Et(n, e) && (t = !1);
  }), t;
}
function Qt(r) {
  return { result: "success", value: r };
}
function Me(r) {
  return { result: "error", value: r };
}
function yt(r) {
  return r["property-type"] === "data-driven" || r["property-type"] === "cross-faded-data-driven";
}
function Fn(r) {
  return !!r.expression && r.expression.parameters.indexOf("zoom") > -1;
}
function Nn(r) {
  return !!r.expression && r.expression.interpolated;
}
function _(r) {
  return r instanceof Number ? "number" : r instanceof String ? "string" : r instanceof Boolean ? "boolean" : Array.isArray(r) ? "array" : r === null ? "null" : typeof r;
}
function vr(r) {
  return typeof r == "object" && r !== null && !Array.isArray(r);
}
class ps {
  constructor(e, t) {
    this.expression = e, this._warningHistory = {}, this._evaluator = new An(), this._defaultValue = t ? ys(t) : null, this._enumValues = t && t.type === "enum" ? t.values : null;
  }
  evaluateWithoutErrorHandling(e, t, n, a, o, i) {
    return this._evaluator.globals = e, this._evaluator.feature = t, this._evaluator.featureState = n, this._evaluator.canonical = a, this._evaluator.availableImages = o || null, this._evaluator.formattedSection = i, this.expression.evaluate(this._evaluator);
  }
  evaluate(e, t, n, a, o, i) {
    this._evaluator.globals = e, this._evaluator.feature = t || null, this._evaluator.featureState = n || null, this._evaluator.canonical = a, this._evaluator.availableImages = o || null, this._evaluator.formattedSection = i || null;
    try {
      const s = this.expression.evaluate(this._evaluator);
      if (s == null || typeof s == "number" && s !== s)
        return this._defaultValue;
      if (this._enumValues && !(s in this._enumValues))
        throw new D(`Expected value to be one of ${Object.keys(this._enumValues).map((l) => JSON.stringify(l)).join(", ")}, but found ${JSON.stringify(s)} instead.`);
      return s;
    } catch (s) {
      return this._warningHistory[s.message] || (this._warningHistory[s.message] = !0, typeof console < "u" && console.warn(s.message)), this._defaultValue;
    }
  }
}
function On(r) {
  return Array.isArray(r) && r.length > 0 && typeof r[0] == "string" && r[0] in gr;
}
function Dn(r, e) {
  const t = new xt(gr, dt, [], e ? ds(e) : void 0), n = t.parse(r, void 0, void 0, void 0, e && e.type === "string" ? { typeAnnotation: "coerce" } : void 0);
  return n ? Qt(new ps(n, e)) : Me(t.errors);
}
class Wr {
  constructor(e, t) {
    this.kind = e, this._styleExpression = t, this.isStateDependent = e !== "constant" && !Ke(t.expression);
  }
  evaluateWithoutErrorHandling(e, t, n, a, o, i) {
    return this._styleExpression.evaluateWithoutErrorHandling(e, t, n, a, o, i);
  }
  evaluate(e, t, n, a, o, i) {
    return this._styleExpression.evaluate(e, t, n, a, o, i);
  }
}
class Jr {
  constructor(e, t, n, a) {
    this.kind = e, this.zoomStops = n, this._styleExpression = t, this.isStateDependent = e !== "camera" && !Ke(t.expression), this.interpolationType = a;
  }
  evaluateWithoutErrorHandling(e, t, n, a, o, i) {
    return this._styleExpression.evaluateWithoutErrorHandling(e, t, n, a, o, i);
  }
  evaluate(e, t, n, a, o, i) {
    return this._styleExpression.evaluate(e, t, n, a, o, i);
  }
  interpolationFactor(e, t, n) {
    return this.interpolationType ? oe.interpolationFactor(this.interpolationType, e, t, n) : 0;
  }
}
function fs(r, e) {
  const t = Dn(r, e);
  if (t.result === "error")
    return t;
  const n = t.value.expression, a = Tt(n);
  if (!a && !yt(e))
    return Me([new re("", "data expressions not supported")]);
  const o = Et(n, ["zoom"]);
  if (!o && !Fn(e))
    return Me([new re("", "zoom expressions not supported")]);
  const i = at(n);
  if (!i && !o)
    return Me([new re("", '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.')]);
  if (i instanceof re)
    return Me([i]);
  if (i instanceof oe && !Nn(e))
    return Me([new re("", '"interpolate" expressions cannot be used with this property')]);
  if (!i)
    return Qt(a ? new Wr("constant", t.value) : new Wr("source", t.value));
  const s = i instanceof oe ? i.interpolation : void 0;
  return Qt(a ? new Jr("camera", t.value, i.labels, s) : new Jr("composite", t.value, i.labels, s));
}
function at(r) {
  let e = null;
  if (r instanceof St)
    e = at(r.result);
  else if (r instanceof Ge) {
    for (const t of r.args)
      if (e = at(t), e)
        break;
  } else (r instanceof Ct || r instanceof oe) && r.input instanceof ee && r.input.name === "zoom" && (e = r);
  return e instanceof re || r.eachChild((t) => {
    const n = at(t);
    n instanceof re ? e = n : !e && n ? e = new re("", '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.') : e && n && e !== n && (e = new re("", 'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.'));
  }), e;
}
function ds(r) {
  const e = {
    color: ne,
    string: A,
    number: g,
    enum: A,
    boolean: C,
    formatted: vt,
    padding: bt,
    resolvedImage: Je,
    variableAnchorOffsetCollection: wt
  };
  return r.type === "array" ? Z(e[r.value] || L, r.length) : e[r.type];
}
function ys(r) {
  return r.type === "color" && vr(r.default) ? new N(0, 0, 0, 0) : r.type === "color" ? N.parse(r.default) || null : r.type === "padding" ? ae.parse(r.default) || null : r.type === "variableAnchorOffsetCollection" ? ce.parse(r.default) || null : r.default === void 0 ? null : r.default;
}
function jn(r) {
  if (r === !0 || r === !1)
    return !0;
  if (!Array.isArray(r) || r.length === 0)
    return !1;
  switch (r[0]) {
    case "has":
      return r.length >= 2 && r[1] !== "$id" && r[1] !== "$type";
    case "in":
      return r.length >= 3 && (typeof r[1] != "string" || Array.isArray(r[2]));
    case "!in":
    case "!has":
    case "none":
      return !1;
    case "==":
    case "!=":
    case ">":
    case ">=":
    case "<":
    case "<=":
      return r.length !== 3 || Array.isArray(r[1]) || Array.isArray(r[2]);
    case "any":
    case "all":
      for (const e of r.slice(1))
        if (!jn(e) && typeof e != "boolean")
          return !1;
      return !0;
    default:
      return !0;
  }
}
function qn(r) {
  const e = r.key, t = r.value;
  return t ? [new h(e, t, "constants have been deprecated as of v8")] : [];
}
function O(r) {
  return r instanceof Number || r instanceof String || r instanceof Boolean ? r.valueOf() : r;
}
function Te(r) {
  if (Array.isArray(r))
    return r.map(Te);
  if (r instanceof Object && !(r instanceof Number || r instanceof String || r instanceof Boolean)) {
    const e = {};
    for (const t in r)
      e[t] = Te(r[t]);
    return e;
  }
  return O(r);
}
function J(r) {
  const e = r.key, t = r.value, n = r.valueSpec || {}, a = r.objectElementValidators || {}, o = r.style, i = r.styleSpec, s = r.validateSpec;
  let l = [];
  const u = _(t);
  if (u !== "object")
    return [new h(e, t, `object expected, ${u} found`)];
  for (const c in t) {
    const p = c.split(".")[0], m = n[p] || n["*"];
    let f;
    if (a[p])
      f = a[p];
    else if (n[p])
      f = s;
    else if (a["*"])
      f = a["*"];
    else if (n["*"])
      f = s;
    else {
      l.push(new h(e, t[c], `unknown property "${c}"`));
      continue;
    }
    l = l.concat(f({
      key: (e && `${e}.`) + c,
      value: t[c],
      valueSpec: m,
      style: o,
      styleSpec: i,
      object: t,
      objectKey: c,
      validateSpec: s
    }, t));
  }
  for (const c in n)
    a[c] || n[c].required && n[c].default === void 0 && t[c] === void 0 && l.push(new h(e, t, `missing required property "${c}"`));
  return l;
}
function br(r) {
  const e = r.value, t = r.valueSpec, n = r.validateSpec, a = r.style, o = r.styleSpec, i = r.key, s = r.arrayElementValidator || n;
  if (_(e) !== "array")
    return [new h(i, e, `array expected, ${_(e)} found`)];
  if (t.length && e.length !== t.length)
    return [new h(i, e, `array length ${t.length} expected, length ${e.length} found`)];
  if (t["min-length"] && e.length < t["min-length"])
    return [new h(i, e, `array length at least ${t["min-length"]} expected, length ${e.length} found`)];
  let l = {
    type: t.value,
    values: t.values
  };
  o.$version < 7 && (l.function = t.function), _(t.value) === "object" && (l = t.value);
  let u = [];
  for (let c = 0; c < e.length; c++)
    u = u.concat(s({
      array: e,
      arrayIndex: c,
      value: e[c],
      valueSpec: l,
      validateSpec: r.validateSpec,
      style: a,
      styleSpec: o,
      key: `${i}[${c}]`
    }));
  return u;
}
function wr(r) {
  const e = r.key, t = r.value, n = r.valueSpec;
  let a = _(t);
  return a === "number" && t !== t && (a = "NaN"), a !== "number" ? [new h(e, t, `number expected, ${a} found`)] : "minimum" in n && t < n.minimum ? [new h(e, t, `${t} is less than the minimum value ${n.minimum}`)] : "maximum" in n && t > n.maximum ? [new h(e, t, `${t} is greater than the maximum value ${n.maximum}`)] : [];
}
function Un(r) {
  const e = r.valueSpec, t = O(r.value.type);
  let n, a = {}, o, i;
  const s = t !== "categorical" && r.value.property === void 0, l = !s, u = _(r.value.stops) === "array" && _(r.value.stops[0]) === "array" && _(r.value.stops[0][0]) === "object", c = J({
    key: r.key,
    value: r.value,
    valueSpec: r.styleSpec.function,
    validateSpec: r.validateSpec,
    style: r.style,
    styleSpec: r.styleSpec,
    objectElementValidators: {
      stops: p,
      default: d
    }
  });
  return t === "identity" && s && c.push(new h(r.key, r.value, 'missing required property "property"')), t !== "identity" && !r.value.stops && c.push(new h(r.key, r.value, 'missing required property "stops"')), t === "exponential" && r.valueSpec.expression && !Nn(r.valueSpec) && c.push(new h(r.key, r.value, "exponential functions not supported")), r.styleSpec.$version >= 8 && (l && !yt(r.valueSpec) ? c.push(new h(r.key, r.value, "property functions not supported")) : s && !Fn(r.valueSpec) && c.push(new h(r.key, r.value, "zoom functions not supported"))), (t === "categorical" || u) && r.value.property === void 0 && c.push(new h(r.key, r.value, '"property" property is required')), c;
  function p(y) {
    if (t === "identity")
      return [new h(y.key, y.value, 'identity function may not have a "stops" property')];
    let b = [];
    const w = y.value;
    return b = b.concat(br({
      key: y.key,
      value: w,
      valueSpec: y.valueSpec,
      validateSpec: y.validateSpec,
      style: y.style,
      styleSpec: y.styleSpec,
      arrayElementValidator: m
    })), _(w) === "array" && w.length === 0 && b.push(new h(y.key, w, "array must have at least one stop")), b;
  }
  function m(y) {
    let b = [];
    const w = y.value, v = y.key;
    if (_(w) !== "array")
      return [new h(v, w, `array expected, ${_(w)} found`)];
    if (w.length !== 2)
      return [new h(v, w, `array length 2 expected, length ${w.length} found`)];
    if (u) {
      if (_(w[0]) !== "object")
        return [new h(v, w, `object expected, ${_(w[0])} found`)];
      if (w[0].zoom === void 0)
        return [new h(v, w, "object stop key must have zoom")];
      if (w[0].value === void 0)
        return [new h(v, w, "object stop key must have value")];
      if (i && i > O(w[0].zoom))
        return [new h(v, w[0].zoom, "stop zoom values must appear in ascending order")];
      O(w[0].zoom) !== i && (i = O(w[0].zoom), o = void 0, a = {}), b = b.concat(J({
        key: `${v}[0]`,
        value: w[0],
        valueSpec: { zoom: {} },
        validateSpec: y.validateSpec,
        style: y.style,
        styleSpec: y.styleSpec,
        objectElementValidators: { zoom: wr, value: f }
      }));
    } else
      b = b.concat(f({
        key: `${v}[0]`,
        value: w[0],
        valueSpec: {},
        validateSpec: y.validateSpec,
        style: y.style,
        styleSpec: y.styleSpec
      }, w));
    return On(Te(w[1])) ? b.concat([new h(`${v}[1]`, w[1], "expressions are not allowed in function stops.")]) : b.concat(y.validateSpec({
      key: `${v}[1]`,
      value: w[1],
      valueSpec: e,
      validateSpec: y.validateSpec,
      style: y.style,
      styleSpec: y.styleSpec
    }));
  }
  function f(y, b) {
    const w = _(y.value), v = O(y.value), E = y.value !== null ? y.value : b;
    if (!n)
      n = w;
    else if (w !== n)
      return [new h(y.key, E, `${w} stop domain type must match previous stop domain type ${n}`)];
    if (w !== "number" && w !== "string" && w !== "boolean")
      return [new h(y.key, E, "stop domain value must be a number, string, or boolean")];
    if (w !== "number" && t !== "categorical") {
      let R = `number expected, ${w} found`;
      return yt(e) && t === void 0 && (R += '\nIf you intended to use a categorical function, specify `"type": "categorical"`.'), [new h(y.key, E, R)];
    }
    return t === "categorical" && w === "number" && (!isFinite(v) || Math.floor(v) !== v) ? [new h(y.key, E, `integer expected, found ${v}`)] : t !== "categorical" && w === "number" && o !== void 0 && v < o ? [new h(y.key, E, "stop domain values must appear in ascending order")] : (o = v, t === "categorical" && v in a ? [new h(y.key, E, "stop domain values must be unique")] : (a[v] = !0, []));
  }
  function d(y) {
    return y.validateSpec({
      key: y.key,
      value: y.value,
      valueSpec: e,
      validateSpec: y.validateSpec,
      style: y.style,
      styleSpec: y.styleSpec
    });
  }
}
function Re(r) {
  const e = (r.expressionContext === "property" ? fs : Dn)(Te(r.value), r.valueSpec);
  if (e.result === "error")
    return e.value.map((n) => new h(`${r.key}${n.key}`, r.value, n.message));
  const t = e.value.expression || e.value._styleExpression.expression;
  if (r.expressionContext === "property" && r.propertyKey === "text-font" && !t.outputDefined())
    return [new h(r.key, r.value, `Invalid data expression for "${r.propertyKey}". Output values must be contained as literals within the expression.`)];
  if (r.expressionContext === "property" && r.propertyType === "layout" && !Ke(t))
    return [new h(r.key, r.value, '"feature-state" data expressions are not supported with layout properties.')];
  if (r.expressionContext === "filter" && !Ke(t))
    return [new h(r.key, r.value, '"feature-state" data expressions are not supported with filters.')];
  if (r.expressionContext && r.expressionContext.indexOf("cluster") === 0) {
    if (!Et(t, ["zoom", "feature-state"]))
      return [new h(r.key, r.value, '"zoom" and "feature-state" expressions are not supported with cluster properties.')];
    if (r.expressionContext === "cluster-initial" && !Tt(t))
      return [new h(r.key, r.value, "Feature data expressions are not supported with initial expression part of cluster properties.")];
  }
  return [];
}
function ms(r) {
  const e = r.value, t = r.key, n = _(e);
  return n !== "boolean" ? [new h(t, e, `boolean expected, ${n} found`)] : [];
}
function hs(r) {
  const e = r.key, t = r.value, n = _(t);
  return n !== "string" ? [new h(e, t, `color expected, ${n} found`)] : N.parse(String(t)) ? [] : [new h(e, t, `color expected, "${t}" found`)];
}
function Ze(r) {
  const e = r.key, t = r.value, n = r.valueSpec, a = [];
  return Array.isArray(n.values) ? n.values.indexOf(O(t)) === -1 && a.push(new h(e, t, `expected one of [${n.values.join(", ")}], ${JSON.stringify(t)} found`)) : Object.keys(n.values).indexOf(O(t)) === -1 && a.push(new h(e, t, `expected one of [${Object.keys(n.values).join(", ")}], ${JSON.stringify(t)} found`)), a;
}
function xr(r) {
  return jn(Te(r.value)) ? Re(it({}, r, {
    expressionContext: "filter",
    valueSpec: { value: "boolean" }
  })) : Bn(r);
}
function Bn(r) {
  const e = r.value, t = r.key;
  if (_(e) !== "array")
    return [new h(t, e, `array expected, ${_(e)} found`)];
  const n = r.styleSpec;
  let a, o = [];
  if (e.length < 1)
    return [new h(t, e, "filter array must have at least 1 element")];
  switch (o = o.concat(Ze({
    key: `${t}[0]`,
    value: e[0],
    valueSpec: n.filter_operator,
    style: r.style,
    styleSpec: r.styleSpec
  })), O(e[0])) {
    case "<":
    case "<=":
    case ">":
    case ">=":
      e.length >= 2 && O(e[1]) === "$type" && o.push(new h(t, e, `"$type" cannot be use with operator "${e[0]}"`));
    case "==":
    case "!=":
      e.length !== 3 && o.push(new h(t, e, `filter array for operator "${e[0]}" must have 3 elements`));
    case "in":
    case "!in":
      e.length >= 2 && (a = _(e[1]), a !== "string" && o.push(new h(`${t}[1]`, e[1], `string expected, ${a} found`)));
      for (let i = 2; i < e.length; i++)
        a = _(e[i]), O(e[1]) === "$type" ? o = o.concat(Ze({
          key: `${t}[${i}]`,
          value: e[i],
          valueSpec: n.geometry_type,
          style: r.style,
          styleSpec: r.styleSpec
        })) : a !== "string" && a !== "number" && a !== "boolean" && o.push(new h(`${t}[${i}]`, e[i], `string, number, or boolean expected, ${a} found`));
      break;
    case "any":
    case "all":
    case "none":
      for (let i = 1; i < e.length; i++)
        o = o.concat(Bn({
          key: `${t}[${i}]`,
          value: e[i],
          style: r.style,
          styleSpec: r.styleSpec
        }));
      break;
    case "has":
    case "!has":
      a = _(e[1]), e.length !== 2 ? o.push(new h(t, e, `filter array for "${e[0]}" operator must have 2 elements`)) : a !== "string" && o.push(new h(`${t}[1]`, e[1], `string expected, ${a} found`));
      break;
  }
  return o;
}
function Vn(r, e) {
  const t = r.key, n = r.validateSpec, a = r.style, o = r.styleSpec, i = r.value, s = r.objectKey, l = o[`${e}_${r.layerType}`];
  if (!l)
    return [];
  const u = s.match(/^(.*)-transition$/);
  if (e === "paint" && u && l[u[1]] && l[u[1]].transition)
    return n({
      key: t,
      value: i,
      valueSpec: o.transition,
      style: a,
      styleSpec: o
    });
  const c = r.valueSpec || l[s];
  if (!c)
    return [new h(t, i, `unknown property "${s}"`)];
  let p;
  if (_(i) === "string" && yt(c) && !c.tokens && (p = /^{([^}]+)}$/.exec(i)))
    return [new h(t, i, `"${s}" does not support interpolation syntax
Use an identity property function instead: \`{ "type": "identity", "property": ${JSON.stringify(p[1])} }\`.`)];
  const m = [];
  return r.layerType === "symbol" && (s === "text-field" && a && !a.glyphs && m.push(new h(t, i, 'use of "text-field" requires a style "glyphs" property')), s === "text-font" && vr(Te(i)) && O(i.type) === "identity" && m.push(new h(t, i, '"text-font" does not support identity functions'))), m.concat(n({
    key: r.key,
    value: i,
    valueSpec: c,
    style: a,
    styleSpec: o,
    expressionContext: "property",
    propertyType: e,
    propertyKey: s
  }));
}
function Gn(r) {
  return Vn(r, "paint");
}
function Hn(r) {
  return Vn(r, "layout");
}
function Kn(r) {
  let e = [];
  const t = r.value, n = r.key, a = r.style, o = r.styleSpec;
  !t.type && !t.ref && e.push(new h(n, t, 'either "type" or "ref" is required'));
  let i = O(t.type);
  const s = O(t.ref);
  if (t.id) {
    const l = O(t.id);
    for (let u = 0; u < r.arrayIndex; u++) {
      const c = a.layers[u];
      O(c.id) === l && e.push(new h(n, t.id, `duplicate layer id "${t.id}", previously used at line ${c.id.__line__}`));
    }
  }
  if ("ref" in t) {
    ["type", "source", "source-layer", "filter", "layout"].forEach((u) => {
      u in t && e.push(new h(n, t[u], `"${u}" is prohibited for ref layers`));
    });
    let l;
    a.layers.forEach((u) => {
      O(u.id) === s && (l = u);
    }), l ? l.ref ? e.push(new h(n, t.ref, "ref cannot reference another ref layer")) : i = O(l.type) : e.push(new h(n, t.ref, `ref layer "${s}" not found`));
  } else if (i !== "background")
    if (!t.source)
      e.push(new h(n, t, 'missing required property "source"'));
    else {
      const l = a.sources && a.sources[t.source], u = l && O(l.type);
      l ? u === "vector" && i === "raster" ? e.push(new h(n, t.source, `layer "${t.id}" requires a raster source`)) : u !== "raster-dem" && i === "hillshade" ? e.push(new h(n, t.source, `layer "${t.id}" requires a raster-dem source`)) : u === "raster" && i !== "raster" ? e.push(new h(n, t.source, `layer "${t.id}" requires a vector source`)) : u === "vector" && !t["source-layer"] ? e.push(new h(n, t, `layer "${t.id}" must specify a "source-layer"`)) : u === "raster-dem" && i !== "hillshade" ? e.push(new h(n, t.source, "raster-dem source can only be used with layer type 'hillshade'.")) : i === "line" && t.paint && t.paint["line-gradient"] && (u !== "geojson" || !l.lineMetrics) && e.push(new h(n, t, `layer "${t.id}" specifies a line-gradient, which requires a GeoJSON source with \`lineMetrics\` enabled.`)) : e.push(new h(n, t.source, `source "${t.source}" not found`));
    }
  return e = e.concat(J({
    key: n,
    value: t,
    valueSpec: o.layer,
    style: r.style,
    styleSpec: r.styleSpec,
    validateSpec: r.validateSpec,
    objectElementValidators: {
      "*"() {
        return [];
      },
      // We don't want to enforce the spec's `"requires": true` for backward compatibility with refs;
      // the actual requirement is validated above. See https://github.com/mapbox/mapbox-gl-js/issues/5772.
      type() {
        return r.validateSpec({
          key: `${n}.type`,
          value: t.type,
          valueSpec: o.layer.type,
          style: r.style,
          styleSpec: r.styleSpec,
          validateSpec: r.validateSpec,
          object: t,
          objectKey: "type"
        });
      },
      filter: xr,
      layout(l) {
        return J({
          layer: t,
          key: l.key,
          value: l.value,
          style: l.style,
          styleSpec: l.styleSpec,
          validateSpec: l.validateSpec,
          objectElementValidators: {
            "*"(u) {
              return Hn(it({ layerType: i }, u));
            }
          }
        });
      },
      paint(l) {
        return J({
          layer: t,
          key: l.key,
          value: l.value,
          style: l.style,
          styleSpec: l.styleSpec,
          validateSpec: l.validateSpec,
          objectElementValidators: {
            "*"(u) {
              return Gn(it({ layerType: i }, u));
            }
          }
        });
      }
    }
  })), e;
}
function Ee(r) {
  const e = r.value, t = r.key, n = _(e);
  return n !== "string" ? [new h(t, e, `string expected, ${n} found`)] : [];
}
function gs(r) {
  var e;
  const t = (e = r.sourceName) !== null && e !== void 0 ? e : "", n = r.value, a = r.styleSpec, o = a.source_raster_dem, i = r.style;
  let s = [];
  const l = _(n);
  if (n === void 0)
    return s;
  if (l !== "object")
    return s.push(new h("source_raster_dem", n, `object expected, ${l} found`)), s;
  const c = O(n.encoding) === "custom", p = ["redFactor", "greenFactor", "blueFactor", "baseShift"], m = r.value.encoding ? `"${r.value.encoding}"` : "Default";
  for (const f in n)
    !c && p.includes(f) ? s.push(new h(f, n[f], `In "${t}": "${f}" is only valid when "encoding" is set to "custom". ${m} encoding found`)) : o[f] ? s = s.concat(r.validateSpec({
      key: f,
      value: n[f],
      valueSpec: o[f],
      validateSpec: r.validateSpec,
      style: i,
      styleSpec: a
    })) : s.push(new h(f, n[f], `unknown property "${f}"`));
  return s;
}
const Yr = {
  promoteId: vs
};
function Zn(r) {
  const e = r.value, t = r.key, n = r.styleSpec, a = r.style, o = r.validateSpec;
  if (!e.type)
    return [new h(t, e, '"type" is required')];
  const i = O(e.type);
  let s;
  switch (i) {
    case "vector":
    case "raster":
      return s = J({
        key: t,
        value: e,
        valueSpec: n[`source_${i.replace("-", "_")}`],
        style: r.style,
        styleSpec: n,
        objectElementValidators: Yr,
        validateSpec: o
      }), s;
    case "raster-dem":
      return s = gs({
        sourceName: t,
        value: e,
        style: r.style,
        styleSpec: n,
        validateSpec: o
      }), s;
    case "geojson":
      if (s = J({
        key: t,
        value: e,
        valueSpec: n.source_geojson,
        style: a,
        styleSpec: n,
        validateSpec: o,
        objectElementValidators: Yr
      }), e.cluster)
        for (const l in e.clusterProperties) {
          const [u, c] = e.clusterProperties[l], p = typeof u == "string" ? [u, ["accumulated"], ["get", l]] : u;
          s.push(...Re({
            key: `${t}.${l}.map`,
            value: c,
            validateSpec: o,
            expressionContext: "cluster-map"
          })), s.push(...Re({
            key: `${t}.${l}.reduce`,
            value: p,
            validateSpec: o,
            expressionContext: "cluster-reduce"
          }));
        }
      return s;
    case "video":
      return J({
        key: t,
        value: e,
        valueSpec: n.source_video,
        style: a,
        validateSpec: o,
        styleSpec: n
      });
    case "image":
      return J({
        key: t,
        value: e,
        valueSpec: n.source_image,
        style: a,
        validateSpec: o,
        styleSpec: n
      });
    case "canvas":
      return [new h(t, null, "Please use runtime APIs to add canvas sources, rather than including them in stylesheets.", "source.canvas")];
    default:
      return Ze({
        key: `${t}.type`,
        value: e.type,
        valueSpec: { values: ["vector", "raster", "raster-dem", "geojson", "video", "image"] },
        style: a,
        validateSpec: o,
        styleSpec: n
      });
  }
}
function vs({ key: r, value: e }) {
  if (_(e) === "string")
    return Ee({ key: r, value: e });
  {
    const t = [];
    for (const n in e)
      t.push(...Ee({ key: `${r}.${n}`, value: e[n] }));
    return t;
  }
}
function Wn(r) {
  const e = r.value, t = r.styleSpec, n = t.light, a = r.style;
  let o = [];
  const i = _(e);
  if (e === void 0)
    return o;
  if (i !== "object")
    return o = o.concat([new h("light", e, `object expected, ${i} found`)]), o;
  for (const s in e) {
    const l = s.match(/^(.*)-transition$/);
    l && n[l[1]] && n[l[1]].transition ? o = o.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: t.transition,
      validateSpec: r.validateSpec,
      style: a,
      styleSpec: t
    })) : n[s] ? o = o.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: n[s],
      validateSpec: r.validateSpec,
      style: a,
      styleSpec: t
    })) : o = o.concat([new h(s, e[s], `unknown property "${s}"`)]);
  }
  return o;
}
function Jn(r) {
  const e = r.value, t = r.styleSpec, n = t.sky, a = r.style, o = _(e);
  if (e === void 0)
    return [];
  if (o !== "object")
    return [new h("sky", e, `object expected, ${o} found`)];
  let i = [];
  for (const s in e)
    n[s] ? i = i.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: n[s],
      style: a,
      styleSpec: t
    })) : i = i.concat([new h(s, e[s], `unknown property "${s}"`)]);
  return i;
}
function Yn(r) {
  const e = r.value, t = r.styleSpec, n = t.terrain, a = r.style;
  let o = [];
  const i = _(e);
  if (e === void 0)
    return o;
  if (i !== "object")
    return o = o.concat([new h("terrain", e, `object expected, ${i} found`)]), o;
  for (const s in e)
    n[s] ? o = o.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: n[s],
      validateSpec: r.validateSpec,
      style: a,
      styleSpec: t
    })) : o = o.concat([new h(s, e[s], `unknown property "${s}"`)]);
  return o;
}
function bs(r) {
  return Ee(r).length === 0 ? [] : Re(r);
}
function ws(r) {
  return Ee(r).length === 0 ? [] : Re(r);
}
function xs(r) {
  const e = r.key, t = r.value;
  if (_(t) === "array") {
    if (t.length < 1 || t.length > 4)
      return [new h(e, t, `padding requires 1 to 4 values; ${t.length} values found`)];
    const a = {
      type: "number"
    };
    let o = [];
    for (let i = 0; i < t.length; i++)
      o = o.concat(r.validateSpec({
        key: `${e}[${i}]`,
        value: t[i],
        validateSpec: r.validateSpec,
        valueSpec: a
      }));
    return o;
  } else
    return wr({
      key: e,
      value: t,
      valueSpec: {}
    });
}
function Ss(r) {
  const e = r.key, t = r.value, n = _(t), a = r.styleSpec;
  if (n !== "array" || t.length < 1 || t.length % 2 !== 0)
    return [new h(e, t, "variableAnchorOffsetCollection requires a non-empty array of even length")];
  let o = [];
  for (let i = 0; i < t.length; i += 2)
    o = o.concat(Ze({
      key: `${e}[${i}]`,
      value: t[i],
      valueSpec: a.layout_symbol["text-anchor"]
    })), o = o.concat(br({
      key: `${e}[${i + 1}]`,
      value: t[i + 1],
      valueSpec: {
        length: 2,
        value: "number"
      },
      validateSpec: r.validateSpec,
      style: r.style,
      styleSpec: a
    }));
  return o;
}
function Xn(r) {
  let e = [];
  const t = r.value, n = r.key;
  if (Array.isArray(t)) {
    const a = [], o = [];
    for (const i in t) {
      t[i].id && a.includes(t[i].id) && e.push(new h(n, t, `all the sprites' ids must be unique, but ${t[i].id} is duplicated`)), a.push(t[i].id), t[i].url && o.includes(t[i].url) && e.push(new h(n, t, `all the sprites' URLs must be unique, but ${t[i].url} is duplicated`)), o.push(t[i].url);
      const s = {
        id: {
          type: "string",
          required: !0
        },
        url: {
          type: "string",
          required: !0
        }
      };
      e = e.concat(J({
        key: `${n}[${i}]`,
        value: t[i],
        valueSpec: s,
        validateSpec: r.validateSpec
      }));
    }
    return e;
  } else
    return Ee({
      key: n,
      value: t
    });
}
function ks(r) {
  const e = r.value, t = r.styleSpec, n = t.projection, a = r.style, o = _(e);
  if (e === void 0)
    return [];
  if (o !== "object")
    return [new h("projection", e, `object expected, ${o} found`)];
  let i = [];
  for (const s in e)
    n[s] ? i = i.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: n[s],
      style: a,
      styleSpec: t
    })) : i = i.concat([new h(s, e[s], `unknown property "${s}"`)]);
  return i;
}
const Xr = {
  "*"() {
    return [];
  },
  array: br,
  boolean: ms,
  number: wr,
  color: hs,
  constants: qn,
  enum: Ze,
  filter: xr,
  function: Un,
  layer: Kn,
  object: J,
  source: Zn,
  light: Wn,
  sky: Jn,
  terrain: Yn,
  projection: ks,
  string: Ee,
  formatted: bs,
  resolvedImage: ws,
  padding: xs,
  variableAnchorOffsetCollection: Ss,
  sprite: Xn
};
function Ue(r) {
  const e = r.value, t = r.valueSpec, n = r.styleSpec;
  return r.validateSpec = Ue, t.expression && vr(O(e)) ? Un(r) : t.expression && On(Te(e)) ? Re(r) : t.type && Xr[t.type] ? Xr[t.type](r) : J(it({}, r, {
    valueSpec: t.type ? n[t.type] : t
  }));
}
function Qn(r) {
  const e = r.value, t = r.key, n = Ee(r);
  return n.length || (e.indexOf("{fontstack}") === -1 && n.push(new h(t, e, '"glyphs" url must include a "{fontstack}" token')), e.indexOf("{range}") === -1 && n.push(new h(t, e, '"glyphs" url must include a "{range}" token'))), n;
}
function Y(r, e = ri) {
  let t = [];
  return t = t.concat(Ue({
    key: "",
    value: r,
    valueSpec: e.$root,
    styleSpec: e,
    style: r,
    validateSpec: Ue,
    objectElementValidators: {
      glyphs: Qn,
      "*"() {
        return [];
      }
    }
  })), r.constants && (t = t.concat(qn({
    key: "constants",
    value: r.constants,
    style: r,
    styleSpec: e,
    validateSpec: Ue
  }))), ea(t);
}
Y.source = le(se(Zn));
Y.sprite = le(se(Xn));
Y.glyphs = le(se(Qn));
Y.light = le(se(Wn));
Y.sky = le(se(Jn));
Y.terrain = le(se(Yn));
Y.layer = le(se(Kn));
Y.filter = le(se(xr));
Y.paintProperty = le(se(Gn));
Y.layoutProperty = le(se(Hn));
function se(r) {
  return function(e) {
    return r({
      ...e,
      validateSpec: Ue
    });
  };
}
function ea(r) {
  return [].concat(r).sort((e, t) => e.line - t.line);
}
function le(r) {
  return function(...e) {
    return ea(r.apply(this, e));
  };
}
function Qr(r) {
  if (!r)
    return {
      style: je[$t[0].referenceStyleID].getDefaultVariant().getExpandedStyleURL(),
      requiresUrlMonitoring: !1,
      // default styles don't require URL monitoring
      isFallback: !0
    };
  if (typeof r == "string") {
    const t = Ls(r);
    return t.isValidStyle ? {
      style: t.styleObject,
      requiresUrlMonitoring: !1,
      isFallback: !1
    } : t.isValidJSON ? {
      style: je[$t[0].referenceStyleID].getDefaultVariant().getExpandedStyleURL(),
      requiresUrlMonitoring: !1,
      // default styles don't require URL monitoring
      isFallback: !0
    } : r.startsWith("http") ? { style: r, requiresUrlMonitoring: !0, isFallback: !1 } : r.toLowerCase().includes(".json") ? { style: Cs(r), requiresUrlMonitoring: !0, isFallback: !1 } : { style: Aa(r), requiresUrlMonitoring: !0, isFallback: !1 };
  }
  return r instanceof Ta ? { style: r.getExpandedStyleURL(), requiresUrlMonitoring: !1, isFallback: !1 } : r instanceof Ea ? {
    style: r.getDefaultVariant().getExpandedStyleURL(),
    requiresUrlMonitoring: !1,
    isFallback: !1
  } : Y(r).length === 0 ? {
    style: r,
    requiresUrlMonitoring: !1,
    isFallback: !1
  } : {
    style: je[$t[0].referenceStyleID].getDefaultVariant().getExpandedStyleURL(),
    requiresUrlMonitoring: !1,
    // default styles don't require URL monitoring
    isFallback: !0
  };
}
function Cs(r) {
  try {
    return new URL(r).href;
  } catch {
  }
  return new URL(r, location.origin).href;
}
function Ls(r) {
  try {
    const e = JSON.parse(r), t = Y(e);
    return {
      isValidJSON: !0,
      isValidStyle: t.length === 0,
      styleObject: t.length === 0 ? e : null
    };
  } catch {
    return {
      isValidJSON: !1,
      isValidStyle: !1,
      styleObject: null
    };
  }
}
class As {
  constructor() {
    M(this, "_map");
    M(this, "_container");
    M(this, "_terrainButton");
    oo(["_toggleTerrain", "_updateTerrainIcon"], this);
  }
  onAdd(e) {
    return this._map = e, this._container = _e("div", "maplibregl-ctrl maplibregl-ctrl-group"), this._terrainButton = _e("button", "maplibregl-ctrl-terrain", this._container), _e("span", "maplibregl-ctrl-icon", this._terrainButton).setAttribute("aria-hidden", "true"), this._terrainButton.type = "button", this._terrainButton.addEventListener("click", this._toggleTerrain), this._updateTerrainIcon(), this._map.on("terrain", this._updateTerrainIcon), this._container;
  }
  onRemove() {
    mn(this._container), this._map.off("terrain", this._updateTerrainIcon), this._map = void 0;
  }
  _toggleTerrain() {
    this._map.hasTerrain() ? this._map.disableTerrain() : this._map.enableTerrain(), this._updateTerrainIcon();
  }
  _updateTerrainIcon() {
    this._terrainButton.classList.remove("maplibregl-ctrl-terrain"), this._terrainButton.classList.remove("maplibregl-ctrl-terrain-enabled"), this._map.hasTerrain() ? (this._terrainButton.classList.add("maplibregl-ctrl-terrain-enabled"), this._terrainButton.title = this._map._getUIString("TerrainControl.Disable")) : (this._terrainButton.classList.add("maplibregl-ctrl-terrain"), this._terrainButton.title = this._map._getUIString("TerrainControl.Enable"));
  }
}
class Ts extends co {
  constructor(t = {}) {
    super({
      showCompass: t.showCompass ?? !0,
      showZoom: t.showZoom ?? !0,
      visualizePitch: t.visualizePitch ?? !0
    });
    /**
     * Overloading: Limit how flat the compass icon can get
     */
    M(this, "_rotateCompassArrow", () => {
      const t = this.options.visualizePitch ? `scale(${Math.min(
        1.5,
        1 / Math.cos(this._map.transform.pitch * (Math.PI / 180)) ** 0.5
      )}) rotateX(${Math.min(70, this._map.transform.pitch)}deg) rotateZ(${this._map.transform.angle * (180 / Math.PI)}deg)` : `rotate(${this._map.transform.angle * (180 / Math.PI)}deg)`;
      this._compassIcon.style.transform = t;
    });
    this._compass && (this._compass.removeEventListener("click", this._compass.clickFunction), this._compass.addEventListener("click", (n) => {
      this._map.getPitch() === 0 ? this._map.easeTo({ pitch: Math.min(this._map.getMaxPitch(), 80) }) : this.options.visualizePitch ? this._map.resetNorthPitch({}, { originalEvent: n }) : this._map.resetNorth({}, { originalEvent: n });
    }));
  }
  /**
   * Overloading: the button now stores its click callback so that we can later on delete it and replace it
   */
  _createButton(t, n) {
    const a = super._createButton(t, n);
    return a.clickFunction = n, a;
  }
}
const en = x.Marker, tn = x.LngLat, Es = x.LngLatBounds;
class Is extends po {
  constructor() {
    super(...arguments);
    M(this, "lastUpdatedCenter", new tn(0, 0));
    /**
     * Update the camera location to center on the current position
     *
     * @param {Position} position the Geolocation API Position
     * @private
     */
    M(this, "_updateCamera", (t) => {
      var c, p;
      const n = new tn(t.coords.longitude, t.coords.latitude), a = t.coords.accuracy, i = {
        bearing: this._map.getBearing(),
        ...this.options.fitBoundsOptions,
        linear: !0
      }, s = this._map.getZoom();
      s > (((p = (c = this.options) == null ? void 0 : c.fitBoundsOptions) == null ? void 0 : p.maxZoom) ?? 30) && (i.zoom = s), this._map.fitBounds(Es.fromLngLat(n, a), i, {
        geolocateSource: !0
        // tag this camera change so it won't cause the control to change to background state
      });
      let l = !1;
      const u = () => {
        l = !0;
      };
      this._map.once("click", u), this._map.once("dblclick", u), this._map.once("dragstart", u), this._map.once("mousedown", u), this._map.once("touchstart", u), this._map.once("wheel", u), this._map.once("moveend", () => {
        this._map.off("click", u), this._map.off("dblclick", u), this._map.off("dragstart", u), this._map.off("mousedown", u), this._map.off("touchstart", u), this._map.off("wheel", u), !l && (this.lastUpdatedCenter = this._map.getCenter());
      });
    });
    M(this, "_finishSetupUI", (t) => {
      if (this._map) {
        if (t === !1) {
          const n = this._map._getUIString("GeolocateControl.LocationNotAvailable");
          this._geolocateButton.disabled = !0, this._geolocateButton.title = n, this._geolocateButton.setAttribute("aria-label", n);
        } else {
          const n = this._map._getUIString("GeolocateControl.FindMyLocation");
          this._geolocateButton.disabled = !1, this._geolocateButton.title = n, this._geolocateButton.setAttribute("aria-label", n);
        }
        this.options.trackUserLocation && (this._geolocateButton.setAttribute("aria-pressed", "false"), this._watchState = "OFF"), this.options.showUserLocation && (this._dotElement = _e("div", "maplibregl-user-location-dot"), this._userLocationDotMarker = new en({ element: this._dotElement }), this._circleElement = _e("div", "maplibregl-user-location-accuracy-circle"), this._accuracyCircleMarker = new en({
          element: this._circleElement,
          pitchAlignment: "map"
        }), this.options.trackUserLocation && (this._watchState = "OFF"), this._map.on("move", this._onZoom)), this._geolocateButton.addEventListener("click", this.trigger.bind(this)), this._setup = !0, this.options.trackUserLocation && this._map.on("moveend", (n) => {
          const a = n.originalEvent && n.originalEvent.type === "resize", o = this.lastUpdatedCenter.distanceTo(this._map.getCenter());
          !n.geolocateSource && this._watchState === "ACTIVE_LOCK" && !a && o > 1 && (this._watchState = "BACKGROUND", this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-background"), this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active"), this.fire(new Event("trackuserlocationend")));
        });
      }
    });
    M(this, "_onZoom", () => {
      this.options.showUserLocation && this.options.showAccuracyCircle && this._updateCircleRadius();
    });
  }
  _updateCircleRadius() {
    if (this._watchState !== "BACKGROUND" && this._watchState !== "ACTIVE_LOCK")
      return;
    const t = [
      this._lastKnownPosition.coords.longitude,
      this._lastKnownPosition.coords.latitude
    ], n = this._map.project(t), a = this._map.unproject([n.x, n.y]), o = this._map.unproject([n.x + 20, n.y]), i = a.distanceTo(o) / 20, s = Math.ceil(2 * this._accuracy / i);
    this._circleElement.style.width = `${s}px`, this._circleElement.style.height = `${s}px`;
  }
}
var G, X, de, ye, K, We, q, ta, W, ra;
class Bt {
  constructor(e, t) {
    fe(this, q);
    fe(this, G);
    M(this, "map");
    fe(this, X);
    fe(this, de);
    fe(this, ye);
    fe(this, K, !1);
    fe(this, We);
    e.style !== void 0 && ve(this, K, !0), ve(this, G, {
      // set defaults
      zoomAdjust: -4,
      position: "top-right",
      // inherit map options
      ...t,
      // override any lingering control options
      forceNoAttributionControl: !0,
      attributionControl: !1,
      navigationControl: !1,
      geolocateControl: !1,
      maptilerLogo: !1,
      minimap: !1,
      hash: !1,
      pitchAdjust: !1,
      // override map options with new user defined minimap options
      ...e,
      containerStyle: {
        border: "1px solid #000",
        width: "400px",
        height: "300px",
        ...e.containerStyle ?? {}
      }
    }), e.lockZoom !== void 0 && (T(this, G).minZoom = e.lockZoom, T(this, G).maxZoom = e.lockZoom);
  }
  setStyle(e, t) {
    T(this, K) || this.map.setStyle(e, t), V(this, q, W).call(this);
  }
  addLayer(e, t) {
    return T(this, K) || this.map.addLayer(e, t), V(this, q, W).call(this), this.map;
  }
  moveLayer(e, t) {
    return T(this, K) || this.map.moveLayer(e, t), V(this, q, W).call(this), this.map;
  }
  removeLayer(e) {
    return T(this, K) || this.map.removeLayer(e), V(this, q, W).call(this), this;
  }
  setLayerZoomRange(e, t, n) {
    return T(this, K) || this.map.setLayerZoomRange(e, t, n), V(this, q, W).call(this), this;
  }
  setFilter(e, t, n) {
    return T(this, K) || this.map.setFilter(e, t, n), V(this, q, W).call(this), this;
  }
  setPaintProperty(e, t, n, a) {
    return T(this, K) || this.map.setPaintProperty(e, t, n, a), V(this, q, W).call(this), this;
  }
  setLayoutProperty(e, t, n, a) {
    return T(this, K) || this.map.setLayoutProperty(e, t, n, a), V(this, q, W).call(this), this;
  }
  setGlyphs(e, t) {
    return T(this, K) || this.map.setGlyphs(e, t), V(this, q, W).call(this), this;
  }
  onAdd(e) {
    ve(this, X, e), ve(this, de, _e("div", "maplibregl-ctrl maplibregl-ctrl-group"));
    for (const [t, n] of Object.entries(T(this, G).containerStyle))
      T(this, de).style.setProperty(t, n);
    return T(this, G).container = T(this, de), T(this, G).zoom = e.getZoom() + T(this, G).zoomAdjust, this.map = new _s(T(this, G)), this.map.once("style.load", () => {
      this.map.resize();
    }), this.map.once("load", () => {
      V(this, q, ta).call(this, T(this, G).parentRect), ve(this, We, V(this, q, ra).call(this));
    }), T(this, de);
  }
  onRemove() {
    var e;
    (e = T(this, We)) == null || e.call(this), mn(T(this, de));
  }
}
G = new WeakMap(), X = new WeakMap(), de = new WeakMap(), ye = new WeakMap(), K = new WeakMap(), We = new WeakMap(), q = new WeakSet(), ta = function(e) {
  e === void 0 || e.linePaint === void 0 && e.fillPaint === void 0 || (ve(this, ye, {
    type: "Feature",
    properties: {
      name: "parentRect"
    },
    geometry: {
      type: "Polygon",
      coordinates: [[[], [], [], [], []]]
    }
  }), this.map.addSource("parentRect", {
    type: "geojson",
    data: T(this, ye)
  }), (e.lineLayout !== void 0 || e.linePaint !== void 0) && this.map.addLayer({
    id: "parentRectOutline",
    type: "line",
    source: "parentRect",
    layout: {
      ...e.lineLayout
    },
    paint: {
      "line-color": "#FFF",
      "line-width": 1,
      "line-opacity": 0.85,
      ...e.linePaint
    }
  }), e.fillPaint !== void 0 && this.map.addLayer({
    id: "parentRectFill",
    type: "fill",
    source: "parentRect",
    layout: {},
    paint: {
      "fill-color": "#08F",
      "fill-opacity": 0.135,
      ...e.fillPaint
    }
  }), V(this, q, W).call(this));
}, W = function() {
  if (T(this, ye) === void 0) return;
  const { devicePixelRatio: e } = window, t = T(this, X).getCanvas(), n = t.width / e, a = t.height / e, o = T(this, X).unproject.bind(T(this, X)), i = o([0, 0]), s = o([n, 0]), l = o([0, a]), u = o([n, a]);
  T(this, ye).geometry.coordinates = [
    [l.toArray(), u.toArray(), s.toArray(), i.toArray(), l.toArray()]
  ], this.map.getSource("parentRect").setData(T(this, ye));
}, ra = function() {
  const { pitchAdjust: e } = T(this, G), t = () => {
    i("parent");
  }, n = () => {
    i("minimap");
  }, a = () => {
    T(this, X).on("move", t), this.map.on("move", n);
  }, o = () => {
    T(this, X).off("move", t), this.map.off("move", n);
  }, i = (s) => {
    o();
    const l = s === "parent" ? T(this, X) : this.map, u = s === "parent" ? this.map : T(this, X), c = l.getCenter(), p = l.getZoom() + T(this, G).zoomAdjust * (s === "parent" ? 1 : -1), m = l.getBearing(), f = l.getPitch();
    u.jumpTo({
      center: c,
      zoom: p,
      bearing: m,
      pitch: e ? f : 0
    }), V(this, q, W).call(this), a();
  };
  return a(), () => {
    o();
  };
};
const Ms = {
  POINT: "POINT",
  COUNTRY: "COUNTRY"
};
class _s extends x.Map {
  constructor(t) {
    lo(t.container), t.apiKey && (B.apiKey = t.apiKey);
    const { style: n, requiresUrlMonitoring: a, isFallback: o } = Qr(t.style);
    o && console.warn(
      "Invalid style. A style must be a valid URL to a style.json, a JSON string representing a valid StyleSpecification or a valid StyleSpecification object. Fallback to default MapTiler style."
    ), B.apiKey || console.warn("MapTiler Cloud API key is not set. Visit https://maptiler.com and try Cloud for free!");
    const i = location.hash;
    let s = {
      compact: !1
    };
    t.customAttribution ? s.customAttribution = t.customAttribution : t.attributionControl && typeof t.attributionControl == "object" && (s = {
      ...s,
      ...t.attributionControl
    });
    const l = {
      ...t,
      style: n,
      maplibreLogo: !1,
      transformRequest: zr(t.transformRequest),
      attributionControl: t.forceNoAttributionControl === !0 ? !1 : s
    };
    delete l.style;
    super(l);
    M(this, "isTerrainEnabled", !1);
    M(this, "terrainExaggeration", 1);
    M(this, "primaryLanguage");
    M(this, "terrainGrowing", !1);
    M(this, "terrainFlattening", !1);
    M(this, "minimap");
    M(this, "forceLanguageUpdate");
    M(this, "languageAlwaysBeenStyle");
    M(this, "isReady", !1);
    M(this, "terrainAnimationDuration", 1e3);
    M(this, "monitoredStyleUrls");
    M(this, "styleInProcess", !1);
    this.setStyle(n), a && this.monitorStyleUrl(n);
    const u = () => {
      let d = "The distant style could not be loaded.";
      this.getStyle() ? d += "Leaving the style as is." : (this.setStyle(je.STREETS), d += `Loading default MapTiler Cloud style "${je.STREETS.getDefaultVariant().getId()}" as a fallback.`), console.warn(d);
    };
    this.on("style.load", () => {
      this.styleInProcess = !1;
    }), this.on("error", (d) => {
      if (d.error instanceof Ca) {
        const b = d.error.url, w = new URL(b);
        w.search = "";
        const v = w.href;
        this.monitoredStyleUrls.has(v) && (this.monitoredStyleUrls.delete(v), u());
        return;
      }
      if (this.styleInProcess)
        return u();
    }), B.caching && !Ht && console.warn(
      "The cache API is only available in secure contexts. More info at https://developer.mozilla.org/en-US/docs/Web/API/Cache"
    ), B.caching && Ht && no(), this.primaryLanguage = t.language ?? B.primaryLanguage, this.forceLanguageUpdate = !(this.primaryLanguage === I.STYLE || this.primaryLanguage === I.STYLE_LOCK), this.languageAlwaysBeenStyle = this.primaryLanguage === I.STYLE, this.terrainExaggeration = t.terrainExaggeration ?? this.terrainExaggeration, this.once("styledata", async () => {
      if (!t.geolocate || t.center || t.hash && i)
        return;
      try {
        if (t.geolocate === Ms.COUNTRY) {
          await this.fitToIpBounds();
          return;
        }
      } catch (b) {
        console.warn(b.message);
      }
      let d;
      try {
        await this.centerOnIpPoint(t.zoom), d = this.getCameraHash();
      } catch (b) {
        console.warn(b.message);
      }
      (await navigator.permissions.query({
        name: "geolocation"
      })).state === "granted" && navigator.geolocation.getCurrentPosition(
        // success callback
        (b) => {
          d === this.getCameraHash() && (this.terrain ? this.easeTo({
            center: [b.coords.longitude, b.coords.latitude],
            zoom: t.zoom || 12,
            duration: 2e3
          }) : this.once("terrain", () => {
            this.easeTo({
              center: [b.coords.longitude, b.coords.latitude],
              zoom: t.zoom || 12,
              duration: 2e3
            });
          }));
        },
        // error callback
        null,
        // options
        {
          maximumAge: 24 * 3600 * 1e3,
          // a day in millisec
          timeout: 5e3,
          // milliseconds
          enableHighAccuracy: !1
        }
      );
    }), this.on("styledata", () => {
      this.setPrimaryLanguage(this.primaryLanguage);
    }), this.on("styledata", () => {
      this.getTerrain() === null && this.isTerrainEnabled && this.enableTerrain(this.terrainExaggeration);
    }), this.once("load", async () => {
      let d = { logo: null };
      try {
        const y = Object.keys(this.style.sourceCaches).map((v) => this.getSource(v)).filter(
          (v) => v && "url" in v && typeof v.url == "string" && (v == null ? void 0 : v.url.includes("tiles.json"))
        ), b = new URL(y[0].url);
        b.searchParams.has("key") || b.searchParams.append("key", B.apiKey), d = await (await fetch(b.href)).json();
      } catch {
      }
      if (t.forceNoAttributionControl !== !0)
        if ("logo" in d && d.logo) {
          const y = d.logo;
          this.addControl(new $r({ logoURL: y }), t.logoPosition);
        } else t.maptilerLogo && this.addControl(new $r(), t.logoPosition);
      if (t.scaleControl) {
        const y = t.scaleControl === !0 || t.scaleControl === void 0 ? "bottom-right" : t.scaleControl, b = new yo({ unit: B.unit });
        this.addControl(b, y), B.on("unit", (w) => {
          b.setUnit(w);
        });
      }
      if (t.navigationControl !== !1) {
        const y = t.navigationControl === !0 || t.navigationControl === void 0 ? "top-right" : t.navigationControl;
        this.addControl(new Ts(), y);
      }
      if (t.geolocateControl !== !1) {
        const y = t.geolocateControl === !0 || t.geolocateControl === void 0 ? "top-right" : t.geolocateControl;
        this.addControl(
          // new maplibregl.GeolocateControl({
          new Is({
            positionOptions: {
              enableHighAccuracy: !0,
              maximumAge: 0,
              timeout: 6e3
            },
            fitBoundsOptions: {
              maxZoom: 15
            },
            trackUserLocation: !0,
            showAccuracyCircle: !0,
            showUserLocation: !0
          }),
          y
        );
      }
      if (t.terrainControl) {
        const y = t.terrainControl === !0 || t.terrainControl === void 0 ? "top-right" : t.terrainControl;
        this.addControl(new As(), y);
      }
      if (t.fullscreenControl) {
        const y = t.fullscreenControl === !0 || t.fullscreenControl === void 0 ? "top-right" : t.fullscreenControl;
        this.addControl(new mo({}), y);
      }
      this.isReady = !0, this.fire("ready", { target: this });
    });
    let c = !1, p = !1, m;
    this.once("ready", () => {
      c = !0, p && this.fire("loadWithTerrain", m);
    }), this.once("style.load", () => {
      const { minimap: d } = t;
      if (typeof d == "object") {
        const {
          zoom: y,
          center: b,
          style: w,
          language: v,
          apiKey: E,
          maptilerLogo: R,
          antialias: P,
          refreshExpiredTiles: te,
          maxBounds: ge,
          scrollZoom: Oe,
          minZoom: Xe,
          maxZoom: Qe,
          boxZoom: da,
          locale: ya,
          fadeDuration: ma,
          crossSourceCollisions: ha,
          clickTolerance: ga,
          bounds: va,
          fitBoundsOptions: ba,
          pixelRatio: wa,
          validateStyle: xa
        } = t;
        this.minimap = new Bt(d, {
          zoom: y,
          center: b,
          style: w,
          language: v,
          apiKey: E,
          container: "null",
          maptilerLogo: R,
          antialias: P,
          refreshExpiredTiles: te,
          maxBounds: ge,
          scrollZoom: Oe,
          minZoom: Xe,
          maxZoom: Qe,
          boxZoom: da,
          locale: ya,
          fadeDuration: ma,
          crossSourceCollisions: ha,
          clickTolerance: ga,
          bounds: va,
          fitBoundsOptions: ba,
          pixelRatio: wa,
          validateStyle: xa
        }), this.addControl(this.minimap, d.position ?? "bottom-left");
      } else d === !0 ? (this.minimap = new Bt({}, t), this.addControl(this.minimap, "bottom-left")) : d !== void 0 && d !== !1 && (this.minimap = new Bt({}, t), this.addControl(this.minimap, d));
    });
    const f = (d) => {
      d.terrain && (p = !0, m = {
        type: "loadWithTerrain",
        target: this,
        terrain: d.terrain
      }, this.off("terrain", f), c && this.fire("loadWithTerrain", m));
    };
    this.on("terrain", f), t.terrain && this.enableTerrain(t.terrainExaggeration ?? this.terrainExaggeration), this.once("load", () => {
      this.getCanvas().addEventListener("webglcontextlost", (d) => {
        console.warn(d), uo(t.container), this.fire("webglContextLost", { error: d });
      });
    });
  }
  /**
   * Set the duration (millisec) of the terrain animation for growing or flattening.
   * Must be positive. (Built-in default: `1000` milliseconds)
   */
  setTerrainAnimationDuration(t) {
    this.terrainAnimationDuration = Math.max(t, 0);
  }
  /**
   * Awaits for _this_ Map instance to be "loaded" and returns a Promise to the Map.
   * If _this_ Map instance is already loaded, the Promise is resolved directly,
   * otherwise, it is resolved as a result of the "load" event.
   * @returns
   */
  async onLoadAsync() {
    return new Promise((t) => {
      if (this.loaded())
        return t(this);
      this.once("load", () => {
        t(this);
      });
    });
  }
  /**
   * Awaits for _this_ Map instance to be "ready" and returns a Promise to the Map.
   * If _this_ Map instance is already ready, the Promise is resolved directly,
   * otherwise, it is resolved as a result of the "ready" event.
   * A map instance is "ready" when all the controls that can be managed by the contructor are
   * dealt with. This happens after the "load" event, due to the asynchronous nature
   * of some built-in controls.
   */
  async onReadyAsync() {
    return new Promise((t) => {
      if (this.isReady)
        return t(this);
      this.once("ready", () => {
        t(this);
      });
    });
  }
  /**
   * Awaits for _this_ Map instance to be "loaded" as well as with terrain being non-null for the first time
   * and returns a Promise to the Map.
   * If _this_ Map instance is already loaded with terrain, the Promise is resolved directly,
   * otherwise, it is resolved as a result of the "loadWithTerrain" event.
   * @returns
   */
  async onLoadWithTerrainAsync() {
    return new Promise((t) => {
      if (this.isReady && this.terrain)
        return t(this);
      this.once("loadWithTerrain", () => {
        t(this);
      });
    });
  }
  monitorStyleUrl(t) {
    typeof this.monitoredStyleUrls > "u" && (this.monitoredStyleUrls = /* @__PURE__ */ new Set());
    const n = new URL(t);
    n.search = "", this.monitoredStyleUrls.add(n.href);
  }
  /**
   * Update the style of the map.
   * Can be:
   * - a full style URL (possibly with API key)
   * - a shorthand with only the MapTIler style name (eg. `"streets-v2"`)
   * - a longer form with the prefix `"maptiler://"` (eg. `"maptiler://streets-v2"`)
   */
  setStyle(t, n) {
    var o;
    (o = this.minimap) == null || o.setStyle(t), this.forceLanguageUpdate = !0, this.once("idle", () => {
      this.forceLanguageUpdate = !1;
    });
    const a = Qr(t);
    if (a.requiresUrlMonitoring && this.monitorStyleUrl(a.style), a.isFallback) {
      if (this.getStyle())
        return console.warn(
          "Invalid style. A style must be a valid URL to a style.json, a JSON string representing a valid StyleSpecification or a valid StyleSpecification object. Keeping the curent style instead."
        ), this;
      console.warn(
        "Invalid style. A style must be a valid URL to a style.json, a JSON string representing a valid StyleSpecification or a valid StyleSpecification object. Fallback to default MapTiler style."
      );
    }
    return this.styleInProcess = !0, super.setStyle(a.style, n), this;
  }
  /**
   * Adds a [MapLibre style layer](https://maplibre.org/maplibre-style-spec/layers)
   * to the map's style.
   *
   * A layer defines how data from a specified source will be styled. Read more about layer types
   * and available paint and layout properties in the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/layers).
   *
   * @param layer - The layer to add,
   * conforming to either the MapLibre Style Specification's [layer definition](https://maplibre.org/maplibre-style-spec/layers) or,
   * less commonly, the {@link CustomLayerInterface} specification.
   * The MapLibre Style Specification's layer definition is appropriate for most layers.
   *
   * @param beforeId - The ID of an existing layer to insert the new layer before,
   * resulting in the new layer appearing visually beneath the existing layer.
   * If this argument is not specified, the layer will be appended to the end of the layers array
   * and appear visually above all other layers.
   *
   * @returns `this`
   */
  addLayer(t, n) {
    var a;
    return (a = this.minimap) == null || a.addLayer(t, n), super.addLayer(t, n);
  }
  /**
   * Moves a layer to a different z-position.
   *
   * @param id - The ID of the layer to move.
   * @param beforeId - The ID of an existing layer to insert the new layer before. When viewing the map, the `id` layer will appear beneath the `beforeId` layer. If `beforeId` is omitted, the layer will be appended to the end of the layers array and appear above all other layers on the map.
   * @returns `this`
   *
   * @example
   * Move a layer with ID 'polygon' before the layer with ID 'country-label'. The `polygon` layer will appear beneath the `country-label` layer on the map.
   * ```ts
   * map.moveLayer('polygon', 'country-label');
   * ```
   */
  moveLayer(t, n) {
    var a;
    return (a = this.minimap) == null || a.moveLayer(t, n), super.moveLayer(t, n);
  }
  /**
   * Removes the layer with the given ID from the map's style.
   *
   * An {@link ErrorEvent} will be fired if the image parameter is invald.
   *
   * @param id - The ID of the layer to remove
   * @returns `this`
   *
   * @example
   * If a layer with ID 'state-data' exists, remove it.
   * ```ts
   * if (map.getLayer('state-data')) map.removeLayer('state-data');
   * ```
   */
  removeLayer(t) {
    var n;
    return (n = this.minimap) == null || n.removeLayer(t), super.removeLayer(t);
  }
  /**
   * Sets the zoom extent for the specified style layer. The zoom extent includes the
   * [minimum zoom level](https://maplibre.org/maplibre-style-spec/layers/#minzoom)
   * and [maximum zoom level](https://maplibre.org/maplibre-style-spec/layers/#maxzoom))
   * at which the layer will be rendered.
   *
   * Note: For style layers using vector sources, style layers cannot be rendered at zoom levels lower than the
   * minimum zoom level of the _source layer_ because the data does not exist at those zoom levels. If the minimum
   * zoom level of the source layer is higher than the minimum zoom level defined in the style layer, the style
   * layer will not be rendered at all zoom levels in the zoom range.
   */
  setLayerZoomRange(t, n, a) {
    var o;
    return (o = this.minimap) == null || o.setLayerZoomRange(t, n, a), super.setLayerZoomRange(t, n, a);
  }
  /**
   * Sets the filter for the specified style layer.
   *
   * Filters control which features a style layer renders from its source.
   * Any feature for which the filter expression evaluates to `true` will be
   * rendered on the map. Those that are false will be hidden.
   *
   * Use `setFilter` to show a subset of your source data.
   *
   * To clear the filter, pass `null` or `undefined` as the second parameter.
   */
  setFilter(t, n, a) {
    var o;
    return (o = this.minimap) == null || o.setFilter(t, n, a), super.setFilter(t, n, a);
  }
  /**
   * Sets the value of a paint property in the specified style layer.
   *
   * @param layerId - The ID of the layer to set the paint property in.
   * @param name - The name of the paint property to set.
   * @param value - The value of the paint property to set.
   * Must be of a type appropriate for the property, as defined in the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/).
   * @param options - Options object.
   * @returns `this`
   * @example
   * ```ts
   * map.setPaintProperty('my-layer', 'fill-color', '#faafee');
   * ```
   */
  setPaintProperty(t, n, a, o) {
    var i;
    return (i = this.minimap) == null || i.setPaintProperty(t, n, a, o), super.setPaintProperty(t, n, a, o);
  }
  /**
   * Sets the value of a layout property in the specified style layer.
   * Layout properties define how the layer is styled.
   * Layout properties for layers of the same type are documented together.
   * Layers of different types have different layout properties.
   * See the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/) for the complete list of layout properties.
   * @param layerId - The ID of the layer to set the layout property in.
   * @param name - The name of the layout property to set.
   * @param value - The value of the layout property to set.
   * Must be of a type appropriate for the property, as defined in the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/).
   * @param options - Options object.
   * @returns `this`
   */
  setLayoutProperty(t, n, a, o) {
    var i;
    return (i = this.minimap) == null || i.setLayoutProperty(t, n, a, o), super.setLayoutProperty(t, n, a, o);
  }
  /**
   * Sets the value of the style's glyphs property.
   *
   * @param glyphsUrl - Glyph URL to set. Must conform to the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/glyphs/).
   * @param options - Options object.
   * @returns `this`
   * @example
   * ```ts
   * map.setGlyphs('https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf');
   * ```
   */
  setGlyphs(t, n) {
    var a;
    return (a = this.minimap) == null || a.setGlyphs(t, n), super.setGlyphs(t, n);
  }
  getStyleLanguage() {
    return !this.style.stylesheet.metadata || typeof this.style.stylesheet.metadata != "object" ? null : "maptiler:language" in this.style.stylesheet.metadata && typeof this.style.stylesheet.metadata["maptiler:language"] == "string" ? Ia(this.style.stylesheet.metadata["maptiler:language"]) : null;
  }
  /**
   * Define the primary language of the map. Note that not all the languages shorthands provided are available.
   */
  setLanguage(t) {
    var n, a;
    (a = (n = this.minimap) == null ? void 0 : n.map) == null || a.setLanguage(t), this.onStyleReady(() => {
      this.setPrimaryLanguage(t);
    });
  }
  /**
   * Define the primary language of the map. Note that not all the languages shorthands provided are available.
   */
  setPrimaryLanguage(t) {
    const n = this.getStyleLanguage(), a = Ma(t, I);
    if (!a) {
      console.warn(`The language "${a}" is not supported.`);
      return;
    }
    if (!(a.flag === I.STYLE.flag && n && (n.flag === I.AUTO.flag || n.flag === I.VISITOR.flag)) && (a.flag !== I.STYLE.flag && (this.languageAlwaysBeenStyle = !1), this.languageAlwaysBeenStyle || this.primaryLanguage === a && !this.forceLanguageUpdate))
      return;
    if (this.primaryLanguage.flag === I.STYLE_LOCK.flag) {
      console.warn(
        "The language cannot be changed because this map has been instantiated with the STYLE_LOCK language flag."
      );
      return;
    }
    this.primaryLanguage = a;
    let o = a;
    if (a.flag === I.STYLE.flag) {
      if (!n) {
        console.warn("The style has no default languages or has an invalid one.");
        return;
      }
      o = n;
    }
    let i = I.LOCAL.flag, s = `{${i}}`;
    o.flag === I.VISITOR.flag ? (i = Er().flag, s = [
      "case",
      ["all", ["has", i], ["has", I.LOCAL.flag]],
      [
        "case",
        ["==", ["get", i], ["get", I.LOCAL.flag]],
        ["get", I.LOCAL.flag],
        [
          "format",
          ["get", i],
          { "font-scale": 0.8 },
          `
`,
          ["get", I.LOCAL.flag],
          { "font-scale": 1.1 }
        ]
      ],
      ["get", I.LOCAL.flag]
    ]) : o.flag === I.VISITOR_ENGLISH.flag ? (i = I.ENGLISH.flag, s = [
      "case",
      ["all", ["has", i], ["has", I.LOCAL.flag]],
      [
        "case",
        ["==", ["get", i], ["get", I.LOCAL.flag]],
        ["get", I.LOCAL.flag],
        [
          "format",
          ["get", i],
          { "font-scale": 0.8 },
          `
`,
          ["get", I.LOCAL.flag],
          { "font-scale": 1.1 }
        ]
      ],
      ["get", I.LOCAL.flag]
    ]) : o.flag === I.AUTO.flag ? (i = Er().flag, s = ["case", ["has", i], ["get", i], ["get", I.LOCAL.flag]]) : o === I.LOCAL ? (i = I.LOCAL.flag, s = `{${i}}`) : (i = o.flag, s = ["case", ["has", i], ["get", i], ["get", I.LOCAL.flag]]);
    const { layers: l } = this.getStyle();
    for (const u of l) {
      if (u.type !== "symbol")
        continue;
      const c = u, p = this.getSource(c.source);
      if (!p || !("url" in p && typeof p.url == "string") || new URL(p.url).host !== H.maptilerApiHost)
        continue;
      const { id: f, layout: d } = c;
      if (!d || !("text-field" in d))
        continue;
      const y = this.getLayoutProperty(f, "text-field");
      typeof y == "string" && (y.toLowerCase().includes("ref") || y.toLowerCase().includes("housenumber")) || this.setLayoutProperty(f, "text-field", s);
    }
  }
  /**
   * Get the primary language
   * @returns
   */
  getPrimaryLanguage() {
    return this.primaryLanguage;
  }
  /**
   * Get the exaggeration factor applied to the terrain
   * @returns
   */
  getTerrainExaggeration() {
    return this.terrainExaggeration;
  }
  /**
   * Know if terrian is enabled or not
   * @returns
   */
  hasTerrain() {
    return this.isTerrainEnabled;
  }
  growTerrain(t) {
    if (!this.terrain)
      return;
    const n = performance.now(), a = this.terrain.exaggeration, o = t - a, i = () => {
      if (!this.terrain || this.terrainFlattening)
        return;
      const s = (performance.now() - n) / this.terrainAnimationDuration;
      if (s < 0.99) {
        const l = 1 - (1 - s) ** 4, u = a + l * o;
        this.terrain.exaggeration = u, requestAnimationFrame(i);
      } else
        this.terrainGrowing = !1, this.terrainFlattening = !1, this.terrain.exaggeration = t, this.fire("terrainAnimationStop", { terrain: this.terrain });
      this._elevationFreeze = !1, this.triggerRepaint();
    };
    !this.terrainGrowing && !this.terrainFlattening && this.fire("terrainAnimationStart", { terrain: this.terrain }), this.terrainGrowing = !0, this.terrainFlattening = !1, requestAnimationFrame(i);
  }
  /**
   * Enables the 3D terrain visualization
   */
  enableTerrain(t = this.terrainExaggeration) {
    if (t < 0) {
      console.warn("Terrain exaggeration cannot be negative.");
      return;
    }
    const n = async (o) => {
      !this.terrain || o.type !== "data" || o.dataType !== "source" || !("source" in o) || o.sourceId !== "maptiler-terrain" || o.source.type !== "raster-dem" || o.isSourceLoaded && (this.off("data", n), this.growTerrain(t));
    }, a = () => {
      this.isTerrainEnabled = !0, this.terrainExaggeration = t, this.on("data", n), this.addSource(H.terrainSourceId, {
        type: "raster-dem",
        url: H.terrainSourceURL
      }), this.setTerrain({
        source: H.terrainSourceId,
        exaggeration: 0
      });
    };
    if (this.getTerrain()) {
      this.isTerrainEnabled = !0, this.growTerrain(t);
      return;
    }
    this.loaded() || this.isTerrainEnabled ? a() : this.once("load", () => {
      this.getTerrain() && this.getSource(H.terrainSourceId) || a();
    });
  }
  /**
   * Disable the 3D terrain visualization
   */
  disableTerrain() {
    if (!this.terrain)
      return;
    this.isTerrainEnabled = !1;
    const t = performance.now(), n = this.terrain.exaggeration, a = () => {
      if (!this.terrain || this.terrainGrowing)
        return;
      const o = (performance.now() - t) / this.terrainAnimationDuration;
      if (this._elevationFreeze = !1, o < 0.99) {
        const i = (1 - o) ** 4, s = n * i;
        this.terrain.exaggeration = s, requestAnimationFrame(a);
      } else
        this.terrain.exaggeration = 0, this.terrainGrowing = !1, this.terrainFlattening = !1, this.setTerrain(), this.getSource(H.terrainSourceId) && this.removeSource(H.terrainSourceId), this.fire("terrainAnimationStop", { terrain: null });
      this.triggerRepaint();
    };
    !this.terrainGrowing && !this.terrainFlattening && this.fire("terrainAnimationStart", { terrain: this.terrain }), this.terrainGrowing = !1, this.terrainFlattening = !0, requestAnimationFrame(a);
  }
  /**
   * Sets the 3D terrain exageration factor.
   * If the terrain was not enabled prior to the call of this method,
   * the method `.enableTerrain()` will be called.
   * If `animate` is `true`, the terrain transformation will be animated in the span of 1 second.
   * If `animate` is `false`, no animated transition to the newly defined exaggeration.
   */
  setTerrainExaggeration(t, n = !0) {
    !n && this.terrain ? (this.terrainExaggeration = t, this.terrain.exaggeration = t, this.triggerRepaint()) : this.enableTerrain(t);
  }
  /**
   * Perform an action when the style is ready. It could be at the moment of calling this method
   * or later.
   */
  onStyleReady(t) {
    this.isStyleLoaded() ? t() : this.once("styledata", () => {
      t();
    });
  }
  async fitToIpBounds() {
    const t = await Tr.info();
    this.fitBounds(t.country_bounds, {
      duration: 0,
      padding: 100
    });
  }
  async centerOnIpPoint(t) {
    const n = await Tr.info();
    this.jumpTo({
      center: [(n == null ? void 0 : n.longitude) ?? 0, (n == null ? void 0 : n.latitude) ?? 0],
      zoom: t || 11
    });
  }
  getCameraHash() {
    const t = new Float32Array(5), n = this.getCenter();
    return t[0] = n.lng, t[1] = n.lat, t[2] = this.getZoom(), t[3] = this.getPitch(), t[4] = this.getBearing(), $a.fromUint8Array(new Uint8Array(t.buffer));
  }
  /**
   * Get the SDK config object.
   * This is convenient to dispatch the SDK configuration to externally built layers
   * that do not directly have access to the SDK configuration but do have access to a Map instance.
   */
  getSdkConfig() {
    return B;
  }
  /**
   * Get the MapTiler session ID. Convenient to dispatch to externaly built component
   * that do not directly have access to the SDK configuration but do have access to a Map instance.
   * @returns
   */
  getMaptilerSessionId() {
    return dn;
  }
  /**
   *  Updates the requestManager's transform request with a new function.
   *
   * @param transformRequest A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests.
   *    Expected to return an object with a `url` property and optionally `headers` and `credentials` properties
   *
   * @returns {Map} `this`
   *
   *  @example
   *  map.setTransformRequest((url: string, resourceType: string) => {});
   */
  setTransformRequest(t) {
    return super.setTransformRequest(zr(t)), this;
  }
}
function Sr(r) {
  if (typeof DOMParser < "u") {
    const e = new DOMParser().parseFromString(r, "application/xml");
    if (e.querySelector("parsererror"))
      throw new Error("The provided string is not valid XML");
    return e;
  }
  throw new Error("No XML parser found");
}
function na(r, e) {
  if (!r.hasChildNodes())
    return !1;
  for (const t of Array.from(r.childNodes)) {
    const n = t.nodeName;
    if (typeof n == "string" && n.trim().toLowerCase() === e.toLowerCase())
      return !0;
  }
  return !1;
}
function rn(r) {
  if (typeof XMLSerializer < "u")
    return new XMLSerializer().serializeToString(r);
  throw new Error("No XML serializer found");
}
function aa(r) {
  const e = typeof r == "string" ? Sr(r) : r;
  if (!na(e, "gpx"))
    throw new Error("The XML document is not valid GPX");
  const t = U(e, "trk"), n = U(e, "rte"), a = U(e, "wpt"), o = {
    type: "FeatureCollection",
    features: []
  };
  for (const i of Array.from(t)) {
    const s = Rs(i);
    s && o.features.push(s);
  }
  for (const i of Array.from(n)) {
    const s = Fs(i);
    s && o.features.push(s);
  }
  for (const i of Array.from(a))
    o.features.push(Ns(i));
  return o;
}
function oa(r, e) {
  let t = r;
  if (typeof t == "string" && (t = Sr(t)), !na(t, "kml"))
    throw new Error("The XML document is not valid KML");
  const n = {
    type: "FeatureCollection",
    features: []
  }, a = {}, o = {}, i = {}, s = U(t, "Placemark"), l = U(t, "Style"), u = U(t, "StyleMap");
  for (const c of Array.from(l)) {
    const p = an(e !== void 0 ? e(c) : rn(c)).toString(16);
    a[`#${Le(c, "id")}`] = p, o[p] = c;
  }
  for (const c of Array.from(u)) {
    a[`#${Le(c, "id")}`] = an(
      e !== void 0 ? e(c) : rn(c)
    ).toString(16);
    const p = U(c, "Pair"), m = {};
    for (const f of Array.from(p))
      m[z(k(f, "key")) ?? ""] = z(k(f, "styleUrl"));
    i[`#${Le(c, "id")}`] = m;
  }
  for (const c of Array.from(s))
    n.features = n.features.concat(Ps(c, a, o, i));
  return n;
}
function nn(r) {
  if (r === null) return ["#000000", 1];
  let e = "", t = 1, n = r;
  return n.substring(0, 1) === "#" && (n = n.substring(1)), (n.length === 6 || n.length === 3) && (e = n), n.length === 8 && (t = Number.parseInt(n.substring(0, 2), 16) / 255, e = `#${n.substring(6, 8)}${n.substring(4, 6)}${n.substring(2, 4)}`), [e ?? "#000000", t ?? 1];
}
function zs(r) {
  return la(r.split(" "));
}
function $s(r) {
  let e = U(r, "coord");
  const t = [], n = [];
  e.length === 0 && (e = U(r, "gx:coord"));
  for (const o of Array.from(e))
    t.push(zs(z(o) ?? ""));
  const a = U(r, "when");
  for (const o of Array.from(a)) n.push(z(o));
  return {
    coords: t,
    times: n
  };
}
function ot(r) {
  const e = ["Polygon", "LineString", "Point", "Track", "gx:Track"];
  let t, n, a, o, i;
  const s = [], l = [];
  if (k(r, "MultiGeometry") !== null)
    return ot(k(r, "MultiGeometry"));
  if (k(r, "MultiTrack") !== null)
    return ot(k(r, "MultiTrack"));
  if (k(r, "gx:MultiTrack") !== null)
    return ot(k(r, "gx:MultiTrack"));
  for (a = 0; a < e.length; a++)
    if (n = U(r, e[a]), n) {
      for (o = 0; o < n.length; o++)
        if (t = n[o], e[a] === "Point")
          s.push({
            type: "Point",
            coordinates: ua(z(k(t, "coordinates")) ?? "")
          });
        else if (e[a] === "LineString")
          s.push({
            type: "LineString",
            coordinates: sn(z(k(t, "coordinates")) ?? "")
          });
        else if (e[a] === "Polygon") {
          const u = U(t, "LinearRing"), c = [];
          for (i = 0; i < u.length; i++)
            c.push(sn(z(k(u[i], "coordinates")) ?? ""));
          s.push({
            type: "Polygon",
            coordinates: c
          });
        } else if (e[a] === "Track" || e[a] === "gx:Track") {
          const u = $s(t);
          s.push({
            type: "LineString",
            coordinates: u.coords
          }), u.times.length && l.push(u.times);
        }
    }
  return { geoms: s, coordTimes: l };
}
function Ps(r, e, t, n) {
  const a = ot(r), o = {}, i = z(k(r, "name")), s = z(k(r, "address")), l = z(k(r, "description")), u = k(r, "TimeSpan"), c = k(r, "TimeStamp"), p = k(r, "ExtendedData"), m = k(r, "visibility");
  let f, d = z(k(r, "styleUrl")), y = k(r, "LineStyle"), b = k(r, "PolyStyle");
  if (!a.geoms.length) return [];
  if (i && (o.name = i), s && (o.address = s), d) {
    d[0] !== "#" && (d = `#${d}`), o.styleUrl = d, e[d] && (o.styleHash = e[d]), n[d] && (o.styleMapHash = n[d], o.styleHash = e[n[d].normal ?? ""]);
    const v = t[o.styleHash ?? ""];
    if (v) {
      y || (y = k(v, "LineStyle")), b || (b = k(v, "PolyStyle"));
      const E = k(v, "IconStyle");
      if (E) {
        const R = k(E, "Icon");
        if (R) {
          const P = z(k(R, "href"));
          P && (o.icon = P);
        }
      }
    }
  }
  if (l && (o.description = l), u) {
    const v = z(k(u, "begin")), E = z(k(u, "end"));
    v && E && (o.timespan = { begin: v, end: E });
  }
  if (c !== null && (o.timestamp = z(k(c, "when")) ?? (/* @__PURE__ */ new Date()).toISOString()), y !== null) {
    const v = nn(z(k(y, "color"))), E = v[0], R = v[1], P = Number.parseFloat(z(k(y, "width")) ?? "");
    E && (o.stroke = E), Number.isNaN(R) || (o["stroke-opacity"] = R), Number.isNaN(P) || (o["stroke-width"] = P);
  }
  if (b) {
    const v = nn(z(k(b, "color"))), E = v[0], R = v[1], P = z(k(b, "fill")), te = z(k(b, "outline"));
    E && (o.fill = E), Number.isNaN(R) || (o["fill-opacity"] = R), P && (o["fill-opacity"] = P === "1" ? o["fill-opacity"] || 1 : 0), te && (o["stroke-opacity"] = te === "1" ? o["stroke-opacity"] || 1 : 0);
  }
  if (p) {
    const v = U(p, "Data"), E = U(p, "SimpleData");
    for (f = 0; f < v.length; f++)
      o[v[f].getAttribute("name") ?? ""] = z(k(v[f], "value")) ?? "";
    for (f = 0; f < E.length; f++)
      o[E[f].getAttribute("name") ?? ""] = z(E[f]) ?? "";
  }
  m !== null && (o.visibility = z(m) ?? ""), a.coordTimes.length !== 0 && (o.coordTimes = a.coordTimes.length === 1 ? a.coordTimes[0] : a.coordTimes);
  const w = {
    type: "Feature",
    geometry: a.geoms.length === 1 ? a.geoms[0] : {
      type: "GeometryCollection",
      geometries: a.geoms
    },
    properties: o
  };
  return Le(r, "id") && (w.id = Le(r, "id") ?? void 0), [w];
}
function ia(r, e) {
  const t = U(r, e), n = [], a = [];
  let o = [];
  const i = t.length;
  if (!(i < 2)) {
    for (let s = 0; s < i; s++) {
      const l = ca(t[s]);
      n.push(l.coordinates), l.time && a.push(l.time), (l.heartRate || o.length) && (o.length === 0 && (o = new Array(s).fill(null)), o.push(l.heartRate));
    }
    return {
      line: n,
      times: a,
      heartRates: o
    };
  }
}
function Rs(r) {
  const e = U(r, "trkseg"), t = [], n = [], a = [];
  let o;
  for (let s = 0; s < e.length; s++)
    if (o = ia(e[s], "trkpt"), o !== void 0 && (o.line && t.push(o.line), o.times && o.times.length && n.push(o.times), a.length || o.heartRates && o.heartRates.length)) {
      if (!a.length)
        for (let l = 0; l < s; l++)
          a.push(new Array(t[l].length).fill(null));
      o.heartRates && o.heartRates.length ? a.push(o.heartRates) : a.push(new Array(o.line.length).fill(null));
    }
  if (t.length === 0) return;
  const i = {
    ...kr(r),
    ...sa(k(r, "extensions"))
  };
  return n.length !== 0 && (i.coordTimes = t.length === 1 ? n[0] : n), a.length !== 0 && (i.heartRates = t.length === 1 ? a[0] : a), t.length === 1 ? {
    type: "Feature",
    properties: i,
    geometry: {
      type: "LineString",
      coordinates: t[0]
    }
  } : {
    type: "Feature",
    properties: i,
    geometry: {
      type: "MultiLineString",
      coordinates: t
    }
  };
}
function Fs(r) {
  const e = ia(r, "rtept");
  return e === void 0 ? void 0 : {
    type: "Feature",
    properties: {
      ...kr(r),
      ...sa(k(r, "extensions"))
    },
    geometry: {
      type: "LineString",
      coordinates: e.line
    }
  };
}
function Ns(r) {
  return {
    type: "Feature",
    properties: { ...kr(r), ...er(r, ["sym"]) },
    geometry: {
      type: "Point",
      coordinates: ca(r).coordinates
    }
  };
}
function sa(r) {
  const e = {};
  if (r) {
    const t = k(r, "line");
    if (t) {
      const n = z(k(t, "color")), a = Number.parseFloat(z(k(t, "opacity")) ?? "0"), o = Number.parseFloat(z(k(t, "width")) ?? "0");
      n && (e.stroke = n), Number.isNaN(a) || (e["stroke-opacity"] = a), Number.isNaN(o) || (e["stroke-width"] = o * 96 / 25.4);
    }
  }
  return e;
}
function kr(r) {
  const e = er(r, [
    "name",
    "cmt",
    "desc",
    "type",
    "time",
    "keywords"
  ]), t = U(r, "link");
  if (t.length !== 0) {
    e.links = [];
    for (const n of Array.from(t)) {
      const a = {
        href: Le(n, "href"),
        ...er(n, ["text", "type"])
      };
      e.links.push(a);
    }
  }
  return e;
}
function an(r) {
  let e = 0;
  if (!r || !r.length) return e;
  for (let t = 0; t < r.length; t++)
    e = (e << 5) - e + r.charCodeAt(t) | 0;
  return e;
}
function U(r, e) {
  return r.getElementsByTagName(e);
}
function Le(r, e) {
  return r.getAttribute(e);
}
function on(r, e) {
  return Number.parseFloat(Le(r, e) ?? "0");
}
function k(r, e) {
  const t = U(r, e);
  return t.length ? t[0] : null;
}
function Os(r) {
  return r.normalize && r.normalize(), r;
}
function la(r) {
  return r.map(Number.parseFloat).map((e) => Number.isNaN(e) ? null : e);
}
function z(r) {
  return r && Os(r), r && r.textContent;
}
function er(r, e) {
  const t = {};
  let n, a;
  for (a = 0; a < e.length; a++)
    n = k(r, e[a]), n && (t[e[a]] = z(n) ?? "");
  return t;
}
function ua(r) {
  return la(r.replace(/\s*/g, "").split(","));
}
function sn(r) {
  const e = r.replace(/^\s*|\s*$/g, "").split(/\s+/), t = [];
  for (const n of e) t.push(ua(n));
  return t;
}
function ca(r) {
  const e = [on(r, "lon"), on(r, "lat")], t = k(r, "ele"), n = k(r, "gpxtpx:hr") || k(r, "hr"), a = k(r, "time");
  let o;
  return t && (o = Number.parseFloat(z(t) ?? "0"), Number.isNaN(o) || e.push(o)), {
    coordinates: e,
    time: a ? z(a) : null,
    heartRate: n !== null ? Number.parseFloat(z(n) ?? "0") : null
  };
}
function Ds(r) {
  let e = r;
  try {
    typeof e == "string" && (e = Sr(e));
  } catch {
    return null;
  }
  try {
    return aa(e);
  } catch {
  }
  try {
    return oa(e);
  } catch {
  }
  return null;
}
function nt(r) {
  const e = r.toString(16);
  return e.length === 1 ? `0${e}` : e;
}
function js(r) {
  return `#${nt(r[0])}${nt(r[1])}${nt(r[2])}${r.length === 4 ? nt(r[3]) : ""}`;
}
class S extends Array {
  constructor(t = {}) {
    super();
    M(this, "min", 0);
    M(this, "max", 1);
    "min" in t && (this.min = t.min), "max" in t && (this.max = t.max), "stops" in t && this.setStops(t.stops, { clone: !1 });
  }
  /**
   * Converts a array-definition color ramp definition into a usable ColorRamp instance.
   * Note: units are not converted and may need to to be converted beforehand (eg. kelvin to centigrade)
   * @param cr
   * @returns
   */
  static fromArrayDefinition(t) {
    return new S({
      stops: t.map((n) => ({
        value: n[0],
        color: n[1]
      }))
    });
  }
  setStops(t, n = { clone: !0 }) {
    const a = n.clone ? this.clone() : this;
    a.length = 0;
    let o = Number.POSITIVE_INFINITY, i = Number.NEGATIVE_INFINITY;
    for (let s = 0; s < t.length; s += 1)
      o = Math.min(o, t[s].value), i = Math.max(i, t[s].value), a.push({
        value: t[s].value,
        color: t[s].color.slice()
        // we want to make sure we do a deep copy and not a reference
      });
    return a.sort((s, l) => s.value < l.value ? -1 : 1), this.min = o, this.max = i, a;
  }
  scale(t, n, a = { clone: !0 }) {
    const o = a.clone, i = this[0].value, l = this.at(-1).value - i, u = n - t, c = [];
    for (let p = 0; p < this.length; p += 1) {
      const d = (this[p].value - i) / l * u + t;
      o ? c.push({
        value: d,
        color: this[p].color.slice()
      }) : this[p].value = d;
    }
    return o ? new S({ stops: c }) : this;
  }
  // for some reason, I had to reimplement this
  at(t) {
    return t < 0 ? this[this.length + t] : this[t];
  }
  clone() {
    return new S({ stops: this.getRawColorStops() });
  }
  getRawColorStops() {
    const t = [];
    for (let n = 0; n < this.length; n += 1)
      t.push({ value: this[n].value, color: this[n].color });
    return t;
  }
  reverse(t = { clone: !0 }) {
    const n = t.clone ? this.clone() : this;
    for (let a = 0; a < ~~(n.length / 2); a += 1) {
      const o = n[a].color;
      n[a].color = n.at(-(a + 1)).color, n.at(-(a + 1)).color = o;
    }
    return n;
  }
  getBounds() {
    return { min: this.min, max: this.max };
  }
  getColor(t, n = { smooth: !0 }) {
    if (t <= this[0].value)
      return this[0].color;
    if (t >= this.at(-1).value)
      return this.at(-1).color;
    for (let a = 0; a < this.length - 1; a += 1) {
      if (t > this[a + 1].value)
        continue;
      const o = this[a].color;
      if (!n.smooth)
        return o.slice();
      const i = this[a].value, s = this[a + 1].value, l = this[a + 1].color, u = (s - t) / (s - i);
      return o.map(
        (c, p) => Math.round(c * u + l[p] * (1 - u))
      );
    }
    return [0, 0, 0];
  }
  /**
   * Get the color as an hexadecimal string
   */
  getColorHex(t, n = {
    smooth: !0,
    withAlpha: !1
  }) {
    return js(this.getColor(t, n));
  }
  /**
   * Get the color of the color ramp at a relative position in [0, 1]
   */
  getColorRelative(t, n = { smooth: !0 }) {
    const a = this.getBounds();
    return this.getColor(a.min + t * (a.max - a.min), n);
  }
  getCanvasStrip(t = {
    horizontal: !0,
    size: 512,
    smooth: !0
  }) {
    const n = document.createElement("canvas");
    n.width = t.horizontal ? t.size : 1, n.height = t.horizontal ? 1 : t.size;
    const a = n.getContext("2d");
    if (!a) throw new Error("Canvs context is missing");
    const o = a.getImageData(0, 0, n.width, n.height), i = o.data, s = t.size, l = this[0].value, p = (this.at(-1).value - l) / s;
    for (let m = 0; m < s; m += 1) {
      const f = this.getColor(l + m * p, {
        smooth: t.smooth
      });
      i[m * 4] = f[0], i[m * 4 + 1] = f[1], i[m * 4 + 2] = f[2], i[m * 4 + 3] = f.length > 3 ? f[3] : 255;
    }
    return a.putImageData(o, 0, 0), n;
  }
  /**
   * Apply a non-linear ressampling. This will create a new instance of ColorRamp with the same bounds.
   */
  resample(t, n = 15) {
    const a = this.getBounds(), o = this.scale(0, 1), i = 1 / (n - 1);
    let s;
    if (t === "ease-in-square")
      s = Array.from({ length: n }, (c, p) => {
        const m = p * i, f = m ** 2, d = o.getColor(f);
        return { value: m, color: d };
      });
    else if (t === "ease-out-square")
      s = Array.from({ length: n }, (c, p) => {
        const m = p * i, f = 1 - (1 - m) ** 2, d = o.getColor(f);
        return { value: m, color: d };
      });
    else if (t === "ease-out-sqrt")
      s = Array.from({ length: n }, (c, p) => {
        const m = p * i, f = m ** 0.5, d = o.getColor(f);
        return { value: m, color: d };
      });
    else if (t === "ease-in-sqrt")
      s = Array.from({ length: n }, (c, p) => {
        const m = p * i, f = 1 - (1 - m) ** 0.5, d = o.getColor(f);
        return { value: m, color: d };
      });
    else if (t === "ease-out-exp")
      s = Array.from({ length: n }, (c, p) => {
        const m = p * i, f = 1 - 2 ** (-10 * m), d = o.getColor(f);
        return { value: m, color: d };
      });
    else if (t === "ease-in-exp")
      s = Array.from({ length: n }, (c, p) => {
        const m = p * i, f = 2 ** (10 * m - 10), d = o.getColor(f);
        return { value: m, color: d };
      });
    else
      throw new Error("Invalid ressampling method.");
    return new S({ stops: s }).scale(a.min, a.max);
  }
  /**
   * Makes a clone of this color ramp that is fully transparant at the begining of their range
   */
  transparentStart() {
    const t = this.getRawColorStops();
    t.unshift({
      value: t[0].value,
      color: t[0].color.slice()
    }), t[1].value += 1e-3;
    for (const n of t)
      n.color.length === 3 && n.color.push(255);
    return t[0].color[3] = 0, new S({ stops: t });
  }
  /**
   * Check if this color ramp has a transparent start
   */
  hasTransparentStart() {
    return this[0].color.length === 4 && this[0].color[3] === 0;
  }
}
const pa = {
  /**
   * A fully transparent [0, 0, 0, 0] colorramp to hide data.
   * Defined in interval [0, 1], without unit.
   */
  NULL: new S({
    stops: [
      { value: 0, color: [0, 0, 0, 0] },
      { value: 1, color: [0, 0, 0, 0] }
    ]
  }),
  GRAY: new S({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic jet color ramp.
   * Defined in interval [0, 1], without unit.
   */
  JET: new S({
    stops: [
      { value: 0, color: [0, 0, 131] },
      { value: 0.125, color: [0, 60, 170] },
      { value: 0.375, color: [5, 255, 255] },
      { value: 0.625, color: [255, 255, 0] },
      { value: 0.875, color: [250, 0, 0] },
      { value: 1, color: [128, 0, 0] }
    ]
  }),
  /**
   * Classic HSV color ramp (hue, saturation, value).
   * Defined in interval [0, 1], without unit.
   */
  HSV: new S({
    stops: [
      { value: 0, color: [255, 0, 0] },
      { value: 0.169, color: [253, 255, 2] },
      { value: 0.173, color: [247, 255, 2] },
      { value: 0.337, color: [0, 252, 4] },
      { value: 0.341, color: [0, 252, 10] },
      { value: 0.506, color: [1, 249, 255] },
      { value: 0.671, color: [2, 0, 253] },
      { value: 0.675, color: [8, 0, 253] },
      { value: 0.839, color: [255, 0, 251] },
      { value: 0.843, color: [255, 0, 245] },
      { value: 1, color: [255, 0, 6] }
    ]
  }),
  /**
   * Classic hot color ramp.
   * Defined in interval [0, 1], without unit.
   */
  HOT: new S({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.3, color: [230, 0, 0] },
      { value: 0.6, color: [255, 210, 0] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic spring color ramp.
   * Defined in interval [0, 1], without unit.
   */
  SPRING: new S({
    stops: [
      { value: 0, color: [255, 0, 255] },
      { value: 1, color: [255, 255, 0] }
    ]
  }),
  /**
   * Classic summer color ramp.
   * Defined in interval [0, 1], without unit.
   */
  SUMMER: new S({
    stops: [
      { value: 0, color: [0, 128, 102] },
      { value: 1, color: [255, 255, 102] }
    ]
  }),
  /**
   * Classic autommn color ramp.
   * Defined in interval [0, 1], without unit.
   */
  AUTOMN: new S({
    stops: [
      { value: 0, color: [255, 0, 0] },
      { value: 1, color: [255, 255, 0] }
    ]
  }),
  /**
   * Classic winter color ramp.
   * Defined in interval [0, 1], without unit.
   */
  WINTER: new S({
    stops: [
      { value: 0, color: [0, 0, 255] },
      { value: 1, color: [0, 255, 128] }
    ]
  }),
  /**
   * Classic bone color ramp.
   * Defined in interval [0, 1], without unit.
   */
  BONE: new S({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.376, color: [84, 84, 116] },
      { value: 0.753, color: [169, 200, 200] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic copper color ramp.
   * Defined in interval [0, 1], without unit.
   */
  COPPER: new S({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.804, color: [255, 160, 102] },
      { value: 1, color: [255, 199, 127] }
    ]
  }),
  /**
   * Classic greys color ramp.
   * Defined in interval [0, 1], without unit.
   */
  GREYS: new S({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic yignbu color ramp (blue to light yellow).
   * Defined in interval [0, 1], without unit.
   */
  YIGNBU: new S({
    stops: [
      { value: 0, color: [8, 29, 88] },
      { value: 0.125, color: [37, 52, 148] },
      { value: 0.25, color: [34, 94, 168] },
      { value: 0.375, color: [29, 145, 192] },
      { value: 0.5, color: [65, 182, 196] },
      { value: 0.625, color: [127, 205, 187] },
      { value: 0.75, color: [199, 233, 180] },
      { value: 0.875, color: [237, 248, 217] },
      { value: 1, color: [255, 255, 217] }
    ]
  }),
  /**
   * Classic greens color ramp.
   * Defined in interval [0, 1], without unit.
   */
  GREENS: new S({
    stops: [
      { value: 0, color: [0, 68, 27] },
      { value: 0.125, color: [0, 109, 44] },
      { value: 0.25, color: [35, 139, 69] },
      { value: 0.375, color: [65, 171, 93] },
      { value: 0.5, color: [116, 196, 118] },
      { value: 0.625, color: [161, 217, 155] },
      { value: 0.75, color: [199, 233, 192] },
      { value: 0.875, color: [229, 245, 224] },
      { value: 1, color: [247, 252, 245] }
    ]
  }),
  /**
   * Classic yiorrd color ramp (red to light yellow).
   * Defined in interval [0, 1], without unit.
   */
  YIORRD: new S({
    stops: [
      { value: 0, color: [128, 0, 38] },
      { value: 0.125, color: [189, 0, 38] },
      { value: 0.25, color: [227, 26, 28] },
      { value: 0.375, color: [252, 78, 42] },
      { value: 0.5, color: [253, 141, 60] },
      { value: 0.625, color: [254, 178, 76] },
      { value: 0.75, color: [254, 217, 118] },
      { value: 0.875, color: [255, 237, 160] },
      { value: 1, color: [255, 255, 204] }
    ]
  }),
  /**
   * Classic blue-red color ramp.
   * Defined in interval [0, 1], without unit.
   */
  BLUERED: new S({
    stops: [
      { value: 0, color: [0, 0, 255] },
      { value: 1, color: [255, 0, 0] }
    ]
  }),
  /**
   * Classic rdbu color ramp.
   * Defined in interval [0, 1], without unit.
   */
  RDBU: new S({
    stops: [
      { value: 0, color: [5, 10, 172] },
      { value: 0.35, color: [106, 137, 247] },
      { value: 0.5, color: [190, 190, 190] },
      { value: 0.6, color: [220, 170, 132] },
      { value: 0.7, color: [230, 145, 90] },
      { value: 1, color: [178, 10, 28] }
    ]
  }),
  /**
   * Classic picnic color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PICNIC: new S({
    stops: [
      { value: 0, color: [0, 0, 255] },
      { value: 0.1, color: [51, 153, 255] },
      { value: 0.2, color: [102, 204, 255] },
      { value: 0.3, color: [153, 204, 255] },
      { value: 0.4, color: [204, 204, 255] },
      { value: 0.5, color: [255, 255, 255] },
      { value: 0.6, color: [255, 204, 255] },
      { value: 0.7, color: [255, 153, 255] },
      { value: 0.8, color: [255, 102, 204] },
      { value: 0.9, color: [255, 102, 102] },
      { value: 1, color: [255, 0, 0] }
    ]
  }),
  /**
   * Classic rainbow color ramp.
   * Defined in interval [0, 1], without unit.
   */
  RAINBOW: new S({
    stops: [
      { value: 0, color: [150, 0, 90] },
      { value: 0.125, color: [0, 0, 200] },
      { value: 0.25, color: [0, 25, 255] },
      { value: 0.375, color: [0, 152, 255] },
      { value: 0.5, color: [44, 255, 150] },
      { value: 0.625, color: [151, 255, 0] },
      { value: 0.75, color: [255, 234, 0] },
      { value: 0.875, color: [255, 111, 0] },
      { value: 1, color: [255, 0, 0] }
    ]
  }),
  /**
   * Classic Portland color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PORTLAND: new S({
    stops: [
      { value: 0, color: [12, 51, 131] },
      { value: 0.25, color: [10, 136, 186] },
      { value: 0.5, color: [242, 211, 56] },
      { value: 0.75, color: [242, 143, 56] },
      { value: 1, color: [217, 30, 30] }
    ]
  }),
  /**
   * Classic blackbody color ramp.
   * Defined in interval [0, 1], without unit.
   */
  BLACKBODY: new S({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.2, color: [230, 0, 0] },
      { value: 0.4, color: [230, 210, 0] },
      { value: 0.7, color: [255, 255, 255] },
      { value: 1, color: [160, 200, 255] }
    ]
  }),
  /**
   * Classic earth color ramp.
   * Defined in interval [0, 1], without unit.
   */
  EARTH: new S({
    stops: [
      { value: 0, color: [0, 0, 130] },
      { value: 0.1, color: [0, 180, 180] },
      { value: 0.2, color: [40, 210, 40] },
      { value: 0.4, color: [230, 230, 50] },
      { value: 0.6, color: [120, 70, 20] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic electric color ramp.
   * Defined in interval [0, 1], without unit.
   */
  ELECTRIC: new S({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.15, color: [30, 0, 100] },
      { value: 0.4, color: [120, 0, 100] },
      { value: 0.6, color: [160, 90, 0] },
      { value: 0.8, color: [230, 200, 0] },
      { value: 1, color: [255, 250, 220] }
    ]
  }),
  /**
   * Classic viridis color ramp.
   * Defined in interval [0, 1], without unit.
   */
  VIRIDIS: new S({
    stops: [
      { value: 0, color: [68, 1, 84] },
      { value: 0.13, color: [71, 44, 122] },
      { value: 0.25, color: [59, 81, 139] },
      { value: 0.38, color: [44, 113, 142] },
      { value: 0.5, color: [33, 144, 141] },
      { value: 0.63, color: [39, 173, 129] },
      { value: 0.75, color: [92, 200, 99] },
      { value: 0.88, color: [170, 220, 50] },
      { value: 1, color: [253, 231, 37] }
    ]
  }),
  /**
   * Classic inferno color ramp.
   * Defined in interval [0, 1], without unit.
   */
  INFERNO: new S({
    stops: [
      { value: 0, color: [0, 0, 4] },
      { value: 0.13, color: [31, 12, 72] },
      { value: 0.25, color: [85, 15, 109] },
      { value: 0.38, color: [136, 34, 106] },
      { value: 0.5, color: [186, 54, 85] },
      { value: 0.63, color: [227, 89, 51] },
      { value: 0.75, color: [249, 140, 10] },
      { value: 0.88, color: [249, 201, 50] },
      { value: 1, color: [252, 255, 164] }
    ]
  }),
  /**
   * Classic magma color ramp.
   * Defined in interval [0, 1], without unit.
   */
  MAGMA: new S({
    stops: [
      { value: 0, color: [0, 0, 4] },
      { value: 0.13, color: [28, 16, 68] },
      { value: 0.25, color: [79, 18, 123] },
      { value: 0.38, color: [129, 37, 129] },
      { value: 0.5, color: [181, 54, 122] },
      { value: 0.63, color: [229, 80, 100] },
      { value: 0.75, color: [251, 135, 97] },
      { value: 0.88, color: [254, 194, 135] },
      { value: 1, color: [252, 253, 191] }
    ]
  }),
  /**
   * Classic plasma color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PLASMA: new S({
    stops: [
      { value: 0, color: [13, 8, 135] },
      { value: 0.13, color: [75, 3, 161] },
      { value: 0.25, color: [125, 3, 168] },
      { value: 0.38, color: [168, 34, 150] },
      { value: 0.5, color: [203, 70, 121] },
      { value: 0.63, color: [229, 107, 93] },
      { value: 0.75, color: [248, 148, 65] },
      { value: 0.88, color: [253, 195, 40] },
      { value: 1, color: [240, 249, 33] }
    ]
  }),
  /**
   * Classic warm color ramp.
   * Defined in interval [0, 1], without unit.
   */
  WARM: new S({
    stops: [
      { value: 0, color: [125, 0, 179] },
      { value: 0.13, color: [172, 0, 187] },
      { value: 0.25, color: [219, 0, 170] },
      { value: 0.38, color: [255, 0, 130] },
      { value: 0.5, color: [255, 63, 74] },
      { value: 0.63, color: [255, 123, 0] },
      { value: 0.75, color: [234, 176, 0] },
      { value: 0.88, color: [190, 228, 0] },
      { value: 1, color: [147, 255, 0] }
    ]
  }),
  /**
   * Classic cool color ramp.
   * Defined in interval [0, 1], without unit.
   */
  COOL: new S({
    stops: [
      { value: 0, color: [125, 0, 179] },
      { value: 0.13, color: [116, 0, 218] },
      { value: 0.25, color: [98, 74, 237] },
      { value: 0.38, color: [68, 146, 231] },
      { value: 0.5, color: [0, 204, 197] },
      { value: 0.63, color: [0, 247, 146] },
      { value: 0.75, color: [0, 255, 88] },
      { value: 0.88, color: [40, 255, 8] },
      { value: 1, color: [147, 255, 0] }
    ]
  }),
  /**
   * Classic rainboz soft color ramp.
   * Defined in interval [0, 1], without unit.
   */
  RAINBOW_SOFT: new S({
    stops: [
      { value: 0, color: [125, 0, 179] },
      { value: 0.1, color: [199, 0, 180] },
      { value: 0.2, color: [255, 0, 121] },
      { value: 0.3, color: [255, 108, 0] },
      { value: 0.4, color: [222, 194, 0] },
      { value: 0.5, color: [150, 255, 0] },
      { value: 0.6, color: [0, 255, 55] },
      { value: 0.7, color: [0, 246, 150] },
      { value: 0.8, color: [50, 167, 222] },
      { value: 0.9, color: [103, 51, 235] },
      { value: 1, color: [124, 0, 186] }
    ]
  }),
  /**
   * Classic bathymetry color ramp.
   * Defined in interval [0, 1], without unit.
   */
  BATHYMETRY: new S({
    stops: [
      { value: 0, color: [40, 26, 44] },
      { value: 0.13, color: [59, 49, 90] },
      { value: 0.25, color: [64, 76, 139] },
      { value: 0.38, color: [63, 110, 151] },
      { value: 0.5, color: [72, 142, 158] },
      { value: 0.63, color: [85, 174, 163] },
      { value: 0.75, color: [120, 206, 163] },
      { value: 0.88, color: [187, 230, 172] },
      { value: 1, color: [253, 254, 204] }
    ]
  }),
  /**
   * Classic cdom color ramp.
   * Defined in interval [0, 1], without unit.
   */
  CDOM: new S({
    stops: [
      { value: 0, color: [47, 15, 62] },
      { value: 0.13, color: [87, 23, 86] },
      { value: 0.25, color: [130, 28, 99] },
      { value: 0.38, color: [171, 41, 96] },
      { value: 0.5, color: [206, 67, 86] },
      { value: 0.63, color: [230, 106, 84] },
      { value: 0.75, color: [242, 149, 103] },
      { value: 0.88, color: [249, 193, 135] },
      { value: 1, color: [254, 237, 176] }
    ]
  }),
  /**
   * Classic chlorophyll color ramp.
   * Defined in interval [0, 1], without unit.
   */
  CHLOROPHYLL: new S({
    stops: [
      { value: 0, color: [18, 36, 20] },
      { value: 0.13, color: [25, 63, 41] },
      { value: 0.25, color: [24, 91, 59] },
      { value: 0.38, color: [13, 119, 72] },
      { value: 0.5, color: [18, 148, 80] },
      { value: 0.63, color: [80, 173, 89] },
      { value: 0.75, color: [132, 196, 122] },
      { value: 0.88, color: [175, 221, 162] },
      { value: 1, color: [215, 249, 208] }
    ]
  }),
  /**
   * Classic density color ramp.
   * Defined in interval [0, 1], without unit.
   */
  DENSITY: new S({
    stops: [
      { value: 0, color: [54, 14, 36] },
      { value: 0.13, color: [89, 23, 80] },
      { value: 0.25, color: [110, 45, 132] },
      { value: 0.38, color: [120, 77, 178] },
      { value: 0.5, color: [120, 113, 213] },
      { value: 0.63, color: [115, 151, 228] },
      { value: 0.75, color: [134, 185, 227] },
      { value: 0.88, color: [177, 214, 227] },
      { value: 1, color: [230, 241, 241] }
    ]
  }),
  /**
   * Classic freesurface blue color ramp.
   * Defined in interval [0, 1], without unit.
   */
  FREESURFACE_BLUE: new S({
    stops: [
      { value: 0, color: [30, 4, 110] },
      { value: 0.13, color: [47, 14, 176] },
      { value: 0.25, color: [41, 45, 236] },
      { value: 0.38, color: [25, 99, 212] },
      { value: 0.5, color: [68, 131, 200] },
      { value: 0.63, color: [114, 156, 197] },
      { value: 0.75, color: [157, 181, 203] },
      { value: 0.88, color: [200, 208, 216] },
      { value: 1, color: [241, 237, 236] }
    ]
  }),
  /**
   * Classic freesurface red color ramp.
   * Defined in interval [0, 1], without unit.
   */
  FREESURFACE_RED: new S({
    stops: [
      { value: 0, color: [60, 9, 18] },
      { value: 0.13, color: [100, 17, 27] },
      { value: 0.25, color: [142, 20, 29] },
      { value: 0.38, color: [177, 43, 27] },
      { value: 0.5, color: [192, 87, 63] },
      { value: 0.63, color: [205, 125, 105] },
      { value: 0.75, color: [216, 162, 148] },
      { value: 0.88, color: [227, 199, 193] },
      { value: 1, color: [241, 237, 236] }
    ]
  }),
  /**
   * Classic oxygen color ramp.
   * Defined in interval [0, 1], without unit.
   */
  OXYGEN: new S({
    stops: [
      { value: 0, color: [64, 5, 5] },
      { value: 0.13, color: [106, 6, 15] },
      { value: 0.25, color: [144, 26, 7] },
      { value: 0.38, color: [168, 64, 3] },
      { value: 0.5, color: [188, 100, 4] },
      { value: 0.63, color: [206, 136, 11] },
      { value: 0.75, color: [220, 174, 25] },
      { value: 0.88, color: [231, 215, 44] },
      { value: 1, color: [248, 254, 105] }
    ]
  }),
  /**
   * Classic par color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PAR: new S({
    stops: [
      { value: 0, color: [51, 20, 24] },
      { value: 0.13, color: [90, 32, 35] },
      { value: 0.25, color: [129, 44, 34] },
      { value: 0.38, color: [159, 68, 25] },
      { value: 0.5, color: [182, 99, 19] },
      { value: 0.63, color: [199, 134, 22] },
      { value: 0.75, color: [212, 171, 35] },
      { value: 0.88, color: [221, 210, 54] },
      { value: 1, color: [225, 253, 75] }
    ]
  }),
  /**
   * Classic phase color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PHASE: new S({
    stops: [
      { value: 0, color: [145, 105, 18] },
      { value: 0.13, color: [184, 71, 38] },
      { value: 0.25, color: [186, 58, 115] },
      { value: 0.38, color: [160, 71, 185] },
      { value: 0.5, color: [110, 97, 218] },
      { value: 0.63, color: [50, 123, 164] },
      { value: 0.75, color: [31, 131, 110] },
      { value: 0.88, color: [77, 129, 34] },
      { value: 1, color: [145, 105, 18] }
    ]
  }),
  /**
   * Classic salinity color ramp.
   * Defined in interval [0, 1], without unit.
   */
  SALINITY: new S({
    stops: [
      { value: 0, color: [42, 24, 108] },
      { value: 0.13, color: [33, 50, 162] },
      { value: 0.25, color: [15, 90, 145] },
      { value: 0.38, color: [40, 118, 137] },
      { value: 0.5, color: [59, 146, 135] },
      { value: 0.63, color: [79, 175, 126] },
      { value: 0.75, color: [120, 203, 104] },
      { value: 0.88, color: [193, 221, 100] },
      { value: 1, color: [253, 239, 154] }
    ]
  }),
  /**
   * Classic temperature color ramp.
   * Defined in interval [0, 1], without unit.
   */
  TEMPERATURE: new S({
    stops: [
      { value: 0, color: [4, 35, 51] },
      { value: 0.13, color: [23, 51, 122] },
      { value: 0.25, color: [85, 59, 157] },
      { value: 0.38, color: [129, 79, 143] },
      { value: 0.5, color: [175, 95, 130] },
      { value: 0.63, color: [222, 112, 101] },
      { value: 0.75, color: [249, 146, 66] },
      { value: 0.88, color: [249, 196, 65] },
      { value: 1, color: [232, 250, 91] }
    ]
  }),
  /**
   * Classic turbidity color ramp.
   * Defined in interval [0, 1], without unit.
   */
  TURBIDITY: new S({
    stops: [
      { value: 0, color: [34, 31, 27] },
      { value: 0.13, color: [65, 50, 41] },
      { value: 0.25, color: [98, 69, 52] },
      { value: 0.38, color: [131, 89, 57] },
      { value: 0.5, color: [161, 112, 59] },
      { value: 0.63, color: [185, 140, 66] },
      { value: 0.75, color: [202, 174, 88] },
      { value: 0.88, color: [216, 209, 126] },
      { value: 1, color: [233, 246, 171] }
    ]
  }),
  /**
   * Classic velocity blue color ramp.
   * Defined in interval [0, 1], without unit.
   */
  VELOCITY_BLUE: new S({
    stops: [
      { value: 0, color: [17, 32, 64] },
      { value: 0.13, color: [35, 52, 116] },
      { value: 0.25, color: [29, 81, 156] },
      { value: 0.38, color: [31, 113, 162] },
      { value: 0.5, color: [50, 144, 169] },
      { value: 0.63, color: [87, 173, 176] },
      { value: 0.75, color: [149, 196, 189] },
      { value: 0.88, color: [203, 221, 211] },
      { value: 1, color: [254, 251, 230] }
    ]
  }),
  /**
   * Classic velocity green color ramp.
   * Defined in interval [0, 1], without unit.
   */
  VELOCITY_GREEN: new S({
    stops: [
      { value: 0, color: [23, 35, 19] },
      { value: 0.13, color: [24, 64, 38] },
      { value: 0.25, color: [11, 95, 45] },
      { value: 0.38, color: [39, 123, 35] },
      { value: 0.5, color: [95, 146, 12] },
      { value: 0.63, color: [152, 165, 18] },
      { value: 0.75, color: [201, 186, 69] },
      { value: 0.88, color: [233, 216, 137] },
      { value: 1, color: [255, 253, 205] }
    ]
  }),
  /**
   * Classic cube helix color ramp.
   * Defined in interval [0, 1], without unit.
   */
  CUBEHELIX: new S({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.07, color: [22, 5, 59] },
      { value: 0.13, color: [60, 4, 105] },
      { value: 0.2, color: [109, 1, 135] },
      { value: 0.27, color: [161, 0, 147] },
      { value: 0.33, color: [210, 2, 142] },
      { value: 0.4, color: [251, 11, 123] },
      { value: 0.47, color: [255, 29, 97] },
      { value: 0.53, color: [255, 54, 69] },
      { value: 0.6, color: [255, 85, 46] },
      { value: 0.67, color: [255, 120, 34] },
      { value: 0.73, color: [255, 157, 37] },
      { value: 0.8, color: [241, 191, 57] },
      { value: 0.87, color: [224, 220, 93] },
      { value: 0.93, color: [218, 241, 142] },
      { value: 1, color: [227, 253, 198] }
    ]
  }),
  /**
   * The cividis color ramp is color blind friendly.
   * Read more here https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0199239
   * Defined in interval [0, 1], without unit.
   */
  CIVIDIS: new S({
    stops: [
      { value: 0, color: [0, 32, 77, 255] },
      { value: 0.125, color: [5, 54, 110, 255] },
      { value: 0.25, color: [65, 77, 108, 255] },
      { value: 0.375, color: [97, 100, 111, 255] },
      { value: 0.5, color: [125, 124, 121, 255] },
      { value: 0.625, color: [156, 149, 120, 255] },
      { value: 0.75, color: [190, 175, 111, 255] },
      { value: 0.875, color: [225, 204, 94, 255] },
      { value: 1, color: [255, 235, 70, 255] }
    ]
  }),
  /**
   * Classic turbo color ramp.
   * This is a luminance-constant alternative to the jet, making it more
   * clor-blind friendly.
   * Defined in interval [0, 1], without unit.
   */
  TURBO: new S({
    stops: [
      { value: 0, color: [48, 18, 59, 255] },
      { value: 0.125, color: [70, 107, 227, 255] },
      { value: 0.25, color: [40, 187, 236, 255] },
      { value: 0.375, color: [49, 242, 153, 255] },
      { value: 0.5, color: [162, 252, 60, 255] },
      { value: 0.625, color: [237, 208, 58, 255] },
      { value: 0.75, color: [251, 128, 34, 255] },
      { value: 0.875, color: [210, 49, 5, 255] },
      { value: 1, color: [122, 4, 3, 255] }
    ]
  }),
  /**
   * The rocket color ramp is perceptually uniform, which makes it more
   * color bliend friendly than the classic magma color ramp.
   * Defined in interval [0, 1], without unit.
   */
  ROCKET: new S({
    stops: [
      { value: 0, color: [250, 235, 221, 0] },
      { value: 0.133, color: [250, 235, 221, 255] },
      { value: 0.266, color: [246, 170, 130, 255] },
      { value: 0.4, color: [240, 96, 67, 255] },
      { value: 0.533, color: [203, 27, 79, 255] },
      { value: 0.666, color: [132, 30, 90, 255] },
      { value: 0.8, color: [63, 27, 68, 255] },
      { value: 1, color: [3, 5, 26, 255] }
    ]
  }),
  /**
   * The mako color ramp is perceptually uniform and can be seen as
   * a color blind friendly alternative to bathymetry or yignbu.
   * Defined in interval [0, 1], without unit.
   */
  MAKO: new S({
    stops: [
      { value: 0, color: [11, 4, 5, 255] },
      { value: 0.125, color: [43, 28, 53, 255] },
      { value: 0.25, color: [62, 53, 107, 255] },
      { value: 0.375, color: [59, 86, 152, 255] },
      { value: 0.5, color: [53, 123, 162, 255] },
      { value: 0.625, color: [53, 158, 170, 255] },
      { value: 0.75, color: [73, 193, 173, 255] },
      { value: 0.875, color: [150, 221, 181, 255] },
      { value: 1, color: [222, 245, 229, 255] }
    ]
  })
};
async function qs(r, e = {}) {
  const t = e.download ?? !1, n = await Us(r);
  if (t) {
    const a = e.filename ?? "maptiler_screenshot.png", o = document.createElement("a");
    o.style.display = "none", document.body.appendChild(o), o.href = URL.createObjectURL(n), o.download = a, o.click(), setTimeout(() => {
      document.body.removeChild(o), URL.revokeObjectURL(o.href);
    }, 0);
  }
  return n;
}
function Us(r) {
  return new Promise((e, t) => {
    r.redraw(), r.once("idle", () => {
      r.getCanvas().toBlob((n) => {
        if (!n)
          return t(Error("Screenshot could not be created."));
        e(n);
      }, "image/png");
    });
  });
}
const ln = [
  // https://colorhunt.co/palette/1d5b79468b97ef6262f3aa60
  ["#1D5B79", "#468B97", "#EF6262", "#F3AA60"],
  // https://colorhunt.co/palette/614bc333bbc585e6c5c8ffe0
  ["#614BC3", "#33BBC5", "#85E6C5", "#C8FFE0"],
  // https://colorhunt.co/palette/4619597a316fcd6688aed8cc
  ["#461959", "#7A316F", "#CD6688", "#AED8CC"],
  // https://colorhunt.co/palette/0079ff00dfa2f6fa70ff0060
  ["#0079FF", "#00DFA2", "#F6FA70", "#FF0060"],
  //https://colorhunt.co/palette/39b5e0a31acbff78f0f5ea5a
  ["#39B5E0", "#A31ACB", "#FF78F0", "#F5EA5A"],
  // https://colorhunt.co/palette/37e2d5590696c70a80fbcb0a
  ["#37E2D5", "#590696", "#C70A80", "#FBCB0A"],
  // https://colorhunt.co/palette/ffd36efff56d99ffcd9fb4ff
  ["#FFD36E", "#FFF56D", "#99FFCD", "#9FB4FF"],
  // https://colorhunt.co/palette/00ead3fff5b7ff449f005f99
  ["#00EAD3", "#FFF5B7", "#FF449F", "#005F99"],
  // https://colorhunt.co/palette/10a19d540375ff7000ffbf00
  ["#10A19D", "#540375", "#FF7000", "#FFBF00"]
];
function Cr() {
  return ln[~~(Math.random() * ln.length)][~~(Math.random() * 4)];
}
function It() {
  return `maptiler_source_${hn()}`;
}
function Mt() {
  return `maptiler_layer_${hn()}`;
}
function un(r, e) {
  if (e <= r[0].zoom)
    return r[0].value;
  if (e >= r[r.length - 1].zoom)
    return r[r.length - 1].value;
  for (let t = 0; t < r.length - 1; t += 1)
    if (e >= r[t].zoom && e < r[t + 1].zoom) {
      const n = r[t + 1].zoom - r[t].zoom, a = (e - r[t].zoom) / n;
      return a * r[t + 1].value + (1 - a) * r[t].value;
    }
  return 0;
}
function Ae(r) {
  return ["interpolate", ["linear"], ["zoom"], ...r.flatMap((e) => [e.zoom, e.value])];
}
function $(r) {
  return ["interpolate", ["linear"], ["zoom"], ...r.flatMap((e) => [e.zoom, e.value])];
}
function Bs(r, e) {
  if (typeof e == "number" && typeof r == "number")
    return 2 * e + r;
  if (typeof e == "number" && Array.isArray(r))
    return ["interpolate", ["linear"], ["zoom"], ...r.flatMap((t) => [t.zoom, 2 * e + t.value])];
  if (typeof r == "number" && Array.isArray(e))
    return ["interpolate", ["linear"], ["zoom"], ...e.flatMap((t) => [t.zoom, 2 * t.value + r])];
  if (Array.isArray(r) && Array.isArray(e)) {
    const t = Array.from(
      /* @__PURE__ */ new Set([...r.map((n) => n.zoom), ...e.map((n) => n.zoom)])
    ).sort((n, a) => n < a ? -1 : 1);
    return [
      "interpolate",
      ["linear"],
      ["zoom"],
      ...t.flatMap((n) => [n, 2 * un(e, n) + un(r, n)])
    ];
  }
  return 0;
}
function Vs(r, e) {
  return ["interpolate", ["linear"], ["get", e], ...r.flatMap((t) => [t.propertyValue, t.value])];
}
function fa(r) {
  const e = r.trimStart(), t = `${e}${" ".repeat(r.length - e.length)}`, n = Array.from(t);
  if (!n.every((s) => s === " " || s === "_"))
    throw new Error("A dash pattern must be composed only of whitespace and underscore characters.");
  if (!(n.some((s) => s === "_") && n.some((s) => s === " ")))
    throw new Error("A dash pattern must contain at least one underscore and one whitespace character");
  const i = [1];
  for (let s = 1; s < n.length; s += 1) {
    const l = n[s - 1], u = n[s];
    l === u ? i[i.length - 1] += 1 : i.push(1);
  }
  return i;
}
function cn(r, e) {
  return ["interpolate", ["linear"], ["get", e], ...r.flatMap((t) => [t.value, t.color])];
}
function pn(r, e, t = !0) {
  return t ? [
    "interpolate",
    ["linear"],
    ["zoom"],
    0,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius * 0.025])],
    2,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius * 0.05])],
    4,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius * 0.1])],
    8,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius * 0.25])],
    16,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius])]
  ] : ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius])];
}
function Gs(r, e, t = !0) {
  return t ? [
    "interpolate",
    ["linear"],
    ["zoom"],
    0,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value * 0.025])],
    2,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value * 0.05])],
    4,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value * 0.1])],
    8,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value * 0.25])],
    16,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value])]
  ] : ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value])];
}
function fn(r, e) {
  return r.every((t) => t.color[3] === r[0].color[3]) ? r[0].color[3] ? r[0].color[3] / 255 : 1 : [
    "interpolate",
    ["linear"],
    ["get", e],
    ...r.getRawColorStops().flatMap((t) => {
      const n = t.value, a = t.color;
      return [n, a.length === 4 ? a[3] / 255 : 1];
    })
  ];
}
function Hs(r, e = 10) {
  return [
    "interpolate",
    ["linear"],
    ["heatmap-density"],
    ...Array.from({ length: e + 1 }, (t, n) => {
      const a = n / e;
      return [a, r.getColorHex(a)];
    }).flat()
  ];
}
async function Ks(r, e, t = {}) {
  var a, o;
  if (!e.sourceId && !e.data)
    throw new Error("Creating a polyline layer requires an existing .sourceId or a valid .data property");
  let n = e.data;
  if (typeof n == "string") {
    if (mt(n))
      n = `https://api.maptiler.com/data/${e.data}/features.json?key=${B.apiKey}`;
    else if (((a = n.split(".").pop()) == null ? void 0 : a.toLowerCase().trim()) === "gpx") {
      const s = await (await fetch(n, t)).text();
      n = aa(s);
    } else if (((o = n.split(".").pop()) == null ? void 0 : o.toLowerCase().trim()) === "kml") {
      const s = await (await fetch(n, t)).text();
      n = oa(s);
    } else {
      const i = io(n) ?? Ds(n);
      i && (n = i);
    }
    if (!n)
      throw new Error("Polyline data was provided as string but is incompatible with valid formats.");
  }
  return Zs(r, {
    ...e,
    data: n
  });
}
function Zs(r, e) {
  if (e.layerId && r.getLayer(e.layerId))
    throw new Error(`A layer already exists with the layer id: ${e.layerId}`);
  const t = e.sourceId ?? It(), n = e.layerId ?? Mt(), a = {
    polylineLayerId: n,
    polylineOutlineLayerId: "",
    polylineSourceId: t
  };
  e.data && !r.getSource(t) && r.addSource(t, {
    type: "geojson",
    data: e.data
  });
  const o = e.lineWidth ?? 3, i = e.lineColor ?? Cr(), s = e.lineOpacity ?? 1, l = e.lineBlur ?? 0, u = e.lineGapWidth ?? 0;
  let c = e.lineDashArray ?? null;
  const p = e.outlineWidth ?? 1, m = e.outlineColor ?? "#FFFFFF", f = e.outlineOpacity ?? 1, d = e.outlineBlur ?? 0;
  if (typeof c == "string" && (c = fa(c)), e.outline === !0) {
    const y = `${n}_outline`;
    a.polylineOutlineLayerId = y, r.addLayer(
      {
        id: y,
        type: "line",
        source: t,
        layout: {
          "line-join": e.lineJoin ?? "round",
          "line-cap": e.lineCap ?? "round"
        },
        minzoom: e.minzoom ?? 0,
        maxzoom: e.maxzoom ?? 23,
        paint: {
          "line-opacity": typeof f == "number" ? f : $(f),
          "line-color": typeof m == "string" ? m : Ae(m),
          "line-width": Bs(o, p),
          "line-blur": typeof d == "number" ? d : $(d)
        }
      },
      e.beforeId
    );
  }
  return r.addLayer(
    {
      id: n,
      type: "line",
      source: t,
      layout: {
        "line-join": e.lineJoin ?? "round",
        "line-cap": e.lineCap ?? "round"
      },
      minzoom: e.minzoom ?? 0,
      maxzoom: e.maxzoom ?? 23,
      paint: {
        "line-opacity": typeof s == "number" ? s : $(s),
        "line-color": typeof i == "string" ? i : Ae(i),
        "line-width": typeof o == "number" ? o : $(o),
        "line-blur": typeof l == "number" ? l : $(l),
        "line-gap-width": typeof u == "number" ? u : $(u),
        // For some reasons passing "line-dasharray" with the value "undefined"
        // results in no showing the line while it should have the same behavior
        // of not adding the property "line-dasharray" as all.
        // As a workaround, we are inlining the addition of the prop with a conditional
        // which is less readable.
        ...c && { "line-dasharray": c }
      }
    },
    e.beforeId
  ), a;
}
function Ws(r, e) {
  if (e.layerId && r.getLayer(e.layerId))
    throw new Error(`A layer already exists with the layer id: ${e.layerId}`);
  const t = e.sourceId ?? It(), n = e.layerId ?? Mt(), a = {
    polygonLayerId: n,
    polygonOutlineLayerId: e.outline ? `${n}_outline` : "",
    polygonSourceId: t
  };
  if (e.data && !r.getSource(t)) {
    let y = e.data;
    typeof y == "string" && mt(y) && (y = `https://api.maptiler.com/data/${y}/features.json?key=${B.apiKey}`), r.addSource(t, {
      type: "geojson",
      data: y
    });
  }
  let o = e.outlineDashArray ?? null;
  const i = e.outlineWidth ?? 1, s = e.outlineColor ?? "#FFFFFF", l = e.outlineOpacity ?? 1, u = e.outlineBlur ?? 0, c = e.fillColor ?? Cr(), p = e.fillOpacity ?? 1, m = e.outlinePosition ?? "center", f = e.pattern ?? null;
  typeof o == "string" && (o = fa(o));
  const d = (y = null) => {
    if (r.addLayer(
      {
        id: n,
        type: "fill",
        source: t,
        minzoom: e.minzoom ?? 0,
        maxzoom: e.maxzoom ?? 23,
        paint: {
          "fill-color": typeof c == "string" ? c : Ae(c),
          "fill-opacity": typeof p == "number" ? p : $(p),
          // Adding a pattern if provided
          ...y && { "fill-pattern": y }
        }
      },
      e.beforeId
    ), e.outline === !0) {
      let b;
      m === "inside" ? typeof i == "number" ? b = 0.5 * i : b = $(
        i.map(({ zoom: w, value: v }) => ({
          zoom: w,
          value: 0.5 * v
        }))
      ) : m === "outside" ? typeof i == "number" ? b = -0.5 * i : b = $(
        i.map((w) => ({
          zoom: w.zoom,
          value: -0.5 * w.value
        }))
      ) : b = 0, r.addLayer(
        {
          id: a.polygonOutlineLayerId,
          type: "line",
          source: t,
          layout: {
            "line-join": e.outlineJoin ?? "round",
            "line-cap": e.outlineCap ?? "butt"
          },
          minzoom: e.minzoom ?? 0,
          maxzoom: e.maxzoom ?? 23,
          paint: {
            "line-opacity": typeof l == "number" ? l : $(l),
            "line-color": typeof s == "string" ? s : Ae(s),
            "line-width": typeof i == "number" ? i : $(i),
            "line-blur": typeof u == "number" ? u : $(u),
            "line-offset": b,
            // For some reasons passing "line-dasharray" with the value "undefined"
            // results in no showing the line while it should have the same behavior
            // of not adding the property "line-dasharray" as all.
            // As a workaround, we are inlining the addition of the prop with a conditional
            // which is less readable.
            ...o && {
              "line-dasharray": o
            }
          }
        },
        e.beforeId
      );
    }
  };
  return f ? r.hasImage(f) ? d(f) : r.loadImage(f).then((y) => {
    r.addImage(f, y.data), d(f);
  }).catch((y) => (console.error("Could not load the pattern image.", y.message), d())) : d(), a;
}
function Js(r, e) {
  if (e.layerId && r.getLayer(e.layerId))
    throw new Error(`A layer already exists with the layer id: ${e.layerId}`);
  const t = e.minPointRadius ?? 10, n = e.maxPointRadius ?? 50, a = e.cluster ?? !1, o = 20, i = Array.isArray(e.pointColor) ? e.pointColor : pa.TURBO.scale(10, e.cluster ? 1e4 : 1e3).resample("ease-out-square"), s = i.getBounds(), l = e.sourceId ?? It(), u = e.layerId ?? Mt(), c = e.showLabel ?? a, p = e.alignOnViewport ?? !0, m = e.outline ?? !1, f = e.outlineOpacity ?? 1, d = e.outlineWidth ?? 1, y = e.outlineColor ?? "#FFFFFF";
  let b;
  const w = e.zoomCompensation ?? !0, v = e.minzoom ?? 0, E = e.maxzoom ?? 23;
  typeof e.pointOpacity == "number" ? b = e.pointOpacity : Array.isArray(e.pointOpacity) ? b = $(e.pointOpacity) : e.cluster ? b = fn(i, "point_count") : e.property ? b = fn(i, e.property) : b = $([
    { zoom: v, value: 0 },
    { zoom: v + 0.25, value: 1 },
    { zoom: E - 0.25, value: 1 },
    { zoom: E, value: 0 }
  ]);
  const R = {
    pointLayerId: u,
    clusterLayerId: "",
    labelLayerId: "",
    pointSourceId: l
  };
  if (e.data && !r.getSource(l)) {
    let P = e.data;
    typeof P == "string" && mt(P) && (P = `https://api.maptiler.com/data/${P}/features.json?key=${B.apiKey}`), r.addSource(l, {
      type: "geojson",
      data: P,
      cluster: a
    });
  }
  if (a) {
    R.clusterLayerId = `${u}_cluster`;
    const P = Array.from({ length: o }, (te, ge) => {
      const Oe = s.min + ge * (s.max - s.min) / (o - 1);
      return {
        value: Oe,
        pointRadius: t + (n - t) * (ge / (o - 1)) ** 0.5,
        color: i.getColorHex(Oe)
      };
    });
    r.addLayer(
      {
        id: R.clusterLayerId,
        type: "circle",
        source: l,
        filter: ["has", "point_count"],
        paint: {
          // 'circle-color': options.pointColor ?? colorDrivenByProperty(clusterStyle, "point_count"),
          "circle-color": typeof e.pointColor == "string" ? e.pointColor : cn(P, "point_count"),
          "circle-radius": typeof e.pointRadius == "number" ? e.pointRadius : Array.isArray(e.pointRadius) ? $(e.pointRadius) : pn(P, "point_count", !1),
          "circle-pitch-alignment": p ? "viewport" : "map",
          "circle-pitch-scale": "map",
          // scale with camera distance regardless of viewport/biewport alignement
          "circle-opacity": b,
          ...m && {
            "circle-stroke-opacity": typeof f == "number" ? f : $(f),
            "circle-stroke-width": typeof d == "number" ? d : $(d),
            "circle-stroke-color": typeof y == "string" ? y : Ae(y)
          }
        },
        minzoom: v,
        maxzoom: E
      },
      e.beforeId
    ), r.addLayer(
      {
        id: R.pointLayerId,
        type: "circle",
        source: l,
        filter: ["!", ["has", "point_count"]],
        paint: {
          "circle-pitch-alignment": p ? "viewport" : "map",
          "circle-pitch-scale": "map",
          // scale with camera distance regardless of viewport/biewport alignement
          // 'circle-color':  options.pointColor ?? clusterStyle[0].color,
          "circle-color": typeof e.pointColor == "string" ? e.pointColor : i.getColorHex(i.getBounds().min),
          "circle-radius": typeof e.pointRadius == "number" ? e.pointRadius : Array.isArray(e.pointRadius) ? $(e.pointRadius) : P[0].pointRadius * 0.75,
          "circle-opacity": b,
          ...m && {
            "circle-stroke-opacity": typeof f == "number" ? f : $(f),
            "circle-stroke-width": typeof d == "number" ? d : $(d),
            "circle-stroke-color": typeof y == "string" ? y : Ae(y)
          }
        },
        minzoom: v,
        maxzoom: E
      },
      e.beforeId
    );
  } else {
    let P = typeof e.pointColor == "string" ? e.pointColor : Array.isArray(e.pointColor) ? e.pointColor.getColorHex(e.pointColor.getBounds().min) : Cr(), te = typeof e.pointRadius == "number" ? w ? $([
      { zoom: 0, value: e.pointRadius * 0.025 },
      { zoom: 2, value: e.pointRadius * 0.05 },
      { zoom: 4, value: e.pointRadius * 0.1 },
      { zoom: 8, value: e.pointRadius * 0.25 },
      { zoom: 16, value: e.pointRadius * 1 }
    ]) : e.pointRadius : Array.isArray(e.pointRadius) ? $(e.pointRadius) : w ? $([
      { zoom: 0, value: t * 0.05 },
      { zoom: 2, value: t * 0.1 },
      { zoom: 4, value: t * 0.2 },
      { zoom: 8, value: t * 0.5 },
      { zoom: 16, value: t * 1 }
    ]) : t;
    if (e.property && Array.isArray(e.pointColor)) {
      const ge = Array.from({ length: o }, (Oe, Xe) => {
        const Qe = s.min + Xe * (s.max - s.min) / (o - 1);
        return {
          value: Qe,
          pointRadius: typeof e.pointRadius == "number" ? e.pointRadius : t + (n - t) * (Xe / (o - 1)) ** 0.5,
          color: typeof e.pointColor == "string" ? e.pointColor : i.getColorHex(Qe)
        };
      });
      P = cn(ge, e.property), te = pn(ge, e.property, w);
    }
    r.addLayer(
      {
        id: R.pointLayerId,
        type: "circle",
        source: l,
        layout: {
          // Contrary to labels, we want to see the small one in front. Weirdly "circle-sort-key" works in the opposite direction as "symbol-sort-key".
          "circle-sort-key": e.property ? ["/", 1, ["get", e.property]] : 0
        },
        paint: {
          "circle-pitch-alignment": p ? "viewport" : "map",
          "circle-pitch-scale": "map",
          // scale with camera distance regardless of viewport/biewport alignement
          "circle-color": P,
          "circle-opacity": b,
          "circle-radius": te,
          ...m && {
            "circle-stroke-opacity": typeof f == "number" ? f : $(f),
            "circle-stroke-width": typeof d == "number" ? d : $(d),
            "circle-stroke-color": typeof y == "string" ? y : Ae(y)
          }
        },
        minzoom: v,
        maxzoom: E
      },
      e.beforeId
    );
  }
  if (c !== !1 && (e.cluster || e.property)) {
    R.labelLayerId = `${u}_label`;
    const P = e.labelColor ?? "#fff", te = e.labelSize ?? 12;
    r.addLayer(
      {
        id: R.labelLayerId,
        type: "symbol",
        source: l,
        filter: ["has", e.cluster ? "point_count" : e.property],
        layout: {
          "text-field": e.cluster ? "{point_count_abbreviated}" : `{${e.property}}`,
          "text-font": ["Noto Sans Regular"],
          "text-size": te,
          "text-pitch-alignment": p ? "viewport" : "map",
          "symbol-sort-key": ["/", 1, ["get", e.cluster ? "point_count" : e.property]]
          // so that the largest value goes on top
        },
        paint: {
          "text-color": P,
          "text-opacity": b
        },
        minzoom: v,
        maxzoom: E
      },
      e.beforeId
    );
  }
  return R;
}
function Ys(r, e) {
  if (e.layerId && r.getLayer(e.layerId))
    throw new Error(`A layer already exists with the layer id: ${e.layerId}`);
  const t = e.sourceId ?? It(), n = e.layerId ?? Mt(), a = e.minzoom ?? 0, o = e.maxzoom ?? 23, i = e.zoomCompensation ?? !0, s = e.opacity ?? [
    { zoom: a, value: 0 },
    { zoom: a + 0.25, value: 1 },
    { zoom: o - 0.25, value: 1 },
    { zoom: o, value: 0 }
  ];
  let l = Array.isArray(e.colorRamp) ? e.colorRamp : pa.TURBO.transparentStart();
  const u = l.getBounds();
  (u.min !== 0 || u.max !== 1) && (l = l.scale(0, 1)), l.hasTransparentStart() || (l = l.transparentStart());
  const c = e.intensity ?? [
    { zoom: 0, value: 0.01 },
    { zoom: 4, value: 0.2 },
    { zoom: 16, value: 1 }
  ], p = e.property ?? null, m = e.weight ?? 1;
  let f = 1;
  p ? typeof m == "number" ? (f = m, typeof e.weight == "number" && console.warn(
    "The option `.property` is ignored when `.propertyValueWeights` is not of type `PropertyValueWeights`"
  )) : Array.isArray(m) ? f = Vs(m, p) : console.warn(
    "The option `.property` is ignored when `.propertyValueWeights` is not of type `PropertyValueWeights`"
  ) : typeof m == "number" ? f = m : Array.isArray(m) && console.warn("The options `.propertyValueWeights` can only be used when `.property` is provided.");
  const d = [
    { zoom: 0, value: 50 * 0.025 },
    { zoom: 2, value: 50 * 0.05 },
    { zoom: 4, value: 50 * 0.1 },
    { zoom: 8, value: 50 * 0.25 },
    { zoom: 16, value: 50 }
  ], y = e.radius ?? (i ? d : 10);
  let b = 1;
  typeof y == "number" ? b = y : Array.isArray(y) && "zoom" in y[0] ? b = $(y) : p && Array.isArray(y) && "propertyValue" in y[0] ? b = Gs(y, p, i) : !p && Array.isArray(y) && "propertyValue" in y[0] ? (b = $(d), console.warn("The option `.radius` can only be property-driven if the option `.property` is provided.")) : b = $(d);
  const w = {
    heatmapLayerId: n,
    heatmapSourceId: t
  };
  if (e.data && !r.getSource(t)) {
    let v = e.data;
    typeof v == "string" && mt(v) && (v = `https://api.maptiler.com/data/${v}/features.json?key=${B.apiKey}`), r.addSource(t, {
      type: "geojson",
      data: v
    });
  }
  return r.addLayer(
    {
      id: n,
      type: "heatmap",
      source: t,
      minzoom: a,
      maxzoom: o,
      paint: {
        "heatmap-weight": f,
        "heatmap-intensity": typeof c == "number" ? c : $(c),
        "heatmap-color": Hs(l),
        "heatmap-radius": b,
        "heatmap-opacity": typeof s == "number" ? s : $(s)
      }
    },
    e.beforeId
  ), w;
}
const Ll = {
  addPolyline: Ks,
  addPolygon: Ws,
  addPoint: Js,
  addHeatmap: Ys,
  takeScreenshot: qs
};
ao();
function Al() {
  return Ja.version;
}
const Tl = x.Map, El = x.Marker, Il = x.Popup, Ml = x.Style, _l = x.CanvasSource, zl = x.GeoJSONSource, $l = x.ImageSource, Pl = x.RasterTileSource, Rl = x.RasterDEMTileSource, Fl = x.VectorTileSource, Nl = x.VideoSource, Ol = x.NavigationControl, Dl = x.GeolocateControl, jl = x.AttributionControl, ql = x.LogoControl, Ul = x.ScaleControl, Bl = x.FullscreenControl, Vl = x.TerrainControl, Gl = x.BoxZoomHandler, Hl = x.ScrollZoomHandler, Kl = x.CooperativeGesturesHandler, Zl = x.KeyboardHandler, Wl = x.TwoFingersTouchPitchHandler, Jl = x.MapWheelEvent, Yl = x.MapTouchEvent, Xl = x.MapMouseEvent, Ql = x.config, eu = x.getVersion, {
  setRTLTextPlugin: tu,
  getRTLTextPluginStatus: ru,
  LngLat: nu,
  LngLatBounds: au,
  MercatorCoordinate: ou,
  Evented: iu,
  AJAXError: su,
  prewarm: lu,
  clearPrewarmedResources: uu,
  Hash: cu,
  Point: pu,
  EdgeInsets: fu,
  DragRotateHandler: du,
  DragPanHandler: yu,
  TwoFingersTouchZoomRotateHandler: mu,
  DoubleClickZoomHandler: hu,
  TwoFingersTouchZoomHandler: gu,
  TwoFingersTouchRotateHandler: vu,
  getWorkerCount: bu,
  setWorkerCount: wu,
  getMaxParallelImageRequests: xu,
  setMaxParallelImageRequests: Su,
  getWorkerUrl: ku,
  setWorkerUrl: Cu,
  addSourceType: Lu,
  importScriptInWorkers: Au,
  addProtocol: Tu,
  removeProtocol: Eu
} = x;
export {
  su as AJAXError,
  ml as AttributionControl,
  jl as AttributionControlMLGL,
  gl as BoxZoomHandler,
  Gl as BoxZoomHandlerMLGL,
  ll as CanvasSource,
  _l as CanvasSourceMLGL,
  S as ColorRamp,
  pa as ColorRampCollection,
  bl as CooperativeGesturesHandler,
  Kl as CooperativeGesturesHandlerMLGL,
  hu as DoubleClickZoomHandler,
  yu as DragPanHandler,
  du as DragRotateHandler,
  fu as EdgeInsets,
  iu as Evented,
  mo as FullscreenControl,
  Bl as FullscreenControlMLGL,
  ul as GeoJSONSource,
  zl as GeoJSONSourceMLGL,
  po as GeolocateControl,
  Dl as GeolocateControlMLGL,
  Ms as GeolocationType,
  cu as Hash,
  cl as ImageSource,
  $l as ImageSourceMLGL,
  wl as KeyboardHandler,
  Zl as KeyboardHandlerMLGL,
  I as Language,
  nu as LngLat,
  au as LngLatBounds,
  fo as LogoControl,
  ql as LogoControlMLGL,
  _s as Map,
  Tl as MapMLGL,
  Cl as MapMouseEvent,
  Xl as MapMouseEventMLGL,
  _u as MapStyle,
  zu as MapStyleVariant,
  kl as MapTouchEvent,
  Yl as MapTouchEventMLGL,
  Sl as MapWheelEvent,
  Jl as MapWheelEventMLGL,
  Is as MaptilerGeolocateControl,
  $r as MaptilerLogoControl,
  Ts as MaptilerNavigationControl,
  As as MaptilerTerrainControl,
  al as Marker,
  El as MarkerMLGL,
  ou as MercatorCoordinate,
  Ol as NavigationControMLGL,
  co as NavigationControl,
  pu as Point,
  il as Popup,
  Il as PopupMLGL,
  fl as RasterDEMTileSource,
  Rl as RasterDEMTileSourceMLGL,
  pl as RasterTileSource,
  Pl as RasterTileSourceMLGL,
  $u as ReferenceMapStyle,
  yo as ScaleControl,
  Ul as ScaleControlMLGL,
  vl as ScrollZoomHandler,
  Hl as ScrollZoomHandlerMLGL,
  Ya as SdkConfig,
  Pu as ServiceError,
  sl as Style,
  Ml as StyleMLGL,
  Vl as TerrainControMLGL,
  hl as TerrainControl,
  xl as TwoFingersTouchPitchHandler,
  Wl as TwoFingersTouchPitchHandlerMLGL,
  vu as TwoFingersTouchRotateHandler,
  gu as TwoFingersTouchZoomHandler,
  mu as TwoFingersTouchZoomRotateHandler,
  dl as VectorTileSource,
  Fl as VectorTileSourceMLGL,
  yl as VideoSource,
  Nl as VideoSourceMLGL,
  Tu as addProtocol,
  Lu as addSourceType,
  Ru as areSameLanguages,
  Fu as bufferToPixelDataBrowser,
  Nu as circumferenceAtLatitude,
  uu as clearPrewarmedResources,
  B as config,
  Ql as configMLGL,
  Ou as coordinates,
  Du as data,
  ju as elevation,
  qu as expandMapStyle,
  Uu as geocoding,
  Bu as geolocation,
  Vu as getAutoLanguage,
  Er as getBrowserLanguage,
  Gu as getBufferToPixelDataParser,
  Hu as getLanguageInfoFromCode,
  Ku as getLanguageInfoFromFlag,
  Zu as getLanguageInfoFromKey,
  eu as getMapLibreVersion,
  xu as getMaxParallelImageRequests,
  ru as getRTLTextPluginStatus,
  Wu as getTileCache,
  Al as getVersion,
  so as getWebGLSupportError,
  bu as getWorkerCount,
  ku as getWorkerUrl,
  aa as gpx,
  Ds as gpxOrKml,
  na as hasChildNodeWithName,
  Ll as helpers,
  Au as importScriptInWorkers,
  Ju as isLanguageInfo,
  oa as kml,
  Yu as mapStylePresetList,
  Xu as math,
  Qu as misc,
  lu as prewarm,
  Eu as removeProtocol,
  Su as setMaxParallelImageRequests,
  tu as setRTLTextPlugin,
  wu as setWorkerCount,
  Cu as setWorkerUrl,
  ec as staticMaps,
  Sr as str2xml,
  tc as styleToStyle,
  rc as toLanguageInfo,
  rn as xml2str
};
//# sourceMappingURL=maptiler-sdk.mjs.map
